{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Generated by CoffeeScript 2.5.1\nvar Rule, StyleSheet;\nRule = require('./Rule');\nmodule.exports = StyleSheet = function () {\n  var self;\n  var StyleSheet = /*#__PURE__*/function () {\n    function StyleSheet() {\n      _classCallCheck(this, StyleSheet);\n      this._rulesBySelector = {};\n    }\n    _createClass(StyleSheet, [{\n      key: \"setRule\",\n      value: function setRule(selector, styles) {\n        var key, val;\n        if (typeof selector === 'string') {\n          this._setRule(selector, styles);\n        } else if (_typeof(selector) === 'object') {\n          for (key in selector) {\n            val = selector[key];\n            this._setRule(key, val);\n          }\n        }\n        return this;\n      }\n    }, {\n      key: \"_setRule\",\n      value: function _setRule(s, styles) {\n        var i, len, ref, selector;\n        ref = self.splitSelectors(s);\n        for (i = 0, len = ref.length; i < len; i++) {\n          selector = ref[i];\n          this._setSingleRule(selector, styles);\n        }\n        return this;\n      }\n    }, {\n      key: \"_setSingleRule\",\n      value: function _setSingleRule(s, styles) {\n        var rule, selector;\n        selector = self.normalizeSelector(s);\n        if (!(rule = this._rulesBySelector[selector])) {\n          rule = new Rule(selector);\n          this._rulesBySelector[selector] = rule;\n        }\n        rule.setStyles(styles);\n        return this;\n      }\n    }, {\n      key: \"getRulesFor\",\n      value: function getRulesFor(el) {\n        var ref, rule, rules, selector;\n        rules = [];\n        ref = this._rulesBySelector;\n        for (selector in ref) {\n          rule = ref[selector];\n          if (rule.selector.matches(el)) {\n            rules.push(rule);\n          }\n        }\n        return rules;\n      }\n    }], [{\n      key: \"normalizeSelector\",\n      value: function normalizeSelector(selector) {\n        return selector.replace(/[\\s]+/g, ' ').replace(/[\\s]*([>\\,\\+]{1})[\\s]*/g, '$1').trim();\n      }\n    }, {\n      key: \"splitSelectors\",\n      value: function splitSelectors(s) {\n        return s.trim().split(',');\n      }\n    }]);\n    return StyleSheet;\n  }();\n  ;\n  self = StyleSheet;\n  return StyleSheet;\n}.call(void 0);","map":null,"metadata":{},"sourceType":"script"}