{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeNode = encodeNode;\nexports.encodeU32 = void 0;\nvar encoder = _interopRequireWildcard(require(\"./encoder\"));\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction encodeNode(n) {\n  switch (n.type) {\n    case \"ModuleImport\":\n      // $FlowIgnore: ModuleImport ensure that the node is well formated\n      return encoder.encodeModuleImport(n);\n    case \"SectionMetadata\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeSectionMetadata(n);\n    case \"CallInstruction\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeCallInstruction(n);\n    case \"CallIndirectInstruction\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeCallIndirectInstruction(n);\n    case \"TypeInstruction\":\n      return encoder.encodeTypeInstruction(n);\n    case \"Instr\":\n      // $FlowIgnore\n      return encoder.encodeInstr(n);\n    case \"ModuleExport\":\n      // $FlowIgnore: SectionMetadata ensure that the node is well formated\n      return encoder.encodeModuleExport(n);\n    case \"Global\":\n      // $FlowIgnore\n      return encoder.encodeGlobal(n);\n    case \"Func\":\n      return encoder.encodeFuncBody(n);\n    case \"IndexInFuncSection\":\n      return encoder.encodeIndexInFuncSection(n);\n    case \"StringLiteral\":\n      return encoder.encodeStringLiteral(n);\n    case \"Elem\":\n      return encoder.encodeElem(n);\n    default:\n      throw new Error(\"Unsupported encoding for node of type: \" + JSON.stringify(n.type));\n  }\n}\nvar encodeU32 = encoder.encodeU32;\nexports.encodeU32 = encodeU32;","map":null,"metadata":{},"sourceType":"script"}