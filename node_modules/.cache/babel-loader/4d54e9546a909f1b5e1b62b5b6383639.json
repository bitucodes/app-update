{"ast":null,"code":"var _toConsumableArray = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _toArray = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Helps to build text from words.\n */\nvar InlineTextBuilder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  function InlineTextBuilder(options) {\n    var maxLineLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    _classCallCheck(this, InlineTextBuilder);\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n  _createClass(InlineTextBuilder, [{\n    key: \"pushWord\",\n    value: function pushWord(word) {\n      if (this.nextLineAvailableChars <= 0) {\n        this.startNewLine();\n      }\n      var isLineStart = this.nextLineWords.length === 0;\n      var cost = word.length + (isLineStart ? 0 : 1);\n      if (cost <= this.nextLineAvailableChars) {\n        // Fits into available budget\n\n        this.nextLineWords.push(word);\n        this.nextLineAvailableChars -= cost;\n      } else {\n        // Does not fit - try to split the word\n        // The word is moved to a new line - prefer to wrap between words.\n        var _this$splitLongWord = this.splitLongWord(word),\n          _this$splitLongWord2 = _toArray(_this$splitLongWord),\n          first = _this$splitLongWord2[0],\n          rest = _this$splitLongWord2.slice(1);\n        if (!isLineStart) {\n          this.startNewLine();\n        }\n        this.nextLineWords.push(first);\n        this.nextLineAvailableChars -= first.length;\n        var _iterator = _createForOfIteratorHelper(rest),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var part = _step.value;\n            this.startNewLine();\n            this.nextLineWords.push(part);\n            this.nextLineAvailableChars -= part.length;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /**\n     * Pop a word from the currently built line.\n     * This doesn't affect completed lines.\n     *\n     * @returns { string }\n     */\n  }, {\n    key: \"popWord\",\n    value: function popWord() {\n      var lastWord = this.nextLineWords.pop();\n      if (lastWord !== undefined) {\n        var isLineStart = this.nextLineWords.length === 0;\n        var cost = lastWord.length + (isLineStart ? 0 : 1);\n        this.nextLineAvailableChars += cost;\n      }\n      return lastWord;\n    }\n    /**\n     * Concat a word to the last word already in the builder.\n     * Adds a new word in case there are no words yet in the last line.\n     *\n     * @param { string } word A word to be concatenated.\n     */\n  }, {\n    key: \"concatWord\",\n    value: function concatWord(word) {\n      if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n        this.pushWord(word);\n        this.wordBreakOpportunity = false;\n      } else {\n        var lastWord = this.popWord();\n        this.pushWord(lastWord ? lastWord.concat(word) : word);\n      }\n    }\n    /**\n     * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n     *\n     * @param { number } n Number of line breaks that will be added to the resulting string.\n     */\n  }, {\n    key: \"startNewLine\",\n    value: function startNewLine() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.lines.push(this.nextLineWords);\n      if (n > 1) {\n        var _this$lines;\n        (_this$lines = this.lines).push.apply(_this$lines, _toConsumableArray(Array.from({\n          length: n - 1\n        }, function () {\n          return [];\n        })));\n      }\n      this.nextLineWords = [];\n      this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n     * No words in this builder.\n     *\n     * @returns { boolean }\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.lines.length === 0 && this.nextLineWords.length === 0;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.lines.length = 0;\n      this.nextLineWords.length = 0;\n      this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n     * Join all lines of words inside the InlineTextBuilder into a complete string.\n     *\n     * @returns { string }\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return [].concat(_toConsumableArray(this.lines), [this.nextLineWords]).map(function (words) {\n        return words.join(' ');\n      }).join('\\n');\n    }\n    /**\n     * Split a long word up to fit within the word wrap limit.\n     * Use either a character to split looking back from the word wrap limit,\n     * or truncate to the word wrap limit.\n     *\n     * @param   { string }   word Input word.\n     * @returns { string[] }      Parts of the word.\n     */\n  }, {\n    key: \"splitLongWord\",\n    value: function splitLongWord(word) {\n      var parts = [];\n      var idx = 0;\n      while (word.length > this.maxLineLength) {\n        var firstLine = word.substring(0, this.maxLineLength);\n        var remainingChars = word.substring(this.maxLineLength);\n        var splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n        if (splitIndex > -1) {\n          // Found a character to split on\n\n          word = firstLine.substring(splitIndex + 1) + remainingChars;\n          parts.push(firstLine.substring(0, splitIndex + 1));\n        } else {\n          // Not found a character to split on\n\n          idx++;\n          if (idx < this.wrapCharacters.length) {\n            // There is next character to try\n\n            word = firstLine + remainingChars;\n          } else {\n            // No more characters to try\n\n            if (this.forceWrapOnLimit) {\n              parts.push(firstLine);\n              word = remainingChars;\n              if (word.length > this.maxLineLength) {\n                continue;\n              }\n            } else {\n              word = firstLine + remainingChars;\n            }\n            break;\n          }\n        }\n      }\n      parts.push(word); // Add remaining part to array\n      return parts;\n    }\n  }]);\n  return InlineTextBuilder;\n}();\nmodule.exports = {\n  InlineTextBuilder: InlineTextBuilder\n};","map":null,"metadata":{},"sourceType":"script"}