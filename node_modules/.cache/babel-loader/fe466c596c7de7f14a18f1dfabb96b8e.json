{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Gajus Kuizinas @gajus\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar WebpackError = require(\"./WebpackError\");\nvar webpackOptionsSchema = require(\"../schemas/WebpackOptions.json\");\nvar getSchemaPart = function getSchemaPart(path, parents, additionalPath) {\n  parents = parents || 0;\n  path = path.split(\"/\");\n  path = path.slice(0, path.length - parents);\n  if (additionalPath) {\n    additionalPath = additionalPath.split(\"/\");\n    path = path.concat(additionalPath);\n  }\n  var schemaPart = webpackOptionsSchema;\n  for (var i = 1; i < path.length; i++) {\n    var inner = schemaPart[path[i]];\n    if (inner) schemaPart = inner;\n  }\n  return schemaPart;\n};\nvar getSchemaPartText = function getSchemaPartText(schemaPart, additionalPath) {\n  if (additionalPath) {\n    for (var i = 0; i < additionalPath.length; i++) {\n      var inner = schemaPart[additionalPath[i]];\n      if (inner) schemaPart = inner;\n    }\n  }\n  while (schemaPart.$ref) {\n    schemaPart = getSchemaPart(schemaPart.$ref);\n  }\n  var schemaText = WebpackOptionsValidationError.formatSchema(schemaPart);\n  if (schemaPart.description) {\n    schemaText += \"\\n-> \".concat(schemaPart.description);\n  }\n  return schemaText;\n};\nvar getSchemaPartDescription = function getSchemaPartDescription(schemaPart) {\n  while (schemaPart.$ref) {\n    schemaPart = getSchemaPart(schemaPart.$ref);\n  }\n  if (schemaPart.description) {\n    return \"\\n-> \".concat(schemaPart.description);\n  }\n  return \"\";\n};\nvar filterChildren = function filterChildren(children) {\n  return children.filter(function (err) {\n    return err.keyword !== \"anyOf\" && err.keyword !== \"allOf\" && err.keyword !== \"oneOf\";\n  });\n};\nvar indent = function indent(str, prefix, firstLine) {\n  if (firstLine) {\n    return prefix + str.replace(/\\n(?!$)/g, \"\\n\" + prefix);\n  } else {\n    return str.replace(/\\n(?!$)/g, \"\\n\".concat(prefix));\n  }\n};\nvar WebpackOptionsValidationError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(WebpackOptionsValidationError, _WebpackError);\n  function WebpackOptionsValidationError(validationErrors) {\n    var _this;\n    _classCallCheck(this, WebpackOptionsValidationError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebpackOptionsValidationError).call(this, \"Invalid configuration object. \" + \"Webpack has been initialised using a configuration object that does not match the API schema.\\n\" + validationErrors.map(function (err) {\n      return \" - \" + indent(WebpackOptionsValidationError.formatValidationError(err), \"   \", false);\n    }).join(\"\\n\")));\n    _this.name = \"WebpackOptionsValidationError\";\n    _this.validationErrors = validationErrors;\n    Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor);\n    return _this;\n  }\n  _createClass(WebpackOptionsValidationError, null, [{\n    key: \"formatSchema\",\n    value: function formatSchema(schema, prevSchemas) {\n      prevSchemas = prevSchemas || [];\n      var formatInnerSchema = function formatInnerSchema(innerSchema, addSelf) {\n        if (!addSelf) {\n          return WebpackOptionsValidationError.formatSchema(innerSchema, prevSchemas);\n        }\n        if (prevSchemas.includes(innerSchema)) {\n          return \"(recursive)\";\n        }\n        return WebpackOptionsValidationError.formatSchema(innerSchema, prevSchemas.concat(schema));\n      };\n      if (schema.type === \"string\") {\n        if (schema.minLength === 1) {\n          return \"non-empty string\";\n        }\n        if (schema.minLength > 1) {\n          return \"string (min length \".concat(schema.minLength, \")\");\n        }\n        return \"string\";\n      }\n      if (schema.type === \"boolean\") {\n        return \"boolean\";\n      }\n      if (schema.type === \"number\") {\n        return \"number\";\n      }\n      if (schema.type === \"object\") {\n        if (schema.properties) {\n          var required = schema.required || [];\n          return \"object { \".concat(Object.keys(schema.properties).map(function (property) {\n            if (!required.includes(property)) return property + \"?\";\n            return property;\n          }).concat(schema.additionalProperties ? [\"â€¦\"] : []).join(\", \"), \" }\");\n        }\n        if (schema.additionalProperties) {\n          return \"object { <key>: \".concat(formatInnerSchema(schema.additionalProperties), \" }\");\n        }\n        return \"object\";\n      }\n      if (schema.type === \"array\") {\n        return \"[\".concat(formatInnerSchema(schema.items), \"]\");\n      }\n      switch (schema.instanceof) {\n        case \"Function\":\n          return \"function\";\n        case \"RegExp\":\n          return \"RegExp\";\n      }\n      if (schema.$ref) {\n        return formatInnerSchema(getSchemaPart(schema.$ref), true);\n      }\n      if (schema.allOf) {\n        return schema.allOf.map(formatInnerSchema).join(\" & \");\n      }\n      if (schema.oneOf) {\n        return schema.oneOf.map(formatInnerSchema).join(\" | \");\n      }\n      if (schema.anyOf) {\n        return schema.anyOf.map(formatInnerSchema).join(\" | \");\n      }\n      if (schema.enum) {\n        return schema.enum.map(function (item) {\n          return JSON.stringify(item);\n        }).join(\" | \");\n      }\n      return JSON.stringify(schema, null, 2);\n    }\n  }, {\n    key: \"formatValidationError\",\n    value: function formatValidationError(err) {\n      var dataPath = \"configuration\".concat(err.dataPath);\n      if (err.keyword === \"additionalProperties\") {\n        var baseMessage = \"\".concat(dataPath, \" has an unknown property '\").concat(err.params.additionalProperty, \"'. These properties are valid:\\n\").concat(getSchemaPartText(err.parentSchema));\n        if (!err.dataPath) {\n          switch (err.params.additionalProperty) {\n            case \"debug\":\n              return \"\".concat(baseMessage, \"\\n\") + \"The 'debug' property was removed in webpack 2.0.0.\\n\" + \"Loaders should be updated to allow passing this option via loader options in module.rules.\\n\" + \"Until loaders are updated one can use the LoaderOptionsPlugin to switch loaders into debug mode:\\n\" + \"plugins: [\\n\" + \"  new webpack.LoaderOptionsPlugin({\\n\" + \"    debug: true\\n\" + \"  })\\n\" + \"]\";\n          }\n          return \"\".concat(baseMessage, \"\\n\") + \"For typos: please correct them.\\n\" + \"For loader options: webpack >= v2.0.0 no longer allows custom properties in configuration.\\n\" + \"  Loaders should be updated to allow passing options via loader options in module.rules.\\n\" + \"  Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:\\n\" + \"  plugins: [\\n\" + \"    new webpack.LoaderOptionsPlugin({\\n\" + \"      // test: /\\\\.xxx$/, // may apply this only for some modules\\n\" + \"      options: {\\n\" + \"        \".concat(err.params.additionalProperty, \": \\u2026\\n\") + \"      }\\n\" + \"    })\\n\" + \"  ]\";\n        }\n        return baseMessage;\n      } else if (err.keyword === \"oneOf\" || err.keyword === \"anyOf\") {\n        if (err.children && err.children.length > 0) {\n          if (err.schema.length === 1) {\n            var lastChild = err.children[err.children.length - 1];\n            var remainingChildren = err.children.slice(0, err.children.length - 1);\n            return WebpackOptionsValidationError.formatValidationError(Object.assign({}, lastChild, {\n              children: remainingChildren,\n              parentSchema: Object.assign({}, err.parentSchema, lastChild.parentSchema)\n            }));\n          }\n          return \"\".concat(dataPath, \" should be one of these:\\n\").concat(getSchemaPartText(err.parentSchema), \"\\n\") + \"Details:\\n\".concat(filterChildren(err.children).map(function (err) {\n            return \" * \" + indent(WebpackOptionsValidationError.formatValidationError(err), \"   \", false);\n          }).join(\"\\n\"));\n        }\n        return \"\".concat(dataPath, \" should be one of these:\\n\").concat(getSchemaPartText(err.parentSchema));\n      } else if (err.keyword === \"enum\") {\n        if (err.parentSchema && err.parentSchema.enum && err.parentSchema.enum.length === 1) {\n          return \"\".concat(dataPath, \" should be \").concat(getSchemaPartText(err.parentSchema));\n        }\n        return \"\".concat(dataPath, \" should be one of these:\\n\").concat(getSchemaPartText(err.parentSchema));\n      } else if (err.keyword === \"allOf\") {\n        return \"\".concat(dataPath, \" should be:\\n\").concat(getSchemaPartText(err.parentSchema));\n      } else if (err.keyword === \"type\") {\n        switch (err.params.type) {\n          case \"object\":\n            return \"\".concat(dataPath, \" should be an object.\").concat(getSchemaPartDescription(err.parentSchema));\n          case \"string\":\n            return \"\".concat(dataPath, \" should be a string.\").concat(getSchemaPartDescription(err.parentSchema));\n          case \"boolean\":\n            return \"\".concat(dataPath, \" should be a boolean.\").concat(getSchemaPartDescription(err.parentSchema));\n          case \"number\":\n            return \"\".concat(dataPath, \" should be a number.\").concat(getSchemaPartDescription(err.parentSchema));\n          case \"array\":\n            return \"\".concat(dataPath, \" should be an array:\\n\").concat(getSchemaPartText(err.parentSchema));\n        }\n        return \"\".concat(dataPath, \" should be \").concat(err.params.type, \":\\n\").concat(getSchemaPartText(err.parentSchema));\n      } else if (err.keyword === \"instanceof\") {\n        return \"\".concat(dataPath, \" should be an instance of \").concat(getSchemaPartText(err.parentSchema));\n      } else if (err.keyword === \"required\") {\n        var missingProperty = err.params.missingProperty.replace(/^\\./, \"\");\n        return \"\".concat(dataPath, \" misses the property '\").concat(missingProperty, \"'.\\n\").concat(getSchemaPartText(err.parentSchema, [\"properties\", missingProperty]));\n      } else if (err.keyword === \"minimum\") {\n        return \"\".concat(dataPath, \" \").concat(err.message, \".\").concat(getSchemaPartDescription(err.parentSchema));\n      } else if (err.keyword === \"uniqueItems\") {\n        return \"\".concat(dataPath, \" should not contain the item '\").concat(err.data[err.params.i], \"' twice.\").concat(getSchemaPartDescription(err.parentSchema));\n      } else if (err.keyword === \"minLength\" || err.keyword === \"minItems\" || err.keyword === \"minProperties\") {\n        if (err.params.limit === 1) {\n          return \"\".concat(dataPath, \" should not be empty.\").concat(getSchemaPartDescription(err.parentSchema));\n        } else {\n          return \"\".concat(dataPath, \" \").concat(err.message).concat(getSchemaPartDescription(err.parentSchema));\n        }\n      } else if (err.keyword === \"absolutePath\") {\n        var _baseMessage = \"\".concat(dataPath, \": \").concat(err.message).concat(getSchemaPartDescription(err.parentSchema));\n        if (dataPath === \"configuration.output.filename\") {\n          return \"\".concat(_baseMessage, \"\\n\") + \"Please use output.path to specify absolute path and output.filename for the file name.\";\n        }\n        return _baseMessage;\n      } else {\n        return \"\".concat(dataPath, \" \").concat(err.message, \" (\").concat(JSON.stringify(err, null, 2), \").\\n\").concat(getSchemaPartText(err.parentSchema));\n      }\n    }\n  }]);\n  return WebpackOptionsValidationError;\n}(WebpackError);\nmodule.exports = WebpackOptionsValidationError;","map":null,"metadata":{},"sourceType":"script"}