{"ast":null,"code":"var SourceMapConsumer = require('source-map').SourceMapConsumer;\nfunction inputSourceMapTracker() {\n  var maps = {};\n  return {\n    all: all.bind(null, maps),\n    isTracking: isTracking.bind(null, maps),\n    originalPositionFor: originalPositionFor.bind(null, maps),\n    track: track.bind(null, maps)\n  };\n}\nfunction all(maps) {\n  return maps;\n}\nfunction isTracking(maps, source) {\n  return source in maps;\n}\nfunction originalPositionFor(maps, metadata, range, selectorFallbacks) {\n  var line = metadata[0];\n  var column = metadata[1];\n  var source = metadata[2];\n  var position = {\n    line: line,\n    column: column + range\n  };\n  var originalPosition;\n  while (!originalPosition && position.column > column) {\n    position.column--;\n    originalPosition = maps[source].originalPositionFor(position);\n  }\n  if (!originalPosition || originalPosition.column < 0) {\n    return metadata;\n  }\n  if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {\n    return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);\n  }\n  return originalPosition.line !== null ? toMetadata(originalPosition) : metadata;\n}\nfunction toMetadata(asHash) {\n  return [asHash.line, asHash.column, asHash.source];\n}\nfunction track(maps, source, data) {\n  maps[source] = new SourceMapConsumer(data);\n}\nmodule.exports = inputSourceMapTracker;","map":null,"metadata":{},"sourceType":"script"}