{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nvar MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\nvar MultiEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  function MultiEntryPlugin(context, entries, name) {\n    _classCallCheck(this, MultiEntryPlugin);\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(MultiEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"MultiEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var multiModuleFactory = new MultiModuleFactory();\n        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", function (compilation, callback) {\n        var context = _this.context,\n          entries = _this.entries,\n          name = _this.name;\n        var dep = MultiEntryPlugin.createDependency(entries, name);\n        compilation.addEntry(context, dep, name, callback);\n      });\n    }\n    /**\n     * @param {string[]} entries each entry path string\n     * @param {string} name name of the entry\n     * @returns {MultiEntryDependency} returns a constructed Dependency\n     */\n  }], [{\n    key: \"createDependency\",\n    value: function createDependency(entries, name) {\n      return new MultiEntryDependency(entries.map(function (e, idx) {\n        var dep = new SingleEntryDependency(e);\n        // Because entrypoints are not dependencies found in an\n        // existing module, we give it a synthetic id\n        dep.loc = {\n          name: name,\n          index: idx\n        };\n        return dep;\n      }), name);\n    }\n  }]);\n  return MultiEntryPlugin;\n}();\nmodule.exports = MultiEntryPlugin;","map":null,"metadata":{},"sourceType":"script"}