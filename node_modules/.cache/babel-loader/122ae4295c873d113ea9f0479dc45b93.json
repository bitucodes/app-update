{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar concord = require(\"./concord\");\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nvar getInnerRequest = require(\"./getInnerRequest\");\nmodule.exports = /*#__PURE__*/function () {\n  function ConcordModulesPlugin(source, options, target) {\n    _classCallCheck(this, ConcordModulesPlugin);\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n  _createClass(ConcordModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ConcordModulesPlugin\", function (request, resolveContext, callback) {\n        var innerRequest = getInnerRequest(resolver, request);\n        if (!innerRequest) return callback();\n        var concordField = DescriptionFileUtils.getField(request.descriptionFileData, \"concord\");\n        if (!concordField) return callback();\n        var data = concord.matchModule(request.context, concordField, innerRequest);\n        if (data === innerRequest) return callback();\n        if (data === undefined) return callback();\n        if (data === false) {\n          var ignoreObj = Object.assign({}, request, {\n            path: false\n          });\n          return callback(null, ignoreObj);\n        }\n        var obj = Object.assign({}, request, {\n          path: request.descriptionFileRoot,\n          request: data\n        });\n        resolver.doResolve(target, obj, \"aliased from description file \" + request.descriptionFilePath + \" with mapping '\" + innerRequest + \"' to '\" + data + \"'\", resolveContext, function (err, result) {\n          if (err) return callback(err);\n\n          // Don't allow other aliasing or raw request\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    }\n  }]);\n  return ConcordModulesPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}