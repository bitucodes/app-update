{"ast":null,"code":"'use strict';\n\nvar ls = require('../ls.js');\nvar get = require('../get.js');\nvar put = require('../put.js');\nvar rm = require('../rm.js');\nvar verify = require('../verify.js');\nvar setLocale = require('../lib/util/y.js').setLocale;\nvar clearMemoized = require('../lib/memoization.js').clearMemoized;\nvar tmp = require('../lib/util/tmp.js');\nsetLocale('en');\nvar x = module.exports;\nx.ls = function (cache) {\n  return ls(cache);\n};\nx.ls.stream = function (cache) {\n  return ls.stream(cache);\n};\nx.get = function (cache, key, opts) {\n  return get(cache, key, opts);\n};\nx.get.byDigest = function (cache, hash, opts) {\n  return get.byDigest(cache, hash, opts);\n};\nx.get.stream = function (cache, key, opts) {\n  return get.stream(cache, key, opts);\n};\nx.get.stream.byDigest = function (cache, hash, opts) {\n  return get.stream.byDigest(cache, hash, opts);\n};\nx.get.copy = function (cache, key, dest, opts) {\n  return get.copy(cache, key, dest, opts);\n};\nx.get.copy.byDigest = function (cache, hash, dest, opts) {\n  return get.copy.byDigest(cache, hash, dest, opts);\n};\nx.get.info = function (cache, key) {\n  return get.info(cache, key);\n};\nx.get.hasContent = function (cache, hash) {\n  return get.hasContent(cache, hash);\n};\nx.put = function (cache, key, data, opts) {\n  return put(cache, key, data, opts);\n};\nx.put.stream = function (cache, key, opts) {\n  return put.stream(cache, key, opts);\n};\nx.rm = function (cache, key) {\n  return rm.entry(cache, key);\n};\nx.rm.all = function (cache) {\n  return rm.all(cache);\n};\nx.rm.entry = x.rm;\nx.rm.content = function (cache, hash) {\n  return rm.content(cache, hash);\n};\nx.setLocale = function (lang) {\n  return setLocale(lang);\n};\nx.clearMemoized = function () {\n  return clearMemoized();\n};\nx.tmp = {};\nx.tmp.mkdir = function (cache, opts) {\n  return tmp.mkdir(cache, opts);\n};\nx.tmp.withTmp = function (cache, opts, cb) {\n  return tmp.withTmp(cache, opts, cb);\n};\nx.verify = function (cache, opts) {\n  return verify(cache, opts);\n};\nx.verify.lastRun = function (cache) {\n  return verify.lastRun(cache);\n};","map":null,"metadata":{},"sourceType":"script"}