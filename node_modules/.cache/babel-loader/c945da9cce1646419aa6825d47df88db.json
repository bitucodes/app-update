{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar ExternalModule = require(\"./ExternalModule\");\nvar ExternalModuleFactoryPlugin = /*#__PURE__*/function () {\n  function ExternalModuleFactoryPlugin(type, externals) {\n    _classCallCheck(this, ExternalModuleFactoryPlugin);\n    this.type = type;\n    this.externals = externals;\n  }\n  _createClass(ExternalModuleFactoryPlugin, [{\n    key: \"apply\",\n    value: function apply(normalModuleFactory) {\n      var _this = this;\n      var globalType = this.type;\n      normalModuleFactory.hooks.factory.tap(\"ExternalModuleFactoryPlugin\", function (factory) {\n        return function (data, callback) {\n          var context = data.context;\n          var dependency = data.dependencies[0];\n          var handleExternal = function handleExternal(value, type, callback) {\n            if (typeof type === \"function\") {\n              callback = type;\n              type = undefined;\n            }\n            if (value === false) return factory(data, callback);\n            if (value === true) value = dependency.request;\n            if (type === undefined && /^[a-z0-9]+ /.test(value)) {\n              var idx = value.indexOf(\" \");\n              type = value.substr(0, idx);\n              value = value.substr(idx + 1);\n            }\n            callback(null, new ExternalModule(value, type || globalType, dependency.request));\n            return true;\n          };\n          var handleExternals = function handleExternals(externals, callback) {\n            if (typeof externals === \"string\") {\n              if (externals === dependency.request) {\n                return handleExternal(dependency.request, callback);\n              }\n            } else if (Array.isArray(externals)) {\n              var i = 0;\n              var next = function next() {\n                var asyncFlag;\n                var handleExternalsAndCallback = function handleExternalsAndCallback(err, module) {\n                  if (err) return callback(err);\n                  if (!module) {\n                    if (asyncFlag) {\n                      asyncFlag = false;\n                      return;\n                    }\n                    return next();\n                  }\n                  callback(null, module);\n                };\n                do {\n                  asyncFlag = true;\n                  if (i >= externals.length) return callback();\n                  handleExternals(externals[i++], handleExternalsAndCallback);\n                } while (!asyncFlag);\n                asyncFlag = false;\n              };\n              next();\n              return;\n            } else if (externals instanceof RegExp) {\n              if (externals.test(dependency.request)) {\n                return handleExternal(dependency.request, callback);\n              }\n            } else if (typeof externals === \"function\") {\n              externals.call(null, context, dependency.request, function (err, value, type) {\n                if (err) return callback(err);\n                if (value !== undefined) {\n                  handleExternal(value, type, callback);\n                } else {\n                  callback();\n                }\n              });\n              return;\n            } else if (typeof externals === \"object\" && Object.prototype.hasOwnProperty.call(externals, dependency.request)) {\n              return handleExternal(externals[dependency.request], callback);\n            }\n            callback();\n          };\n          handleExternals(_this.externals, function (err, module) {\n            if (err) return callback(err);\n            if (!module) return handleExternal(false, callback);\n            return callback(null, module);\n          });\n        };\n      });\n    }\n  }]);\n  return ExternalModuleFactoryPlugin;\n}();\nmodule.exports = ExternalModuleFactoryPlugin;","map":null,"metadata":{},"sourceType":"script"}