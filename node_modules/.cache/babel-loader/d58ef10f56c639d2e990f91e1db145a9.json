{"ast":null,"code":"var emptyCharacter = '';\nvar Breaks = require('../options/format').Breaks;\nvar Spaces = require('../options/format').Spaces;\nvar Marker = require('../tokenizer/marker');\nvar Token = require('../tokenizer/token');\nfunction supportsAfterClosingBrace(token) {\n  return token[1][1] == 'background' || token[1][1] == 'transform' || token[1][1] == 'src';\n}\nfunction afterClosingBrace(token, valueIndex) {\n  return token[valueIndex][1][token[valueIndex][1].length - 1] == Marker.CLOSE_ROUND_BRACKET;\n}\nfunction afterComma(token, valueIndex) {\n  return token[valueIndex][1] == Marker.COMMA;\n}\nfunction afterSlash(token, valueIndex) {\n  return token[valueIndex][1] == Marker.FORWARD_SLASH;\n}\nfunction beforeComma(token, valueIndex) {\n  return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker.COMMA;\n}\nfunction beforeSlash(token, valueIndex) {\n  return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker.FORWARD_SLASH;\n}\nfunction inFilter(token) {\n  return token[1][1] == 'filter' || token[1][1] == '-ms-filter';\n}\nfunction disallowsSpace(context, token, valueIndex) {\n  return !context.spaceAfterClosingBrace && supportsAfterClosingBrace(token) && afterClosingBrace(token, valueIndex) || beforeSlash(token, valueIndex) || afterSlash(token, valueIndex) || beforeComma(token, valueIndex) || afterComma(token, valueIndex);\n}\nfunction rules(context, tokens) {\n  var store = context.store;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    store(context, tokens[i]);\n    if (i < l - 1) {\n      store(context, comma(context));\n    }\n  }\n}\nfunction body(context, tokens) {\n  var lastPropertyAt = lastPropertyIndex(tokens);\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    property(context, tokens, i, lastPropertyAt);\n  }\n}\nfunction lastPropertyIndex(tokens) {\n  var index = tokens.length - 1;\n  for (; index >= 0; index--) {\n    if (tokens[index][0] != Token.COMMENT) {\n      break;\n    }\n  }\n  return index;\n}\nfunction property(context, tokens, position, lastPropertyAt) {\n  var store = context.store;\n  var token = tokens[position];\n  var propertyValue = token[2];\n  var isPropertyBlock = propertyValue && propertyValue[0] === Token.PROPERTY_BLOCK;\n  var needsSemicolon;\n  if (context.format) {\n    if (context.format.semicolonAfterLastProperty || isPropertyBlock) {\n      needsSemicolon = true;\n    } else if (position < lastPropertyAt) {\n      needsSemicolon = true;\n    } else {\n      needsSemicolon = false;\n    }\n  } else {\n    needsSemicolon = position < lastPropertyAt || isPropertyBlock;\n  }\n  var isLast = position === lastPropertyAt;\n  switch (token[0]) {\n    case Token.AT_RULE:\n      store(context, token);\n      store(context, semicolon(context, Breaks.AfterProperty, false));\n      break;\n    case Token.AT_RULE_BLOCK:\n      rules(context, token[1]);\n      store(context, openBrace(context, Breaks.AfterRuleBegins, true));\n      body(context, token[2]);\n      store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));\n      break;\n    case Token.COMMENT:\n      store(context, token);\n      break;\n    case Token.PROPERTY:\n      store(context, token[1]);\n      store(context, colon(context));\n      if (propertyValue) {\n        value(context, token);\n      }\n      store(context, needsSemicolon ? semicolon(context, Breaks.AfterProperty, isLast) : emptyCharacter);\n      break;\n    case Token.RAW:\n      store(context, token);\n  }\n}\nfunction value(context, token) {\n  var store = context.store;\n  var j, m;\n  if (token[2][0] == Token.PROPERTY_BLOCK) {\n    store(context, openBrace(context, Breaks.AfterBlockBegins, false));\n    body(context, token[2][1]);\n    store(context, closeBrace(context, Breaks.AfterBlockEnds, false, true));\n  } else {\n    for (j = 2, m = token.length; j < m; j++) {\n      store(context, token[j]);\n      if (j < m - 1 && (inFilter(token) || !disallowsSpace(context, token, j))) {\n        store(context, Marker.SPACE);\n      }\n    }\n  }\n}\nfunction allowsBreak(context, where) {\n  return context.format && context.format.breaks[where];\n}\nfunction allowsSpace(context, where) {\n  return context.format && context.format.spaces[where];\n}\nfunction openBrace(context, where, needsPrefixSpace) {\n  if (context.format) {\n    context.indentBy += context.format.indentBy;\n    context.indentWith = context.format.indentWith.repeat(context.indentBy);\n    return (needsPrefixSpace && allowsSpace(context, Spaces.BeforeBlockBegins) ? Marker.SPACE : emptyCharacter) + Marker.OPEN_CURLY_BRACKET + (allowsBreak(context, where) ? context.format.breakWith : emptyCharacter) + context.indentWith;\n  } else {\n    return Marker.OPEN_CURLY_BRACKET;\n  }\n}\nfunction closeBrace(context, where, beforeBlockEnd, isLast) {\n  if (context.format) {\n    context.indentBy -= context.format.indentBy;\n    context.indentWith = context.format.indentWith.repeat(context.indentBy);\n    return (allowsBreak(context, Breaks.AfterProperty) || beforeBlockEnd && allowsBreak(context, Breaks.BeforeBlockEnds) ? context.format.breakWith : emptyCharacter) + context.indentWith + Marker.CLOSE_CURLY_BRACKET + (isLast ? emptyCharacter : (allowsBreak(context, where) ? context.format.breakWith : emptyCharacter) + context.indentWith);\n  } else {\n    return Marker.CLOSE_CURLY_BRACKET;\n  }\n}\nfunction colon(context) {\n  return context.format ? Marker.COLON + (allowsSpace(context, Spaces.BeforeValue) ? Marker.SPACE : emptyCharacter) : Marker.COLON;\n}\nfunction semicolon(context, where, isLast) {\n  return context.format ? Marker.SEMICOLON + (isLast || !allowsBreak(context, where) ? emptyCharacter : context.format.breakWith + context.indentWith) : Marker.SEMICOLON;\n}\nfunction comma(context) {\n  return context.format ? Marker.COMMA + (allowsBreak(context, Breaks.BetweenSelectors) ? context.format.breakWith : emptyCharacter) + context.indentWith : Marker.COMMA;\n}\nfunction all(context, tokens) {\n  var store = context.store;\n  var token;\n  var isLast;\n  var i, l;\n  for (i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    isLast = i == l - 1;\n    switch (token[0]) {\n      case Token.AT_RULE:\n        store(context, token);\n        store(context, semicolon(context, Breaks.AfterAtRule, isLast));\n        break;\n      case Token.AT_RULE_BLOCK:\n        rules(context, token[1]);\n        store(context, openBrace(context, Breaks.AfterRuleBegins, true));\n        body(context, token[2]);\n        store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));\n        break;\n      case Token.NESTED_BLOCK:\n        rules(context, token[1]);\n        store(context, openBrace(context, Breaks.AfterBlockBegins, true));\n        all(context, token[2]);\n        store(context, closeBrace(context, Breaks.AfterBlockEnds, true, isLast));\n        break;\n      case Token.COMMENT:\n        store(context, token);\n        store(context, allowsBreak(context, Breaks.AfterComment) ? context.format.breakWith : emptyCharacter);\n        break;\n      case Token.RAW:\n        store(context, token);\n        break;\n      case Token.RULE:\n        rules(context, token[1]);\n        store(context, openBrace(context, Breaks.AfterRuleBegins, true));\n        body(context, token[2]);\n        store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));\n        break;\n    }\n  }\n}\nmodule.exports = {\n  all: all,\n  body: body,\n  property: property,\n  rules: rules,\n  value: value\n};","map":null,"metadata":{},"sourceType":"script"}