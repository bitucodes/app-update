{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D|M|S)-' + UID + '-(\\\\d+)__@\"', 'g');\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar IS_ARROW_FUNCTION = /.*?=>.*?/;\nvar UNSAFE_CHARS_REGEXP = /[<>\\/\\u2028\\u2029]/g;\nvar RESERVED_SYMBOLS = ['*', 'async'];\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n  '<': \"\\\\u003C\",\n  '>': \"\\\\u003E\",\n  '/': \"\\\\u002F\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nfunction escapeUnsafeChars(unsafeChar) {\n  return ESCAPED_CHARS[unsafeChar];\n}\nmodule.exports = function serialize(obj, options) {\n  options || (options = {});\n\n  // Backwards-compatibility for `space` as the second argument.\n  if (typeof options === 'number' || typeof options === 'string') {\n    options = {\n      space: options\n    };\n  }\n  var functions = [];\n  var regexps = [];\n  var dates = [];\n  var maps = [];\n  var sets = [];\n\n  // Returns placeholders for functions and regexps (identified by index)\n  // which are later replaced by their string representation.\n  function replacer(key, value) {\n    if (!value) {\n      return value;\n    }\n\n    // If the value is an object w/ a toJSON method, toJSON is called before\n    // the replacer runs, so we use this[key] to get the non-toJSONed value.\n    var origValue = this[key];\n    var type = typeof origValue;\n    if (type === 'object') {\n      if (origValue instanceof RegExp) {\n        return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n      }\n      if (origValue instanceof Date) {\n        return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n      }\n      if (origValue instanceof Map) {\n        return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';\n      }\n      if (origValue instanceof Set) {\n        return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';\n      }\n    }\n    if (type === 'function') {\n      return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n    }\n    return value;\n  }\n  function serializeFunc(fn) {\n    var serializedFn = fn.toString();\n    if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n      throw new TypeError('Serializing native function: ' + fn.name);\n    }\n\n    // pure functions, example: {key: function() {}}\n    if (IS_PURE_FUNCTION.test(serializedFn)) {\n      return serializedFn;\n    }\n\n    // arrow functions, example: arg1 => arg1+5\n    if (IS_ARROW_FUNCTION.test(serializedFn)) {\n      return serializedFn;\n    }\n    var argsStartsAt = serializedFn.indexOf('(');\n    var def = serializedFn.substr(0, argsStartsAt).trim().split(' ').filter(function (val) {\n      return val.length > 0;\n    });\n    var nonReservedSymbols = def.filter(function (val) {\n      return RESERVED_SYMBOLS.indexOf(val) === -1;\n    });\n\n    // enhanced literal objects, example: {key() {}}\n    if (nonReservedSymbols.length > 0) {\n      return (def.indexOf('async') > -1 ? 'async ' : '') + 'function' + (def.join('').indexOf('*') > -1 ? '*' : '') + serializedFn.substr(argsStartsAt);\n    }\n\n    // arrow functions\n    return serializedFn;\n  }\n  var str;\n\n  // Creates a JSON string representation of the value.\n  // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n  if (options.isJSON && !options.space) {\n    str = JSON.stringify(obj);\n  } else {\n    str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n  }\n\n  // Protects against `JSON.stringify()` returning `undefined`, by serializing\n  // to the literal string: \"undefined\".\n  if (typeof str !== 'string') {\n    return String(str);\n  }\n\n  // Replace unsafe HTML and invalid JavaScript line terminator chars with\n  // their safe Unicode char counterpart. This _must_ happen before the\n  // regexps and functions are serialized and added back to the string.\n  if (options.unsafe !== true) {\n    str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n  }\n  if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0) {\n    return str;\n  }\n\n  // Replaces all occurrences of function, regexp, date, map and set placeholders in the\n  // JSON string with their string representations. If the original value can\n  // not be found, then `undefined` is used.\n  return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n    if (type === 'D') {\n      return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n    }\n    if (type === 'R') {\n      return regexps[valueIndex].toString();\n    }\n    if (type === 'M') {\n      return \"new Map(\" + serialize(Array.from(maps[valueIndex].entries()), options) + \")\";\n    }\n    if (type === 'S') {\n      return \"new Set(\" + serialize(Array.from(sets[valueIndex].values()), options) + \")\";\n    }\n    var fn = functions[valueIndex];\n    return serializeFunc(fn);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}