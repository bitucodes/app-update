{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\nvar entities_json_1 = __importDefault(require(\"entities/lib/maps/entities.json\"));\nvar legacy_json_1 = __importDefault(require(\"entities/lib/maps/legacy.json\"));\nvar xml_json_1 = __importDefault(require(\"entities/lib/maps/xml.json\"));\nfunction whitespace(c) {\n  return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\nfunction isASCIIAlpha(c) {\n  return c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\";\n}\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n  var lower = upper.toLowerCase();\n  if (upper === lower) {\n    return function (t, c) {\n      if (c === lower) {\n        t._state = SUCCESS;\n      } else {\n        t._state = FAILURE;\n        t._index--;\n      }\n    };\n  }\n  return function (t, c) {\n    if (c === lower || c === upper) {\n      t._state = SUCCESS;\n    } else {\n      t._state = FAILURE;\n      t._index--;\n    }\n  };\n}\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n  var lower = upper.toLowerCase();\n  return function (t, c) {\n    if (c === lower || c === upper) {\n      t._state = NEXT_STATE;\n    } else {\n      t._state = 3 /* InTagName */;\n      t._index--; // Consume the token again\n    }\n  };\n}\n\nvar stateBeforeCdata1 = ifElseState(\"C\", 24 /* BeforeCdata2 */, 16 /* InDeclaration */);\nvar stateBeforeCdata2 = ifElseState(\"D\", 25 /* BeforeCdata3 */, 16 /* InDeclaration */);\nvar stateBeforeCdata3 = ifElseState(\"A\", 26 /* BeforeCdata4 */, 16 /* InDeclaration */);\nvar stateBeforeCdata4 = ifElseState(\"T\", 27 /* BeforeCdata5 */, 16 /* InDeclaration */);\nvar stateBeforeCdata5 = ifElseState(\"A\", 28 /* BeforeCdata6 */, 16 /* InDeclaration */);\nvar stateBeforeScript1 = consumeSpecialNameChar(\"R\", 35 /* BeforeScript2 */);\nvar stateBeforeScript2 = consumeSpecialNameChar(\"I\", 36 /* BeforeScript3 */);\nvar stateBeforeScript3 = consumeSpecialNameChar(\"P\", 37 /* BeforeScript4 */);\nvar stateBeforeScript4 = consumeSpecialNameChar(\"T\", 38 /* BeforeScript5 */);\nvar stateAfterScript1 = ifElseState(\"R\", 40 /* AfterScript2 */, 1 /* Text */);\nvar stateAfterScript2 = ifElseState(\"I\", 41 /* AfterScript3 */, 1 /* Text */);\nvar stateAfterScript3 = ifElseState(\"P\", 42 /* AfterScript4 */, 1 /* Text */);\nvar stateAfterScript4 = ifElseState(\"T\", 43 /* AfterScript5 */, 1 /* Text */);\nvar stateBeforeStyle1 = consumeSpecialNameChar(\"Y\", 45 /* BeforeStyle2 */);\nvar stateBeforeStyle2 = consumeSpecialNameChar(\"L\", 46 /* BeforeStyle3 */);\nvar stateBeforeStyle3 = consumeSpecialNameChar(\"E\", 47 /* BeforeStyle4 */);\nvar stateAfterStyle1 = ifElseState(\"Y\", 49 /* AfterStyle2 */, 1 /* Text */);\nvar stateAfterStyle2 = ifElseState(\"L\", 50 /* AfterStyle3 */, 1 /* Text */);\nvar stateAfterStyle3 = ifElseState(\"E\", 51 /* AfterStyle4 */, 1 /* Text */);\nvar stateBeforeSpecialT = consumeSpecialNameChar(\"I\", 54 /* BeforeTitle1 */);\nvar stateBeforeTitle1 = consumeSpecialNameChar(\"T\", 55 /* BeforeTitle2 */);\nvar stateBeforeTitle2 = consumeSpecialNameChar(\"L\", 56 /* BeforeTitle3 */);\nvar stateBeforeTitle3 = consumeSpecialNameChar(\"E\", 57 /* BeforeTitle4 */);\nvar stateAfterSpecialTEnd = ifElseState(\"I\", 58 /* AfterTitle1 */, 1 /* Text */);\nvar stateAfterTitle1 = ifElseState(\"T\", 59 /* AfterTitle2 */, 1 /* Text */);\nvar stateAfterTitle2 = ifElseState(\"L\", 60 /* AfterTitle3 */, 1 /* Text */);\nvar stateAfterTitle3 = ifElseState(\"E\", 61 /* AfterTitle4 */, 1 /* Text */);\nvar stateBeforeEntity = ifElseState(\"#\", 63 /* BeforeNumericEntity */, 64 /* InNamedEntity */);\nvar stateBeforeNumericEntity = ifElseState(\"X\", 66 /* InHexEntity */, 65 /* InNumericEntity */);\nvar Tokenizer = /** @class */function () {\n  function Tokenizer(options, cbs) {\n    var _a;\n    /** The current state the tokenizer is in. */\n    this._state = 1 /* Text */;\n    /** The read buffer. */\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n    this._index = 0;\n    /**\n     * Data that has already been processed will be removed from the buffer occasionally.\n     * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n     */\n    this.bufferOffset = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n    this.baseState = 1 /* Text */;\n    /** For special parsing behavior inside of script and style tags. */\n    this.special = 1 /* None */;\n    /** Indicates whether the tokenizer has been paused. */\n    this.running = true;\n    /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n    this.ended = false;\n    this.cbs = cbs;\n    this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);\n    this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;\n  }\n  Tokenizer.prototype.reset = function () {\n    this._state = 1 /* Text */;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this._index = 0;\n    this.bufferOffset = 0;\n    this.baseState = 1 /* Text */;\n    this.special = 1 /* None */;\n    this.running = true;\n    this.ended = false;\n  };\n  Tokenizer.prototype.write = function (chunk) {\n    if (this.ended) this.cbs.onerror(Error(\".write() after done!\"));\n    this.buffer += chunk;\n    this.parse();\n  };\n  Tokenizer.prototype.end = function (chunk) {\n    if (this.ended) this.cbs.onerror(Error(\".end() after done!\"));\n    if (chunk) this.write(chunk);\n    this.ended = true;\n    if (this.running) this.finish();\n  };\n  Tokenizer.prototype.pause = function () {\n    this.running = false;\n  };\n  Tokenizer.prototype.resume = function () {\n    this.running = true;\n    if (this._index < this.buffer.length) {\n      this.parse();\n    }\n    if (this.ended) {\n      this.finish();\n    }\n  };\n  /**\n   * The current index within all of the written data.\n   */\n  Tokenizer.prototype.getAbsoluteIndex = function () {\n    return this.bufferOffset + this._index;\n  };\n  Tokenizer.prototype.stateText = function (c) {\n    if (c === \"<\") {\n      if (this._index > this.sectionStart) {\n        this.cbs.ontext(this.getSection());\n      }\n      this._state = 2 /* BeforeTagName */;\n      this.sectionStart = this._index;\n    } else if (this.decodeEntities && c === \"&\" && (this.special === 1 /* None */ || this.special === 4 /* Title */)) {\n      if (this._index > this.sectionStart) {\n        this.cbs.ontext(this.getSection());\n      }\n      this.baseState = 1 /* Text */;\n      this._state = 62 /* BeforeEntity */;\n      this.sectionStart = this._index;\n    }\n  };\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n  Tokenizer.prototype.isTagStartChar = function (c) {\n    return isASCIIAlpha(c) || this.xmlMode && !whitespace(c) && c !== \"/\" && c !== \">\";\n  };\n  Tokenizer.prototype.stateBeforeTagName = function (c) {\n    if (c === \"/\") {\n      this._state = 5 /* BeforeClosingTagName */;\n    } else if (c === \"<\") {\n      this.cbs.ontext(this.getSection());\n      this.sectionStart = this._index;\n    } else if (c === \">\" || this.special !== 1 /* None */ || whitespace(c)) {\n      this._state = 1 /* Text */;\n    } else if (c === \"!\") {\n      this._state = 15 /* BeforeDeclaration */;\n      this.sectionStart = this._index + 1;\n    } else if (c === \"?\") {\n      this._state = 17 /* InProcessingInstruction */;\n      this.sectionStart = this._index + 1;\n    } else if (!this.isTagStartChar(c)) {\n      this._state = 1 /* Text */;\n    } else {\n      this._state = !this.xmlMode && (c === \"s\" || c === \"S\") ? 32 /* BeforeSpecialS */ : !this.xmlMode && (c === \"t\" || c === \"T\") ? 52 /* BeforeSpecialT */ : 3 /* InTagName */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateInTagName = function (c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n      this.emitToken(\"onopentagname\");\n      this._state = 8 /* BeforeAttributeName */;\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n    if (whitespace(c)) {\n      // Ignore\n    } else if (c === \">\") {\n      this._state = 1 /* Text */;\n    } else if (this.special !== 1 /* None */) {\n      if (this.special !== 4 /* Title */ && (c === \"s\" || c === \"S\")) {\n        this._state = 33 /* BeforeSpecialSEnd */;\n      } else if (this.special === 4 /* Title */ && (c === \"t\" || c === \"T\")) {\n        this._state = 53 /* BeforeSpecialTEnd */;\n      } else {\n        this._state = 1 /* Text */;\n        this._index--;\n      }\n    } else if (!this.isTagStartChar(c)) {\n      this._state = 20 /* InSpecialComment */;\n      this.sectionStart = this._index;\n    } else {\n      this._state = 6 /* InClosingTagName */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateInClosingTagName = function (c) {\n    if (c === \">\" || whitespace(c)) {\n      this.emitToken(\"onclosetag\");\n      this._state = 7 /* AfterClosingTagName */;\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n    // Skip everything until \">\"\n    if (c === \">\") {\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n    if (c === \">\") {\n      this.cbs.onopentagend();\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    } else if (c === \"/\") {\n      this._state = 4 /* InSelfClosingTag */;\n    } else if (!whitespace(c)) {\n      this._state = 9 /* InAttributeName */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n    if (c === \">\") {\n      this.cbs.onselfclosingtag();\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n      this.special = 1 /* None */; // Reset special state, in case of self-closing special tags\n    } else if (!whitespace(c)) {\n      this._state = 8 /* BeforeAttributeName */;\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.stateInAttributeName = function (c) {\n    if (c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)) {\n      this.cbs.onattribname(this.getSection());\n      this.sectionStart = -1;\n      this._state = 10 /* AfterAttributeName */;\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.stateAfterAttributeName = function (c) {\n    if (c === \"=\") {\n      this._state = 11 /* BeforeAttributeValue */;\n    } else if (c === \"/\" || c === \">\") {\n      this.cbs.onattribend(undefined);\n      this._state = 8 /* BeforeAttributeName */;\n      this._index--;\n    } else if (!whitespace(c)) {\n      this.cbs.onattribend(undefined);\n      this._state = 9 /* InAttributeName */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n    if (c === '\"') {\n      this._state = 12 /* InAttributeValueDq */;\n      this.sectionStart = this._index + 1;\n    } else if (c === \"'\") {\n      this._state = 13 /* InAttributeValueSq */;\n      this.sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n      this._state = 14 /* InAttributeValueNq */;\n      this.sectionStart = this._index;\n      this._index--; // Reconsume token\n    }\n  };\n\n  Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n    if (c === quote) {\n      this.emitToken(\"onattribdata\");\n      this.cbs.onattribend(quote);\n      this._state = 8 /* BeforeAttributeName */;\n    } else if (this.decodeEntities && c === \"&\") {\n      this.emitToken(\"onattribdata\");\n      this.baseState = this._state;\n      this._state = 62 /* BeforeEntity */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n    this.handleInAttributeValue(c, '\"');\n  };\n  Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n    this.handleInAttributeValue(c, \"'\");\n  };\n  Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n    if (whitespace(c) || c === \">\") {\n      this.emitToken(\"onattribdata\");\n      this.cbs.onattribend(null);\n      this._state = 8 /* BeforeAttributeName */;\n      this._index--;\n    } else if (this.decodeEntities && c === \"&\") {\n      this.emitToken(\"onattribdata\");\n      this.baseState = this._state;\n      this._state = 62 /* BeforeEntity */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n    this._state = c === \"[\" ? 23 /* BeforeCdata1 */ : c === \"-\" ? 18 /* BeforeComment */ : 16 /* InDeclaration */;\n  };\n\n  Tokenizer.prototype.stateInDeclaration = function (c) {\n    if (c === \">\") {\n      this.cbs.ondeclaration(this.getSection());\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n    if (c === \">\") {\n      this.cbs.onprocessinginstruction(this.getSection());\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateBeforeComment = function (c) {\n    if (c === \"-\") {\n      this._state = 19 /* InComment */;\n      this.sectionStart = this._index + 1;\n    } else {\n      this._state = 16 /* InDeclaration */;\n    }\n  };\n\n  Tokenizer.prototype.stateInComment = function (c) {\n    if (c === \"-\") this._state = 21 /* AfterComment1 */;\n  };\n\n  Tokenizer.prototype.stateInSpecialComment = function (c) {\n    if (c === \">\") {\n      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateAfterComment1 = function (c) {\n    if (c === \"-\") {\n      this._state = 22 /* AfterComment2 */;\n    } else {\n      this._state = 19 /* InComment */;\n    }\n  };\n\n  Tokenizer.prototype.stateAfterComment2 = function (c) {\n    if (c === \">\") {\n      // Remove 2 trailing chars\n      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    } else if (c !== \"-\") {\n      this._state = 19 /* InComment */;\n    }\n    // Else: stay in AFTER_COMMENT_2 (`--->`)\n  };\n\n  Tokenizer.prototype.stateBeforeCdata6 = function (c) {\n    if (c === \"[\") {\n      this._state = 29 /* InCdata */;\n      this.sectionStart = this._index + 1;\n    } else {\n      this._state = 16 /* InDeclaration */;\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.stateInCdata = function (c) {\n    if (c === \"]\") this._state = 30 /* AfterCdata1 */;\n  };\n\n  Tokenizer.prototype.stateAfterCdata1 = function (c) {\n    if (c === \"]\") this._state = 31 /* AfterCdata2 */;else this._state = 29 /* InCdata */;\n  };\n\n  Tokenizer.prototype.stateAfterCdata2 = function (c) {\n    if (c === \">\") {\n      // Remove 2 trailing chars\n      this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    } else if (c !== \"]\") {\n      this._state = 29 /* InCdata */;\n    }\n    // Else: stay in AFTER_CDATA_2 (`]]]>`)\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n    if (c === \"c\" || c === \"C\") {\n      this._state = 34 /* BeforeScript1 */;\n    } else if (c === \"t\" || c === \"T\") {\n      this._state = 44 /* BeforeStyle1 */;\n    } else {\n      this._state = 3 /* InTagName */;\n      this._index--; // Consume the token again\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {\n    if (this.special === 2 /* Script */ && (c === \"c\" || c === \"C\")) {\n      this._state = 39 /* AfterScript1 */;\n    } else if (this.special === 3 /* Style */ && (c === \"t\" || c === \"T\")) {\n      this._state = 48 /* AfterStyle1 */;\n    } else this._state = 1 /* Text */;\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n      this.special = special;\n    }\n    this._state = 3 /* InTagName */;\n    this._index--; // Consume the token again\n  };\n\n  Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {\n    if (c === \">\" || whitespace(c)) {\n      this.special = 1 /* None */;\n      this._state = 6 /* InClosingTagName */;\n      this.sectionStart = this._index - sectionStartOffset;\n      this._index--; // Reconsume the token\n    } else this._state = 1 /* Text */;\n  };\n  // For entities terminated with a semicolon\n  Tokenizer.prototype.parseFixedEntity = function (map) {\n    if (map === void 0) {\n      map = this.xmlMode ? xml_json_1.default : entities_json_1.default;\n    }\n    // Offset = 1\n    if (this.sectionStart + 1 < this._index) {\n      var entity = this.buffer.substring(this.sectionStart + 1, this._index);\n      if (Object.prototype.hasOwnProperty.call(map, entity)) {\n        this.emitPartial(map[entity]);\n        this.sectionStart = this._index + 1;\n      }\n    }\n  };\n  // Parses legacy entities (without trailing semicolon)\n  Tokenizer.prototype.parseLegacyEntity = function () {\n    var start = this.sectionStart + 1;\n    // The max length of legacy entities is 6\n    var limit = Math.min(this._index - start, 6);\n    while (limit >= 2) {\n      // The min length of legacy entities is 2\n      var entity = this.buffer.substr(start, limit);\n      if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {\n        this.emitPartial(legacy_json_1.default[entity]);\n        this.sectionStart += limit + 1;\n        return;\n      }\n      limit--;\n    }\n  };\n  Tokenizer.prototype.stateInNamedEntity = function (c) {\n    if (c === \";\") {\n      this.parseFixedEntity();\n      // Retry as legacy entity if entity wasn't parsed\n      if (this.baseState === 1 /* Text */ && this.sectionStart + 1 < this._index && !this.xmlMode) {\n        this.parseLegacyEntity();\n      }\n      this._state = this.baseState;\n    } else if ((c < \"0\" || c > \"9\") && !isASCIIAlpha(c)) {\n      if (this.xmlMode || this.sectionStart + 1 === this._index) {\n        // Ignore\n      } else if (this.baseState !== 1 /* Text */) {\n        if (c !== \"=\") {\n          // Parse as legacy entity, without allowing additional characters.\n          this.parseFixedEntity(legacy_json_1.default);\n        }\n      } else {\n        this.parseLegacyEntity();\n      }\n      this._state = this.baseState;\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {\n    var sectionStart = this.sectionStart + offset;\n    if (sectionStart !== this._index) {\n      // Parse entity\n      var entity = this.buffer.substring(sectionStart, this._index);\n      var parsed = parseInt(entity, base);\n      this.emitPartial(decode_codepoint_1.default(parsed));\n      this.sectionStart = strict ? this._index + 1 : this._index;\n    }\n    this._state = this.baseState;\n  };\n  Tokenizer.prototype.stateInNumericEntity = function (c) {\n    if (c === \";\") {\n      this.decodeNumericEntity(2, 10, true);\n    } else if (c < \"0\" || c > \"9\") {\n      if (!this.xmlMode) {\n        this.decodeNumericEntity(2, 10, false);\n      } else {\n        this._state = this.baseState;\n      }\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.stateInHexEntity = function (c) {\n    if (c === \";\") {\n      this.decodeNumericEntity(3, 16, true);\n    } else if ((c < \"a\" || c > \"f\") && (c < \"A\" || c > \"F\") && (c < \"0\" || c > \"9\")) {\n      if (!this.xmlMode) {\n        this.decodeNumericEntity(3, 16, false);\n      } else {\n        this._state = this.baseState;\n      }\n      this._index--;\n    }\n  };\n  Tokenizer.prototype.cleanup = function () {\n    if (this.sectionStart < 0) {\n      this.buffer = \"\";\n      this.bufferOffset += this._index;\n      this._index = 0;\n    } else if (this.running) {\n      if (this._state === 1 /* Text */) {\n        if (this.sectionStart !== this._index) {\n          this.cbs.ontext(this.buffer.substr(this.sectionStart));\n        }\n        this.buffer = \"\";\n        this.bufferOffset += this._index;\n        this._index = 0;\n      } else if (this.sectionStart === this._index) {\n        // The section just started\n        this.buffer = \"\";\n        this.bufferOffset += this._index;\n        this._index = 0;\n      } else {\n        // Remove everything unnecessary\n        this.buffer = this.buffer.substr(this.sectionStart);\n        this._index -= this.sectionStart;\n        this.bufferOffset += this.sectionStart;\n      }\n      this.sectionStart = 0;\n    }\n  };\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  Tokenizer.prototype.parse = function () {\n    while (this._index < this.buffer.length && this.running) {\n      var c = this.buffer.charAt(this._index);\n      if (this._state === 1 /* Text */) {\n        this.stateText(c);\n      } else if (this._state === 12 /* InAttributeValueDq */) {\n        this.stateInAttributeValueDoubleQuotes(c);\n      } else if (this._state === 9 /* InAttributeName */) {\n        this.stateInAttributeName(c);\n      } else if (this._state === 19 /* InComment */) {\n        this.stateInComment(c);\n      } else if (this._state === 20 /* InSpecialComment */) {\n        this.stateInSpecialComment(c);\n      } else if (this._state === 8 /* BeforeAttributeName */) {\n        this.stateBeforeAttributeName(c);\n      } else if (this._state === 3 /* InTagName */) {\n        this.stateInTagName(c);\n      } else if (this._state === 6 /* InClosingTagName */) {\n        this.stateInClosingTagName(c);\n      } else if (this._state === 2 /* BeforeTagName */) {\n        this.stateBeforeTagName(c);\n      } else if (this._state === 10 /* AfterAttributeName */) {\n        this.stateAfterAttributeName(c);\n      } else if (this._state === 13 /* InAttributeValueSq */) {\n        this.stateInAttributeValueSingleQuotes(c);\n      } else if (this._state === 11 /* BeforeAttributeValue */) {\n        this.stateBeforeAttributeValue(c);\n      } else if (this._state === 5 /* BeforeClosingTagName */) {\n        this.stateBeforeClosingTagName(c);\n      } else if (this._state === 7 /* AfterClosingTagName */) {\n        this.stateAfterClosingTagName(c);\n      } else if (this._state === 32 /* BeforeSpecialS */) {\n        this.stateBeforeSpecialS(c);\n      } else if (this._state === 21 /* AfterComment1 */) {\n        this.stateAfterComment1(c);\n      } else if (this._state === 14 /* InAttributeValueNq */) {\n        this.stateInAttributeValueNoQuotes(c);\n      } else if (this._state === 4 /* InSelfClosingTag */) {\n        this.stateInSelfClosingTag(c);\n      } else if (this._state === 16 /* InDeclaration */) {\n        this.stateInDeclaration(c);\n      } else if (this._state === 15 /* BeforeDeclaration */) {\n        this.stateBeforeDeclaration(c);\n      } else if (this._state === 22 /* AfterComment2 */) {\n        this.stateAfterComment2(c);\n      } else if (this._state === 18 /* BeforeComment */) {\n        this.stateBeforeComment(c);\n      } else if (this._state === 33 /* BeforeSpecialSEnd */) {\n        this.stateBeforeSpecialSEnd(c);\n      } else if (this._state === 53 /* BeforeSpecialTEnd */) {\n        stateAfterSpecialTEnd(this, c);\n      } else if (this._state === 39 /* AfterScript1 */) {\n        stateAfterScript1(this, c);\n      } else if (this._state === 40 /* AfterScript2 */) {\n        stateAfterScript2(this, c);\n      } else if (this._state === 41 /* AfterScript3 */) {\n        stateAfterScript3(this, c);\n      } else if (this._state === 34 /* BeforeScript1 */) {\n        stateBeforeScript1(this, c);\n      } else if (this._state === 35 /* BeforeScript2 */) {\n        stateBeforeScript2(this, c);\n      } else if (this._state === 36 /* BeforeScript3 */) {\n        stateBeforeScript3(this, c);\n      } else if (this._state === 37 /* BeforeScript4 */) {\n        stateBeforeScript4(this, c);\n      } else if (this._state === 38 /* BeforeScript5 */) {\n        this.stateBeforeSpecialLast(c, 2 /* Script */);\n      } else if (this._state === 42 /* AfterScript4 */) {\n        stateAfterScript4(this, c);\n      } else if (this._state === 43 /* AfterScript5 */) {\n        this.stateAfterSpecialLast(c, 6);\n      } else if (this._state === 44 /* BeforeStyle1 */) {\n        stateBeforeStyle1(this, c);\n      } else if (this._state === 29 /* InCdata */) {\n        this.stateInCdata(c);\n      } else if (this._state === 45 /* BeforeStyle2 */) {\n        stateBeforeStyle2(this, c);\n      } else if (this._state === 46 /* BeforeStyle3 */) {\n        stateBeforeStyle3(this, c);\n      } else if (this._state === 47 /* BeforeStyle4 */) {\n        this.stateBeforeSpecialLast(c, 3 /* Style */);\n      } else if (this._state === 48 /* AfterStyle1 */) {\n        stateAfterStyle1(this, c);\n      } else if (this._state === 49 /* AfterStyle2 */) {\n        stateAfterStyle2(this, c);\n      } else if (this._state === 50 /* AfterStyle3 */) {\n        stateAfterStyle3(this, c);\n      } else if (this._state === 51 /* AfterStyle4 */) {\n        this.stateAfterSpecialLast(c, 5);\n      } else if (this._state === 52 /* BeforeSpecialT */) {\n        stateBeforeSpecialT(this, c);\n      } else if (this._state === 54 /* BeforeTitle1 */) {\n        stateBeforeTitle1(this, c);\n      } else if (this._state === 55 /* BeforeTitle2 */) {\n        stateBeforeTitle2(this, c);\n      } else if (this._state === 56 /* BeforeTitle3 */) {\n        stateBeforeTitle3(this, c);\n      } else if (this._state === 57 /* BeforeTitle4 */) {\n        this.stateBeforeSpecialLast(c, 4 /* Title */);\n      } else if (this._state === 58 /* AfterTitle1 */) {\n        stateAfterTitle1(this, c);\n      } else if (this._state === 59 /* AfterTitle2 */) {\n        stateAfterTitle2(this, c);\n      } else if (this._state === 60 /* AfterTitle3 */) {\n        stateAfterTitle3(this, c);\n      } else if (this._state === 61 /* AfterTitle4 */) {\n        this.stateAfterSpecialLast(c, 5);\n      } else if (this._state === 17 /* InProcessingInstruction */) {\n        this.stateInProcessingInstruction(c);\n      } else if (this._state === 64 /* InNamedEntity */) {\n        this.stateInNamedEntity(c);\n      } else if (this._state === 23 /* BeforeCdata1 */) {\n        stateBeforeCdata1(this, c);\n      } else if (this._state === 62 /* BeforeEntity */) {\n        stateBeforeEntity(this, c);\n      } else if (this._state === 24 /* BeforeCdata2 */) {\n        stateBeforeCdata2(this, c);\n      } else if (this._state === 25 /* BeforeCdata3 */) {\n        stateBeforeCdata3(this, c);\n      } else if (this._state === 30 /* AfterCdata1 */) {\n        this.stateAfterCdata1(c);\n      } else if (this._state === 31 /* AfterCdata2 */) {\n        this.stateAfterCdata2(c);\n      } else if (this._state === 26 /* BeforeCdata4 */) {\n        stateBeforeCdata4(this, c);\n      } else if (this._state === 27 /* BeforeCdata5 */) {\n        stateBeforeCdata5(this, c);\n      } else if (this._state === 28 /* BeforeCdata6 */) {\n        this.stateBeforeCdata6(c);\n      } else if (this._state === 66 /* InHexEntity */) {\n        this.stateInHexEntity(c);\n      } else if (this._state === 65 /* InNumericEntity */) {\n        this.stateInNumericEntity(c);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      } else if (this._state === 63 /* BeforeNumericEntity */) {\n        stateBeforeNumericEntity(this, c);\n      } else {\n        this.cbs.onerror(Error(\"unknown _state\"), this._state);\n      }\n      this._index++;\n    }\n    this.cleanup();\n  };\n  Tokenizer.prototype.finish = function () {\n    // If there is remaining data, emit it in a reasonable way\n    if (this.sectionStart < this._index) {\n      this.handleTrailingData();\n    }\n    this.cbs.onend();\n  };\n  Tokenizer.prototype.handleTrailingData = function () {\n    var data = this.buffer.substr(this.sectionStart);\n    if (this._state === 29 /* InCdata */ || this._state === 30 /* AfterCdata1 */ || this._state === 31 /* AfterCdata2 */) {\n      this.cbs.oncdata(data);\n    } else if (this._state === 19 /* InComment */ || this._state === 21 /* AfterComment1 */ || this._state === 22 /* AfterComment2 */) {\n      this.cbs.oncomment(data);\n    } else if (this._state === 64 /* InNamedEntity */ && !this.xmlMode) {\n      this.parseLegacyEntity();\n      if (this.sectionStart < this._index) {\n        this._state = this.baseState;\n        this.handleTrailingData();\n      }\n    } else if (this._state === 65 /* InNumericEntity */ && !this.xmlMode) {\n      this.decodeNumericEntity(2, 10, false);\n      if (this.sectionStart < this._index) {\n        this._state = this.baseState;\n        this.handleTrailingData();\n      }\n    } else if (this._state === 66 /* InHexEntity */ && !this.xmlMode) {\n      this.decodeNumericEntity(3, 16, false);\n      if (this.sectionStart < this._index) {\n        this._state = this.baseState;\n        this.handleTrailingData();\n      }\n    } else if (this._state !== 3 /* InTagName */ && this._state !== 8 /* BeforeAttributeName */ && this._state !== 11 /* BeforeAttributeValue */ && this._state !== 10 /* AfterAttributeName */ && this._state !== 9 /* InAttributeName */ && this._state !== 13 /* InAttributeValueSq */ && this._state !== 12 /* InAttributeValueDq */ && this._state !== 14 /* InAttributeValueNq */ && this._state !== 6 /* InClosingTagName */) {\n      this.cbs.ontext(data);\n    }\n    /*\n     * Else, ignore remaining data\n     * TODO add a way to remove current tag\n     */\n  };\n\n  Tokenizer.prototype.getSection = function () {\n    return this.buffer.substring(this.sectionStart, this._index);\n  };\n  Tokenizer.prototype.emitToken = function (name) {\n    this.cbs[name](this.getSection());\n    this.sectionStart = -1;\n  };\n  Tokenizer.prototype.emitPartial = function (value) {\n    if (this.baseState !== 1 /* Text */) {\n      this.cbs.onattribdata(value); // TODO implement the new event\n    } else {\n      this.cbs.ontext(value);\n    }\n  };\n  return Tokenizer;\n}();\nexports.default = Tokenizer;","map":null,"metadata":{},"sourceType":"script"}