{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = [\"\\x85\", \"\\u200B\", \"\\uFFFE\"].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\n// whitespace from: https://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\nvar ws = [\"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\", \"\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\", \"\\u2029\\uFEFF\"].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar $replace = callBound('String.prototype.replace');\nvar $trim = function $trim(value) {\n  return $replace(value, trimRegex, '');\n};\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/13.0/#sec-stringtonumber\n\nmodule.exports = function StringToNumber(argument) {\n  if (Type(argument) !== 'String') {\n    throw new $TypeError('Assertion failed: `argument` is not a String');\n  }\n  if (isBinary(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 2));\n  }\n  if (isOctal(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 8));\n  }\n  if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {\n    return NaN;\n  }\n  var trimmed = $trim(argument);\n  if (trimmed !== argument) {\n    return StringToNumber(trimmed);\n  }\n  return $Number(argument);\n};","map":null,"metadata":{},"sourceType":"script"}