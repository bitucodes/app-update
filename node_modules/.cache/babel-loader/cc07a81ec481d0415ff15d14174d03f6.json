{"ast":null,"code":"// string literal characters cannot contain control codes\nvar CONTROL_CODES = [0,\n// null\n7,\n// bell\n8,\n// backspace\n9,\n// horizontal\n10,\n// line feed\n11,\n// vertical tab\n12,\n// form feed\n13,\n// carriage return\n26,\n// Control-Z\n27,\n// escape\n127 // delete\n]; // escaped sequences can either be a two character hex value, or one of the\n// following single character codes\n\nfunction decodeControlCharacter(char) {\n  switch (char) {\n    case \"t\":\n      return 0x09;\n    case \"n\":\n      return 0x0a;\n    case \"r\":\n      return 0x0d;\n    case '\"':\n      return 0x22;\n    case \"â€²\":\n      return 0x27;\n    case \"\\\\\":\n      return 0x5c;\n  }\n  return -1;\n}\nvar ESCAPE_CHAR = 92; // backslash\n\nvar QUOTE_CHAR = 34; // backslash\n// parse string as per the spec:\n// https://webassembly.github.io/spec/core/multipage/text/values.html#text-string\n\nexport function parseString(value) {\n  var byteArray = [];\n  var index = 0;\n  while (index < value.length) {\n    var charCode = value.charCodeAt(index);\n    if (CONTROL_CODES.indexOf(charCode) !== -1) {\n      throw new Error(\"ASCII control characters are not permitted within string literals\");\n    }\n    if (charCode === QUOTE_CHAR) {\n      throw new Error(\"quotes are not permitted within string literals\");\n    }\n    if (charCode === ESCAPE_CHAR) {\n      var firstChar = value.substr(index + 1, 1);\n      var decodedControlChar = decodeControlCharacter(firstChar);\n      if (decodedControlChar !== -1) {\n        // single character escaped values, e.g. \\r\n        byteArray.push(decodedControlChar);\n        index += 2;\n      } else {\n        // hex escaped values, e.g. \\2a\n        var hexValue = value.substr(index + 1, 2);\n        if (!/^[0-9A-F]{2}$/i.test(hexValue)) {\n          throw new Error(\"invalid character encoding\");\n        }\n        byteArray.push(parseInt(hexValue, 16));\n        index += 3;\n      }\n    } else {\n      // ASCII encoded values\n      byteArray.push(charCode);\n      index++;\n    }\n  }\n  return byteArray;\n}","map":null,"metadata":{},"sourceType":"module"}