{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar Parser = require(\"./Parser\");\nvar Template = require(\"./Template\");\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nvar JavascriptGenerator = require(\"./JavascriptGenerator\");\nvar createHash = require(\"./util/createHash\");\nvar JavascriptModulesPlugin = /*#__PURE__*/function () {\n  function JavascriptModulesPlugin() {\n    _classCallCheck(this, JavascriptModulesPlugin);\n  }\n  _createClass(JavascriptModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"JavascriptModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        normalModuleFactory.hooks.createParser.for(\"javascript/auto\").tap(\"JavascriptModulesPlugin\", function (options) {\n          return new Parser(options, \"auto\");\n        });\n        normalModuleFactory.hooks.createParser.for(\"javascript/dynamic\").tap(\"JavascriptModulesPlugin\", function (options) {\n          return new Parser(options, \"script\");\n        });\n        normalModuleFactory.hooks.createParser.for(\"javascript/esm\").tap(\"JavascriptModulesPlugin\", function (options) {\n          return new Parser(options, \"module\");\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"javascript/auto\").tap(\"JavascriptModulesPlugin\", function () {\n          return new JavascriptGenerator();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"javascript/dynamic\").tap(\"JavascriptModulesPlugin\", function () {\n          return new JavascriptGenerator();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"javascript/esm\").tap(\"JavascriptModulesPlugin\", function () {\n          return new JavascriptGenerator();\n        });\n        compilation.mainTemplate.hooks.renderManifest.tap(\"JavascriptModulesPlugin\", function (result, options) {\n          var chunk = options.chunk;\n          var hash = options.hash;\n          var fullHash = options.fullHash;\n          var outputOptions = options.outputOptions;\n          var moduleTemplates = options.moduleTemplates;\n          var dependencyTemplates = options.dependencyTemplates;\n          var filenameTemplate = chunk.filenameTemplate || outputOptions.filename;\n          var useChunkHash = compilation.mainTemplate.useChunkHash(chunk);\n          result.push({\n            render: function render() {\n              return compilation.mainTemplate.render(hash, chunk, moduleTemplates.javascript, dependencyTemplates);\n            },\n            filenameTemplate: filenameTemplate,\n            pathOptions: {\n              noChunkHash: !useChunkHash,\n              contentHashType: \"javascript\",\n              chunk: chunk\n            },\n            identifier: \"chunk\".concat(chunk.id),\n            hash: useChunkHash ? chunk.hash : fullHash\n          });\n          return result;\n        });\n        compilation.mainTemplate.hooks.modules.tap(\"JavascriptModulesPlugin\", function (source, chunk, hash, moduleTemplate, dependencyTemplates) {\n          return Template.renderChunkModules(chunk, function (m) {\n            return typeof m.source === \"function\";\n          }, moduleTemplate, dependencyTemplates, \"/******/ \");\n        });\n        compilation.chunkTemplate.hooks.renderManifest.tap(\"JavascriptModulesPlugin\", function (result, options) {\n          var chunk = options.chunk;\n          var outputOptions = options.outputOptions;\n          var moduleTemplates = options.moduleTemplates;\n          var dependencyTemplates = options.dependencyTemplates;\n          var filenameTemplate = chunk.filenameTemplate || outputOptions.chunkFilename;\n          result.push({\n            render: function render() {\n              return _this.renderJavascript(compilation.chunkTemplate, chunk, moduleTemplates.javascript, dependencyTemplates);\n            },\n            filenameTemplate: filenameTemplate,\n            pathOptions: {\n              chunk: chunk,\n              contentHashType: \"javascript\"\n            },\n            identifier: \"chunk\".concat(chunk.id),\n            hash: chunk.hash\n          });\n          return result;\n        });\n        compilation.hooks.contentHash.tap(\"JavascriptModulesPlugin\", function (chunk) {\n          var outputOptions = compilation.outputOptions;\n          var hashSalt = outputOptions.hashSalt,\n            hashDigest = outputOptions.hashDigest,\n            hashDigestLength = outputOptions.hashDigestLength,\n            hashFunction = outputOptions.hashFunction;\n          var hash = createHash(hashFunction);\n          if (hashSalt) hash.update(hashSalt);\n          var template = chunk.hasRuntime() ? compilation.mainTemplate : compilation.chunkTemplate;\n          hash.update(\"\".concat(chunk.id, \" \"));\n          hash.update(chunk.ids ? chunk.ids.join(\",\") : \"\");\n          template.updateHashForChunk(hash, chunk, compilation.moduleTemplates.javascript, compilation.dependencyTemplates);\n          var _iterator = _createForOfIteratorHelper(chunk.modulesIterable),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var m = _step.value;\n              if (typeof m.source === \"function\") {\n                hash.update(m.hash);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          chunk.contentHash.javascript = hash.digest(hashDigest).substr(0, hashDigestLength);\n        });\n      });\n    }\n  }, {\n    key: \"renderJavascript\",\n    value: function renderJavascript(chunkTemplate, chunk, moduleTemplate, dependencyTemplates) {\n      var moduleSources = Template.renderChunkModules(chunk, function (m) {\n        return typeof m.source === \"function\";\n      }, moduleTemplate, dependencyTemplates);\n      var core = chunkTemplate.hooks.modules.call(moduleSources, chunk, moduleTemplate, dependencyTemplates);\n      var source = chunkTemplate.hooks.render.call(core, chunk, moduleTemplate, dependencyTemplates);\n      if (chunk.hasEntryModule()) {\n        source = chunkTemplate.hooks.renderWithEntry.call(source, chunk);\n      }\n      chunk.rendered = true;\n      return new ConcatSource(source, \";\");\n    }\n  }]);\n  return JavascriptModulesPlugin;\n}();\nmodule.exports = JavascriptModulesPlugin;","map":null,"metadata":{},"sourceType":"script"}