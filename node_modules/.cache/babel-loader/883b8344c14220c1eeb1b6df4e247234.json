{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Generated by CoffeeScript 2.5.1\nvar MixedDeclarationSet;\nmodule.exports = MixedDeclarationSet = function () {\n  var self;\n  var MixedDeclarationSet = /*#__PURE__*/function () {\n    function MixedDeclarationSet() {\n      _classCallCheck(this, MixedDeclarationSet);\n      this._declarations = {};\n    }\n    _createClass(MixedDeclarationSet, [{\n      key: \"mixWithList\",\n      value: function mixWithList(rules) {\n        var i, len, rule;\n        rules.sort(function (a, b) {\n          return a.selector.priority > b.selector.priority;\n        });\n        for (i = 0, len = rules.length; i < len; i++) {\n          rule = rules[i];\n          this._mixWithRule(rule);\n        }\n        return this;\n      }\n    }, {\n      key: \"_mixWithRule\",\n      value: function _mixWithRule(rule) {\n        var dec, prop, ref;\n        ref = rule.styles._declarations;\n        for (prop in ref) {\n          dec = ref[prop];\n          this._mixWithDeclaration(dec);\n        }\n      }\n    }, {\n      key: \"_mixWithDeclaration\",\n      value: function _mixWithDeclaration(dec) {\n        var cur;\n        cur = this._declarations[dec.prop];\n        if (cur != null && cur.important && !dec.important) {\n          return;\n        }\n        this._declarations[dec.prop] = dec;\n      }\n    }, {\n      key: \"get\",\n      value: function get(prop) {\n        if (prop == null) {\n          return this._declarations;\n        }\n        if (this._declarations[prop] == null) {\n          return null;\n        }\n        return this._declarations[prop].val;\n      }\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var dec, obj, prop, ref;\n        obj = {};\n        ref = this._declarations;\n        for (prop in ref) {\n          dec = ref[prop];\n          obj[prop] = dec.val;\n        }\n        return obj;\n      }\n    }], [{\n      key: \"mix\",\n      value: function mix() {\n        var i, len, mixed, rules;\n        mixed = new self();\n        for (var _len = arguments.length, ruleSets = new Array(_len), _key = 0; _key < _len; _key++) {\n          ruleSets[_key] = arguments[_key];\n        }\n        for (i = 0, len = ruleSets.length; i < len; i++) {\n          rules = ruleSets[i];\n          mixed.mixWithList(rules);\n        }\n        return mixed;\n      }\n    }]);\n    return MixedDeclarationSet;\n  }();\n  ;\n  self = MixedDeclarationSet;\n  return MixedDeclarationSet;\n}.call(void 0);","map":null,"metadata":{},"sourceType":"script"}