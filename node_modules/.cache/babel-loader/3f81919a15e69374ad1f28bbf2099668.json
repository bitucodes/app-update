{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar util = require(\"util\");\nvar TOMBSTONE = {};\nvar UNDEFINED_MARKER = {};\nvar StackedSetMap = /*#__PURE__*/function () {\n  function StackedSetMap(parentStack) {\n    _classCallCheck(this, StackedSetMap);\n    this.stack = parentStack === undefined ? [] : parentStack.slice();\n    this.map = new Map();\n    this.stack.push(this.map);\n  }\n  _createClass(StackedSetMap, [{\n    key: \"add\",\n    value: function add(item) {\n      this.map.set(item, true);\n    }\n  }, {\n    key: \"set\",\n    value: function set(item, value) {\n      this.map.set(item, value === undefined ? UNDEFINED_MARKER : value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(item) {\n      if (this.stack.length > 1) {\n        this.map.set(item, TOMBSTONE);\n      } else {\n        this.map.delete(item);\n      }\n    }\n  }, {\n    key: \"has\",\n    value: function has(item) {\n      var topValue = this.map.get(item);\n      if (topValue !== undefined) return topValue !== TOMBSTONE;\n      if (this.stack.length > 1) {\n        for (var i = this.stack.length - 2; i >= 0; i--) {\n          var value = this.stack[i].get(item);\n          if (value !== undefined) {\n            this.map.set(item, value);\n            return value !== TOMBSTONE;\n          }\n        }\n        this.map.set(item, TOMBSTONE);\n      }\n      return false;\n    }\n  }, {\n    key: \"get\",\n    value: function get(item) {\n      var topValue = this.map.get(item);\n      if (topValue !== undefined) {\n        return topValue === TOMBSTONE || topValue === UNDEFINED_MARKER ? undefined : topValue;\n      }\n      if (this.stack.length > 1) {\n        for (var i = this.stack.length - 2; i >= 0; i--) {\n          var value = this.stack[i].get(item);\n          if (value !== undefined) {\n            this.map.set(item, value);\n            return value === TOMBSTONE || value === UNDEFINED_MARKER ? undefined : value;\n          }\n        }\n        this.map.set(item, TOMBSTONE);\n      }\n      return undefined;\n    }\n  }, {\n    key: \"_compress\",\n    value: function _compress() {\n      if (this.stack.length === 1) return;\n      this.map = new Map();\n      var _iterator = _createForOfIteratorHelper(this.stack),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var data = _step.value;\n          var _iterator2 = _createForOfIteratorHelper(data),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var pair = _step2.value;\n              if (pair[1] === TOMBSTONE) {\n                this.map.delete(pair[0]);\n              } else {\n                this.map.set(pair[0], pair[1]);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.stack = [this.map];\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      this._compress();\n      return Array.from(this.map.entries(), function (pair) {\n        return pair[0];\n      });\n    }\n  }, {\n    key: \"asSet\",\n    value: function asSet() {\n      return new Set(this.asArray());\n    }\n  }, {\n    key: \"asPairArray\",\n    value: function asPairArray() {\n      this._compress();\n      return Array.from(this.map.entries(), function (pair) {\n        return (/** @type {[TODO, TODO]} */pair[1] === UNDEFINED_MARKER ? [pair[0], undefined] : pair\n        );\n      });\n    }\n  }, {\n    key: \"asMap\",\n    value: function asMap() {\n      return new Map(this.asPairArray());\n    }\n  }, {\n    key: \"createChild\",\n    value: function createChild() {\n      return new StackedSetMap(this.stack);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      this._compress();\n      return this.map.size;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      throw new Error(\"This is no longer an Array\");\n    },\n    set: function set(value) {\n      throw new Error(\"This is no longer an Array\");\n    }\n  }]);\n  return StackedSetMap;\n}(); // TODO remove in webpack 5\nStackedSetMap.prototype.push = util.deprecate(\n/**\n * @deprecated\n * @this {StackedSetMap}\n * @param {any} item Item to add\n * @returns {void}\n */\nfunction (item) {\n  this.add(item);\n}, \"This is no longer an Array: Use add instead.\");\nmodule.exports = StackedSetMap;","map":null,"metadata":{},"sourceType":"script"}