{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../../schemas/plugins/optimize/LimitChunkCountPlugin.json\");\nvar LimitChunkCountPlugin = /*#__PURE__*/function () {\n  function LimitChunkCountPlugin(options) {\n    _classCallCheck(this, LimitChunkCountPlugin);\n    validateOptions(schema, options || {}, \"Limit Chunk Count Plugin\");\n    this.options = options || {};\n  }\n  _createClass(LimitChunkCountPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"LimitChunkCountPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"LimitChunkCountPlugin\", function (chunks) {\n          var maxChunks = options.maxChunks;\n          if (!maxChunks) return;\n          if (maxChunks < 1) return;\n          if (chunks.length <= maxChunks) return;\n          var sortedExtendedPairCombinations = chunks.reduce(function (combinations, a, idx) {\n            // create combination pairs\n            for (var i = 0; i < idx; i++) {\n              var b = chunks[i];\n              combinations.push([b, a]);\n            }\n            return combinations;\n          }, []).map(function (pair) {\n            // extend combination pairs with size and integrated size\n            var a = pair[0].size(options);\n            var b = pair[1].size(options);\n            var ab = pair[0].integratedSize(pair[1], options);\n            return [a + b - ab, ab, pair[0], pair[1], a, b];\n          }).filter(function (extendedPair) {\n            // filter pairs that do not have an integratedSize\n            // meaning they can NOT be integrated!\n            return extendedPair[1] !== false;\n          }).sort(function (a, b) {\n            // sadly javascript does an inplace sort here\n            // sort them by size\n            var diff = b[0] - a[0];\n            if (diff !== 0) return diff;\n            return a[1] - b[1];\n          });\n          var pair = sortedExtendedPairCombinations[0];\n          if (pair && pair[2].integrate(pair[3], \"limit\")) {\n            chunks.splice(chunks.indexOf(pair[3]), 1);\n            return true;\n          }\n        });\n      });\n    }\n  }]);\n  return LimitChunkCountPlugin;\n}();\nmodule.exports = LimitChunkCountPlugin;","map":null,"metadata":{},"sourceType":"script"}