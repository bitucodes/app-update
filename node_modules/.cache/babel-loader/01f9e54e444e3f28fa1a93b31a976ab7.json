{"ast":null,"code":"import React, { useRef, useState, useEffect } from 'react';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nvar W3CWebSocket = require('websocket').w3cwebsocket;\nvar WebSocketNext = function WebSocketNext(props) {\n  var didMountRef = useRef(false);\n  var _useState = useState(new W3CWebSocket(props.url)),\n    ws = _useState[0],\n    setWS = _useState[1];\n  var _useState2 = useState(1),\n    attempts = _useState2[0],\n    setAttempts = _useState2[1];\n  var _useState3 = useState(props.reconnect),\n    reconnect = _useState3[0],\n    setReconnect = _useState3[1];\n  var _useState4 = useState(-1),\n    timeoutID = _useState4[0],\n    setTimeoutID = _useState4[1];\n  useEffect(function () {\n    if (!didMountRef.current) {\n      didMountRef.current = true;\n      setupWebsocket();\n    } else {\n      return function () {\n        setReconnect(false);\n        clearTimeout(timeoutID);\n        ws.close();\n      };\n    }\n  }, []);\n  var setupWebsocket = function setupWebsocket() {\n    ws.onopen = function () {\n      if (typeof props.onOpen === 'function') props.onOpen();\n    };\n    ws.onerror = function (e) {\n      if (typeof props.onError === 'function') props.onError(e);\n    };\n    ws.onmessage = function (evt) {\n      props.onMessage(evt.data);\n    };\n    ws.onclose = function (evt) {\n      if (typeof props.onClose === 'function') {\n        props.onClose(evt.code, evt.reason);\n      }\n      if (reconnect) {\n        var tid = setTimeout(function () {\n          setAttempts(attempts + 1);\n          setWS(new W3CWebSocket(props.url));\n          setupWebsocket();\n        }, props.reconnectIntervalInMilliSeconds || 3000);\n        setTimeoutID(tid);\n      }\n    };\n  };\n  return /*#__PURE__*/React.createElement(\"div\", null);\n};\nvar W3CWebSocket$1 = require('websocket').w3cwebsocket;\nvar WebSocket = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(WebSocket, _React$Component);\n  function WebSocket(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      ws: new W3CWebSocket$1(_this.props.url),\n      attempts: 1\n    };\n    _this.sendMessage = _this.sendMessage.bind(_assertThisInitialized(_this));\n    _this.setupWebsocket = _this.setupWebsocket.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  var _proto = WebSocket.prototype;\n  _proto.logging = function logging(logline) {\n    if (this.props.debug === true) {\n      console.log(logline);\n    }\n  };\n  _proto.generateInterval = function generateInterval(k) {\n    if (this.props.reconnectIntervalInMilliSeconds > 0) {\n      return this.props.reconnectIntervalInMilliSeconds;\n    }\n    return Math.min(30, Math.pow(2, k) - 1) * 1000;\n  };\n  _proto.setupWebsocket = function setupWebsocket() {\n    var _this2 = this;\n    var websocket = this.state.ws;\n    websocket.onopen = function () {\n      _this2.logging('Websocket connected...');\n      if (typeof _this2.props.onOpen === 'function') _this2.props.onOpen();\n    };\n    websocket.onerror = function (e) {\n      if (typeof _this2.props.onError === 'function') _this2.props.onError(e);\n    };\n    websocket.onmessage = function (evt) {\n      _this2.props.onMessage(evt.data);\n    };\n    this.shouldReconnect = this.props.reconnect;\n    websocket.onclose = function (evt) {\n      _this2.logging(\"Websocket disconnected,the reason: \" + evt.reason + \",the code: \" + evt.code);\n      if (typeof _this2.props.onClose === 'function') _this2.props.onClose(evt.code, evt.reason);\n      if (_this2.shouldReconnect) {\n        var time = _this2.generateInterval(_this2.state.attempts);\n        _this2.timeoutID = setTimeout(function () {\n          _this2.setState({\n            attempts: _this2.state.attempts + 1\n          });\n          _this2.setState({\n            ws: new W3CWebSocket$1(_this2.props.url)\n          });\n          _this2.setupWebsocket();\n        }, time);\n      }\n    };\n  };\n  _proto.componentDidMount = function componentDidMount() {\n    var childRef = this.props.childRef;\n    childRef && childRef(this);\n    this.setupWebsocket();\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var childRef = this.props.childRef;\n    childRef && childRef(undefined);\n    this.shouldReconnect = false;\n    clearTimeout(this.timeoutID);\n    var websocket = this.state.ws;\n    websocket.close();\n  };\n  _proto.sendMessage = function sendMessage(message) {\n    var websocket = this.state.ws;\n    websocket.send(message);\n  };\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(\"div\", null);\n  };\n  return WebSocket;\n}(React.Component);\nexport { WebSocket, WebSocketNext };","map":null,"metadata":{},"sourceType":"module"}