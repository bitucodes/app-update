{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar DefineOwnProperty = require('../helpers/DefineOwnProperty');\nvar FromPropertyDescriptor = require('./FromPropertyDescriptor');\nvar OrdinaryGetOwnProperty = require('./OrdinaryGetOwnProperty');\nvar IsDataDescriptor = require('./IsDataDescriptor');\nvar IsExtensible = require('./IsExtensible');\nvar IsPropertyKey = require('./IsPropertyKey');\nvar SameValue = require('./SameValue');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-createdataproperty\n\nmodule.exports = function CreateDataProperty(O, P, V) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n  }\n  var oldDesc = OrdinaryGetOwnProperty(O, P);\n  var extensible = !oldDesc || IsExtensible(O);\n  var nonConfigurable = oldDesc && !oldDesc['[[Configurable]]'];\n  if (nonConfigurable || !extensible) {\n    return false;\n  }\n  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {\n    '[[Configurable]]': true,\n    '[[Enumerable]]': true,\n    '[[Value]]': V,\n    '[[Writable]]': true\n  });\n};","map":null,"metadata":{},"sourceType":"script"}