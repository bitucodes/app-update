{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar DependenciesBlock = require(\"./DependenciesBlock\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n/** @typedef {TODO} GroupOptions */\n\nmodule.exports = /*#__PURE__*/function (_DependenciesBlock) {\n  _inherits(AsyncDependenciesBlock, _DependenciesBlock);\n  /**\n   * @param {GroupOptions} groupOptions options for the group\n   * @param {Module} module the Module object\n   * @param {DependencyLocation=} loc the line of code\n   * @param {TODO=} request the request\n   */\n  function AsyncDependenciesBlock(groupOptions, module, loc, request) {\n    var _this;\n    _classCallCheck(this, AsyncDependenciesBlock);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncDependenciesBlock).call(this));\n    if (typeof groupOptions === \"string\") {\n      groupOptions = {\n        name: groupOptions\n      };\n    } else if (!groupOptions) {\n      groupOptions = {\n        name: undefined\n      };\n    }\n    _this.groupOptions = groupOptions;\n    /** @type {ChunkGroup=} */\n    _this.chunkGroup = undefined;\n    _this.module = module;\n    _this.loc = loc;\n    _this.request = request;\n    /** @type {DependenciesBlock} */\n    _this.parent = undefined;\n    return _this;\n  }\n\n  /**\n   * @returns {string} The name of the chunk\n   */\n  _createClass(AsyncDependenciesBlock, [{\n    key: \"updateHash\",\n    /**\n     * @param {Hash} hash the hash used to track block changes, from \"crypto\" module\n     * @returns {void}\n     */\n    value: function updateHash(hash) {\n      hash.update(JSON.stringify(this.groupOptions));\n      hash.update(this.chunkGroup && this.chunkGroup.chunks.map(function (chunk) {\n        return chunk.id !== null ? chunk.id : \"\";\n      }).join(\",\") || \"\");\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"updateHash\", this).call(this, hash);\n    }\n    /**\n     * @returns {void}\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.chunkGroup = undefined;\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"disconnect\", this).call(this);\n    }\n    /**\n     * @returns {void}\n     */\n  }, {\n    key: \"unseal\",\n    value: function unseal() {\n      this.chunkGroup = undefined;\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"unseal\", this).call(this);\n    }\n    /**\n     * @returns {void}\n     */\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"sortItems\", this).call(this);\n    }\n  }, {\n    key: \"chunkName\",\n    get: function get() {\n      return this.groupOptions.name;\n    }\n    /**\n     * @param {string} value The new chunk name\n     * @returns {void}\n     */\n    ,\n    set: function set(value) {\n      this.groupOptions.name = value;\n    }\n    /**\n     * @returns {never} this throws and should never be called\n     */\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n    }\n    /**\n     * @param {never} value setter value\n     * @returns {never} this is going to throw therefore we should throw type\n     * assertions by returning never\n     */\n    ,\n    set: function set(value) {\n      throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n    }\n  }]);\n  return AsyncDependenciesBlock;\n}(DependenciesBlock);","map":null,"metadata":{},"sourceType":"script"}