{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nvar ModuleHotAcceptDependency = require(\"../dependencies/ModuleHotAcceptDependency\");\nvar ModuleHotDeclineDependency = require(\"../dependencies/ModuleHotDeclineDependency\");\nvar ConcatenatedModule = require(\"./ConcatenatedModule\");\nvar HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\nvar StackedSetMap = require(\"../util/StackedSetMap\");\nvar formatBailoutReason = function formatBailoutReason(msg) {\n  return \"ModuleConcatenation bailout: \" + msg;\n};\nvar ModuleConcatenationPlugin = /*#__PURE__*/function () {\n  function ModuleConcatenationPlugin(options) {\n    _classCallCheck(this, ModuleConcatenationPlugin);\n    if (typeof options !== \"object\") options = {};\n    this.options = options;\n  }\n  _createClass(ModuleConcatenationPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"ModuleConcatenationPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var handler = function handler(parser, parserOptions) {\n          parser.hooks.call.for(\"eval\").tap(\"ModuleConcatenationPlugin\", function () {\n            // Because of variable renaming we can't use modules with eval.\n            parser.state.module.buildMeta.moduleConcatenationBailout = \"eval()\";\n          });\n        };\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ModuleConcatenationPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ModuleConcatenationPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ModuleConcatenationPlugin\", handler);\n        var bailoutReasonMap = new Map();\n        var setBailoutReason = function setBailoutReason(module, reason) {\n          bailoutReasonMap.set(module, reason);\n          module.optimizationBailout.push(typeof reason === \"function\" ? function (rs) {\n            return formatBailoutReason(reason(rs));\n          } : formatBailoutReason(reason));\n        };\n        var getBailoutReason = function getBailoutReason(module, requestShortener) {\n          var reason = bailoutReasonMap.get(module);\n          if (typeof reason === \"function\") return reason(requestShortener);\n          return reason;\n        };\n        compilation.hooks.optimizeChunkModules.tap(\"ModuleConcatenationPlugin\", function (chunks, modules) {\n          var relevantModules = [];\n          var possibleInners = new Set();\n          var _iterator = _createForOfIteratorHelper(modules),\n            _step;\n          try {\n            var _loop2 = function _loop2() {\n              var module = _step.value;\n              // Only harmony modules are valid for optimization\n              if (!module.buildMeta || module.buildMeta.exportsType !== \"namespace\" || !module.dependencies.some(function (d) {\n                return d instanceof HarmonyCompatibilityDependency;\n              })) {\n                setBailoutReason(module, \"Module is not an ECMAScript module\");\n                return \"continue\";\n              }\n\n              // Some expressions are not compatible with module concatenation\n              // because they may produce unexpected results. The plugin bails out\n              // if some were detected upfront.\n              if (module.buildMeta && module.buildMeta.moduleConcatenationBailout) {\n                setBailoutReason(module, \"Module uses \".concat(module.buildMeta.moduleConcatenationBailout));\n                return \"continue\";\n              }\n\n              // Exports must be known (and not dynamic)\n              if (!Array.isArray(module.buildMeta.providedExports)) {\n                setBailoutReason(module, \"Module exports are unknown\");\n                return \"continue\";\n              }\n\n              // Using dependency variables is not possible as this wraps the code in a function\n              if (module.variables.length > 0) {\n                setBailoutReason(module, \"Module uses injected variables (\".concat(module.variables.map(function (v) {\n                  return v.name;\n                }).join(\", \"), \")\"));\n                return \"continue\";\n              }\n\n              // Hot Module Replacement need it's own module to work correctly\n              if (module.dependencies.some(function (dep) {\n                return dep instanceof ModuleHotAcceptDependency || dep instanceof ModuleHotDeclineDependency;\n              })) {\n                setBailoutReason(module, \"Module uses Hot Module Replacement\");\n                return \"continue\";\n              }\n              relevantModules.push(module);\n\n              // Module must not be the entry points\n              if (module.isEntryModule()) {\n                setBailoutReason(module, \"Module is an entry point\");\n                return \"continue\";\n              }\n\n              // Module must be in any chunk (we don't want to do useless work)\n              if (module.getNumberOfChunks() === 0) {\n                setBailoutReason(module, \"Module is not in any chunk\");\n                return \"continue\";\n              }\n\n              // Module must only be used by Harmony Imports\n              var nonHarmonyReasons = module.reasons.filter(function (reason) {\n                return !reason.dependency || !(reason.dependency instanceof HarmonyImportDependency);\n              });\n              if (nonHarmonyReasons.length > 0) {\n                var importingModules = new Set(nonHarmonyReasons.map(function (r) {\n                  return r.module;\n                }).filter(Boolean));\n                var importingExplanations = new Set(nonHarmonyReasons.map(function (r) {\n                  return r.explanation;\n                }).filter(Boolean));\n                var importingModuleTypes = new Map(Array.from(importingModules).map(function (m) {\n                  return (/** @type {[string, Set]} */[m, new Set(nonHarmonyReasons.filter(function (r) {\n                      return r.module === m;\n                    }).map(function (r) {\n                      return r.dependency.type;\n                    }).sort())]\n                  );\n                }));\n                setBailoutReason(module, function (requestShortener) {\n                  var names = Array.from(importingModules).map(function (m) {\n                    return \"\".concat(m.readableIdentifier(requestShortener), \" (referenced with \").concat(Array.from(importingModuleTypes.get(m)).join(\", \"), \")\");\n                  }).sort();\n                  var explanations = Array.from(importingExplanations).sort();\n                  if (names.length > 0 && explanations.length === 0) {\n                    return \"Module is referenced from these modules with unsupported syntax: \".concat(names.join(\", \"));\n                  } else if (names.length === 0 && explanations.length > 0) {\n                    return \"Module is referenced by: \".concat(explanations.join(\", \"));\n                  } else if (names.length > 0 && explanations.length > 0) {\n                    return \"Module is referenced from these modules with unsupported syntax: \".concat(names.join(\", \"), \" and by: \").concat(explanations.join(\", \"));\n                  } else {\n                    return \"Module is referenced in a unsupported way\";\n                  }\n                });\n                return \"continue\";\n              }\n              possibleInners.add(module);\n            };\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _ret = _loop2();\n              if (_ret === \"continue\") continue;\n            }\n            // sort by depth\n            // modules with lower depth are more likely suited as roots\n            // this improves performance, because modules already selected as inner are skipped\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          relevantModules.sort(function (a, b) {\n            return a.depth - b.depth;\n          });\n          var concatConfigurations = [];\n          var usedAsInner = new Set();\n          for (var _i = 0, _relevantModules = relevantModules; _i < _relevantModules.length; _i++) {\n            var currentRoot = _relevantModules[_i];\n            // when used by another configuration as inner:\n            // the other configuration is better and we can skip this one\n            if (usedAsInner.has(currentRoot)) continue;\n\n            // create a configuration with the root\n            var currentConfiguration = new ConcatConfiguration(currentRoot);\n\n            // cache failures to add modules\n            var failureCache = new Map();\n\n            // try to add all imports\n            var _iterator2 = _createForOfIteratorHelper(_this._getImports(compilation, currentRoot)),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var imp = _step2.value;\n                var problem = _this._tryToAdd(compilation, currentConfiguration, imp, possibleInners, failureCache);\n                if (problem) {\n                  failureCache.set(imp, problem);\n                  currentConfiguration.addWarning(imp, problem);\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            if (!currentConfiguration.isEmpty()) {\n              concatConfigurations.push(currentConfiguration);\n              var _iterator3 = _createForOfIteratorHelper(currentConfiguration.getModules()),\n                _step3;\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var _module = _step3.value;\n                  if (_module !== currentConfiguration.rootModule) {\n                    usedAsInner.add(_module);\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n          }\n          // HACK: Sort configurations by length and start with the longest one\n          // to get the biggers groups possible. Used modules are marked with usedModules\n          // TODO: Allow to reuse existing configuration while trying to add dependencies.\n          // This would improve performance. O(n^2) -> O(n)\n          concatConfigurations.sort(function (a, b) {\n            return b.modules.size - a.modules.size;\n          });\n          var usedModules = new Set();\n          for (var _i2 = 0, _concatConfigurations = concatConfigurations; _i2 < _concatConfigurations.length; _i2++) {\n            var concatConfiguration = _concatConfigurations[_i2];\n            if (usedModules.has(concatConfiguration.rootModule)) continue;\n            var _modules = concatConfiguration.getModules();\n            var rootModule = concatConfiguration.rootModule;\n            var newModule = new ConcatenatedModule(rootModule, Array.from(_modules), ConcatenatedModule.createConcatenationList(rootModule, _modules, compilation));\n            var _iterator4 = _createForOfIteratorHelper(concatConfiguration.getWarningsSorted()),\n              _step4;\n            try {\n              var _loop = function _loop() {\n                var warning = _step4.value;\n                newModule.optimizationBailout.push(function (requestShortener) {\n                  var reason = getBailoutReason(warning[0], requestShortener);\n                  var reasonWithPrefix = reason ? \" (<- \".concat(reason, \")\") : \"\";\n                  if (warning[0] === warning[1]) {\n                    return formatBailoutReason(\"Cannot concat with \".concat(warning[0].readableIdentifier(requestShortener)).concat(reasonWithPrefix));\n                  } else {\n                    return formatBailoutReason(\"Cannot concat with \".concat(warning[0].readableIdentifier(requestShortener), \" because of \").concat(warning[1].readableIdentifier(requestShortener)).concat(reasonWithPrefix));\n                  }\n                });\n              };\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                _loop();\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n            var _chunks = concatConfiguration.rootModule.getChunks();\n            var _iterator5 = _createForOfIteratorHelper(_modules),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var m = _step5.value;\n                usedModules.add(m);\n                var _iterator8 = _createForOfIteratorHelper(_chunks),\n                  _step8;\n                try {\n                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                    var chunk = _step8.value;\n                    chunk.removeModule(m);\n                  }\n                } catch (err) {\n                  _iterator8.e(err);\n                } finally {\n                  _iterator8.f();\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n            var _iterator6 = _createForOfIteratorHelper(_chunks),\n              _step6;\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var _chunk = _step6.value;\n                _chunk.addModule(newModule);\n                newModule.addChunk(_chunk);\n                if (_chunk.entryModule === concatConfiguration.rootModule) {\n                  _chunk.entryModule = newModule;\n                }\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n            compilation.modules.push(newModule);\n            var _iterator7 = _createForOfIteratorHelper(newModule.reasons),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _reason = _step7.value;\n                if (_reason.dependency.module === concatConfiguration.rootModule) _reason.dependency.module = newModule;\n                if (_reason.dependency.redirectedModule === concatConfiguration.rootModule) _reason.dependency.redirectedModule = newModule;\n              }\n              // TODO: remove when LTS node version contains fixed v8 version\n              // @see https://github.com/webpack/webpack/pull/6613\n              // Turbofan does not correctly inline for-of loops with polymorphic input arrays.\n              // Work around issue by using a standard for loop and assigning dep.module.reasons\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n            for (var i = 0; i < newModule.dependencies.length; i++) {\n              var dep = newModule.dependencies[i];\n              if (dep.module) {\n                var reasons = dep.module.reasons;\n                for (var j = 0; j < reasons.length; j++) {\n                  var reason = reasons[j];\n                  if (reason.dependency === dep) {\n                    reason.module = newModule;\n                  }\n                }\n              }\n            }\n          }\n          compilation.modules = compilation.modules.filter(function (m) {\n            return !usedModules.has(m);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_getImports\",\n    value: function _getImports(compilation, module) {\n      return new Set(module.dependencies\n\n      // Get reference info only for harmony Dependencies\n      .map(function (dep) {\n        if (!(dep instanceof HarmonyImportDependency)) return null;\n        if (!compilation) return dep.getReference();\n        return compilation.getDependencyReference(module, dep);\n      })\n\n      // Reference is valid and has a module\n      // Dependencies are simple enough to concat them\n      .filter(function (ref) {\n        return ref && ref.module && (Array.isArray(ref.importedNames) || Array.isArray(ref.module.buildMeta.providedExports));\n      })\n\n      // Take the imported module\n      .map(function (ref) {\n        return ref.module;\n      }));\n    }\n  }, {\n    key: \"_tryToAdd\",\n    value: function _tryToAdd(compilation, config, module, possibleModules, failureCache) {\n      var cacheEntry = failureCache.get(module);\n      if (cacheEntry) {\n        return cacheEntry;\n      }\n\n      // Already added?\n      if (config.has(module)) {\n        return null;\n      }\n\n      // Not possible to add?\n      if (!possibleModules.has(module)) {\n        failureCache.set(module, module); // cache failures for performance\n        return module;\n      }\n\n      // module must be in the same chunks\n      if (!config.rootModule.hasEqualsChunks(module)) {\n        failureCache.set(module, module); // cache failures for performance\n        return module;\n      }\n\n      // Clone config to make experimental changes\n      var testConfig = config.clone();\n\n      // Add the module\n      testConfig.add(module);\n\n      // Every module which depends on the added module must be in the configuration too.\n      var _iterator9 = _createForOfIteratorHelper(module.reasons),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var reason = _step9.value;\n          // Modules that are not used can be ignored\n          if (reason.module.factoryMeta.sideEffectFree && reason.module.used === false) continue;\n          var problem = this._tryToAdd(compilation, testConfig, reason.module, possibleModules, failureCache);\n          if (problem) {\n            failureCache.set(module, problem); // cache failures for performance\n            return problem;\n          }\n        }\n\n        // Commit experimental changes\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      config.set(testConfig);\n\n      // Eagerly try to add imports too if possible\n      var _iterator10 = _createForOfIteratorHelper(this._getImports(compilation, module)),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var imp = _step10.value;\n          var _problem = this._tryToAdd(compilation, config, imp, possibleModules, failureCache);\n          if (_problem) {\n            config.addWarning(imp, _problem);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return null;\n    }\n  }]);\n  return ModuleConcatenationPlugin;\n}();\nvar ConcatConfiguration = /*#__PURE__*/function () {\n  function ConcatConfiguration(rootModule, cloneFrom) {\n    _classCallCheck(this, ConcatConfiguration);\n    this.rootModule = rootModule;\n    if (cloneFrom) {\n      this.modules = cloneFrom.modules.createChild(5);\n      this.warnings = cloneFrom.warnings.createChild(5);\n    } else {\n      this.modules = new StackedSetMap();\n      this.modules.add(rootModule);\n      this.warnings = new StackedSetMap();\n    }\n  }\n  _createClass(ConcatConfiguration, [{\n    key: \"add\",\n    value: function add(module) {\n      this.modules.add(module);\n    }\n  }, {\n    key: \"has\",\n    value: function has(module) {\n      return this.modules.has(module);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.modules.size === 1;\n    }\n  }, {\n    key: \"addWarning\",\n    value: function addWarning(module, problem) {\n      this.warnings.set(module, problem);\n    }\n  }, {\n    key: \"getWarningsSorted\",\n    value: function getWarningsSorted() {\n      return new Map(this.warnings.asPairArray().sort(function (a, b) {\n        var ai = a[0].identifier();\n        var bi = b[0].identifier();\n        if (ai < bi) return -1;\n        if (ai > bi) return 1;\n        return 0;\n      }));\n    }\n  }, {\n    key: \"getModules\",\n    value: function getModules() {\n      return this.modules.asSet();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ConcatConfiguration(this.rootModule, this);\n    }\n  }, {\n    key: \"set\",\n    value: function set(config) {\n      this.rootModule = config.rootModule;\n      this.modules = config.modules;\n      this.warnings = config.warnings;\n    }\n  }]);\n  return ConcatConfiguration;\n}();\nmodule.exports = ModuleConcatenationPlugin;","map":null,"metadata":{},"sourceType":"script"}