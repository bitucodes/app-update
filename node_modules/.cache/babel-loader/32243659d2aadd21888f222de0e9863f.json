{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar Watchpack = require(\"watchpack\");\nvar objectToMap = require(\"../util/objectToMap\");\nvar NodeWatchFileSystem = /*#__PURE__*/function () {\n  function NodeWatchFileSystem(inputFileSystem) {\n    _classCallCheck(this, NodeWatchFileSystem);\n    this.inputFileSystem = inputFileSystem;\n    this.watcherOptions = {\n      aggregateTimeout: 0\n    };\n    this.watcher = new Watchpack(this.watcherOptions);\n  }\n  _createClass(NodeWatchFileSystem, [{\n    key: \"watch\",\n    value: function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n      var _this = this;\n      if (!Array.isArray(files)) {\n        throw new Error(\"Invalid arguments: 'files'\");\n      }\n      if (!Array.isArray(dirs)) {\n        throw new Error(\"Invalid arguments: 'dirs'\");\n      }\n      if (!Array.isArray(missing)) {\n        throw new Error(\"Invalid arguments: 'missing'\");\n      }\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Invalid arguments: 'callback'\");\n      }\n      if (typeof startTime !== \"number\" && startTime) {\n        throw new Error(\"Invalid arguments: 'startTime'\");\n      }\n      if (typeof options !== \"object\") {\n        throw new Error(\"Invalid arguments: 'options'\");\n      }\n      if (typeof callbackUndelayed !== \"function\" && callbackUndelayed) {\n        throw new Error(\"Invalid arguments: 'callbackUndelayed'\");\n      }\n      var oldWatcher = this.watcher;\n      this.watcher = new Watchpack(options);\n      if (callbackUndelayed) {\n        this.watcher.once(\"change\", callbackUndelayed);\n      }\n      this.watcher.once(\"aggregated\", function (changes, removals) {\n        changes = changes.concat(removals);\n        if (_this.inputFileSystem && _this.inputFileSystem.purge) {\n          _this.inputFileSystem.purge(changes);\n        }\n        var times = objectToMap(_this.watcher.getTimes());\n        callback(null, changes.filter(function (file) {\n          return files.includes(file);\n        }).sort(), changes.filter(function (file) {\n          return dirs.includes(file);\n        }).sort(), changes.filter(function (file) {\n          return missing.includes(file);\n        }).sort(), times, times);\n      });\n      this.watcher.watch(files.concat(missing), dirs.concat(missing), startTime);\n      if (oldWatcher) {\n        oldWatcher.close();\n      }\n      return {\n        close: function close() {\n          if (_this.watcher) {\n            _this.watcher.close();\n            _this.watcher = null;\n          }\n        },\n        pause: function pause() {\n          if (_this.watcher) {\n            _this.watcher.pause();\n          }\n        },\n        getFileTimestamps: function getFileTimestamps() {\n          if (_this.watcher) {\n            return objectToMap(_this.watcher.getTimes());\n          } else {\n            return new Map();\n          }\n        },\n        getContextTimestamps: function getContextTimestamps() {\n          if (_this.watcher) {\n            return objectToMap(_this.watcher.getTimes());\n          } else {\n            return new Map();\n          }\n        }\n      };\n    }\n  }]);\n  return NodeWatchFileSystem;\n}();\nmodule.exports = NodeWatchFileSystem;","map":null,"metadata":{},"sourceType":"script"}