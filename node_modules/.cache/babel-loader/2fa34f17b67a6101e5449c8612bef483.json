{"ast":null,"code":"\"use strict\";\n\n/**\n * trace-event - A library to create a trace of your node app per\n * Google's Trace Event format:\n * // JSSTYLED\n *      https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU\n */\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tracer = void 0;\nvar stream_1 = require(\"stream\");\nfunction evCommon() {\n  var hrtime = process.hrtime(); // [seconds, nanoseconds]\n  var ts = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000); // microseconds\n  return {\n    ts: ts,\n    pid: process.pid,\n    tid: process.pid // no meaningful tid for node.js\n  };\n}\nvar Tracer = /*#__PURE__*/function (_stream_1$Readable) {\n  _inherits(Tracer, _stream_1$Readable);\n  function Tracer() {\n    var _this;\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Tracer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tracer).call(this));\n    _this.noStream = false;\n    _this.events = [];\n    if (typeof opts !== \"object\") {\n      throw new Error(\"Invalid options passed (must be an object)\");\n    }\n    if (opts.parent != null && typeof opts.parent !== \"object\") {\n      throw new Error(\"Invalid option (parent) passed (must be an object)\");\n    }\n    if (opts.fields != null && typeof opts.fields !== \"object\") {\n      throw new Error(\"Invalid option (fields) passed (must be an object)\");\n    }\n    if (opts.objectMode != null && opts.objectMode !== true && opts.objectMode !== false) {\n      throw new Error(\"Invalid option (objectsMode) passed (must be a boolean)\");\n    }\n    _this.noStream = opts.noStream || false;\n    _this.parent = opts.parent;\n    if (_this.parent) {\n      _this.fields = Object.assign({}, opts.parent && opts.parent.fields);\n    } else {\n      _this.fields = {};\n    }\n    if (opts.fields) {\n      Object.assign(_this.fields, opts.fields);\n    }\n    if (!_this.fields.cat) {\n      // trace-viewer *requires* `cat`, so let's have a fallback.\n      _this.fields.cat = \"default\";\n    } else if (Array.isArray(_this.fields.cat)) {\n      _this.fields.cat = _this.fields.cat.join(\",\");\n    }\n    if (!_this.fields.args) {\n      // trace-viewer *requires* `args`, so let's have a fallback.\n      _this.fields.args = {};\n    }\n    if (_this.parent) {\n      // TODO: Not calling Readable ctor here. Does that cause probs?\n      //      Probably if trying to pipe from the child.\n      //      Might want a serpate TracerChild class for these guys.\n      _this._push = _this.parent._push.bind(_this.parent);\n    } else {\n      _this._objectMode = Boolean(opts.objectMode);\n      var streamOpts = {\n        objectMode: _this._objectMode\n      };\n      if (_this._objectMode) {\n        _this._push = _this.push;\n      } else {\n        _this._push = _this._pushString;\n        streamOpts.encoding = \"utf8\";\n      }\n      stream_1.Readable.call(_assertThisInitialized(_assertThisInitialized(_this)), streamOpts);\n    }\n    return _this;\n  }\n  /**\n   * If in no streamMode in order to flush out the trace\n   * you need to call flush.\n   */\n  _createClass(Tracer, [{\n    key: \"flush\",\n    value: function flush() {\n      if (this.noStream === true) {\n        var _iterator = _createForOfIteratorHelper(this.events),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var evt = _step.value;\n            this._push(evt);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        this._flush();\n      }\n    }\n  }, {\n    key: \"_read\",\n    value: function _read(_) {}\n  }, {\n    key: \"_pushString\",\n    value: function _pushString(ev) {\n      var separator = \"\";\n      if (!this.firstPush) {\n        this.push(\"[\");\n        this.firstPush = true;\n      } else {\n        separator = \",\\n\";\n      }\n      this.push(separator + JSON.stringify(ev), \"utf8\");\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush() {\n      if (!this._objectMode) {\n        this.push(\"]\");\n      }\n    }\n  }, {\n    key: \"child\",\n    value: function child(fields) {\n      return new Tracer({\n        parent: this,\n        fields: fields\n      });\n    }\n  }, {\n    key: \"begin\",\n    value: function begin(fields) {\n      return this.mkEventFunc(\"b\")(fields);\n    }\n  }, {\n    key: \"end\",\n    value: function end(fields) {\n      return this.mkEventFunc(\"e\")(fields);\n    }\n  }, {\n    key: \"completeEvent\",\n    value: function completeEvent(fields) {\n      return this.mkEventFunc(\"X\")(fields);\n    }\n  }, {\n    key: \"instantEvent\",\n    value: function instantEvent(fields) {\n      return this.mkEventFunc(\"I\")(fields);\n    }\n  }, {\n    key: \"mkEventFunc\",\n    value: function mkEventFunc(ph) {\n      var _this2 = this;\n      return function (fields) {\n        var ev = evCommon();\n        // Assign the event phase.\n        ev.ph = ph;\n        if (fields) {\n          if (typeof fields === \"string\") {\n            ev.name = fields;\n          } else {\n            for (var _i = 0, _Object$keys = Object.keys(fields); _i < _Object$keys.length; _i++) {\n              var k = _Object$keys[_i];\n              if (k === \"cat\") {\n                ev.cat = fields.cat.join(\",\");\n              } else {\n                ev[k] = fields[k];\n              }\n            }\n          }\n        }\n        if (!_this2.noStream) {\n          _this2._push(ev);\n        } else {\n          _this2.events.push(ev);\n        }\n      };\n    }\n  }]);\n  return Tracer;\n}(stream_1.Readable);\nexports.Tracer = Tracer;\n/*\n * These correspond to the \"Async events\" in the Trace Events doc.\n *\n * Required fields:\n * - name\n * - id\n *\n * Optional fields:\n * - cat (array)\n * - args (object)\n * - TODO: stack fields, other optional fields?\n *\n * Dev Note: We don't explicitly assert that correct fields are\n * used for speed (premature optimization alert!).\n */","map":null,"metadata":{},"sourceType":"script"}