{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\nvar NullFactory = require(\"./NullFactory\");\nvar ParserHelpers = require(\"./ParserHelpers\");\nvar getQuery = function getQuery(request) {\n  var i = request.indexOf(\"?\");\n  return i !== -1 ? request.substr(i) : \"\";\n};\nvar collectDeclaration = function collectDeclaration(declarations, pattern) {\n  var stack = [pattern];\n  while (stack.length > 0) {\n    var node = stack.pop();\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n      case \"ArrayPattern\":\n        var _iterator = _createForOfIteratorHelper(node.elements),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var element = _step.value;\n            if (element) {\n              stack.push(element);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        break;\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n      case \"ObjectPattern\":\n        var _iterator2 = _createForOfIteratorHelper(node.properties),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var property = _step2.value;\n            stack.push(property.value);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        break;\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\nvar getHoistedDeclarations = function getHoistedDeclarations(branch, includeFunctionDeclarations) {\n  var declarations = new Set();\n  var stack = [branch];\n  while (stack.length > 0) {\n    var node = stack.pop();\n    // Some node could be `null` or `undefined`.\n    if (!node) continue;\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        var _iterator3 = _createForOfIteratorHelper(node.body),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var stmt = _step3.value;\n            stack.push(stmt);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        break;\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n      case \"SwitchStatement\":\n        var _iterator4 = _createForOfIteratorHelper(node.cases),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var cs = _step4.value;\n            var _iterator5 = _createForOfIteratorHelper(cs.consequent),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var consequent = _step5.value;\n                stack.push(consequent);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        break;\n      case \"TryStatement\":\n        stack.push(node.block);\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n        stack.push(node.finalizer);\n        break;\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n        break;\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          var _iterator6 = _createForOfIteratorHelper(node.declarations),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var decl = _step6.value;\n              collectDeclaration(declarations, decl.id);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n        break;\n    }\n  }\n  return Array.from(declarations);\n};\nvar ConstPlugin = /*#__PURE__*/function () {\n  function ConstPlugin() {\n    _classCallCheck(this, ConstPlugin);\n  }\n  _createClass(ConstPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"ConstPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n        var handler = function handler(parser) {\n          parser.hooks.statementIf.tap(\"ConstPlugin\", function (statement) {\n            var param = parser.evaluateExpression(statement.test);\n            var bool = param.asBool();\n            if (typeof bool === \"boolean\") {\n              if (statement.test.type !== \"Literal\") {\n                var dep = new ConstDependency(\"\".concat(bool), param.range);\n                dep.loc = statement.loc;\n                parser.state.current.addDependency(dep);\n              }\n              var branchToRemove = bool ? statement.alternate : statement.consequent;\n              if (branchToRemove) {\n                // Before removing the dead branch, the hoisted declarations\n                // must be collected.\n                //\n                // Given the following code:\n                //\n                //     if (true) f() else g()\n                //     if (false) {\n                //       function f() {}\n                //       const g = function g() {}\n                //       if (someTest) {\n                //         let a = 1\n                //         var x, {y, z} = obj\n                //       }\n                //     } else {\n                //       …\n                //     }\n                //\n                // the generated code is:\n                //\n                //     if (true) f() else {}\n                //     if (false) {\n                //       var f, x, y, z;   (in loose mode)\n                //       var x, y, z;      (in strict mode)\n                //     } else {\n                //       …\n                //     }\n                //\n                // NOTE: When code runs in strict mode, `var` declarations\n                // are hoisted but `function` declarations don't.\n                //\n                var declarations;\n                if (parser.scope.isStrict) {\n                  // If the code runs in strict mode, variable declarations\n                  // using `var` must be hoisted.\n                  declarations = getHoistedDeclarations(branchToRemove, false);\n                } else {\n                  // Otherwise, collect all hoisted declaration.\n                  declarations = getHoistedDeclarations(branchToRemove, true);\n                }\n                var replacement;\n                if (declarations.length > 0) {\n                  replacement = \"{ var \".concat(declarations.join(\", \"), \"; }\");\n                } else {\n                  replacement = \"{}\";\n                }\n                var _dep = new ConstDependency(replacement, branchToRemove.range);\n                _dep.loc = branchToRemove.loc;\n                parser.state.current.addDependency(_dep);\n              }\n              return bool;\n            }\n          });\n          parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", function (expression) {\n            var param = parser.evaluateExpression(expression.test);\n            var bool = param.asBool();\n            if (typeof bool === \"boolean\") {\n              if (expression.test.type !== \"Literal\") {\n                var _dep2 = new ConstDependency(\" \".concat(bool), param.range);\n                _dep2.loc = expression.loc;\n                parser.state.current.addDependency(_dep2);\n              }\n              // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // Given the following code:\n              //\n              //   false ? someExpression() : otherExpression();\n              //\n              // the generated code is:\n              //\n              //   false ? undefined : otherExpression();\n              //\n              var branchToRemove = bool ? expression.alternate : expression.consequent;\n              var dep = new ConstDependency(\"undefined\", branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.current.addDependency(dep);\n              return bool;\n            }\n          });\n          parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", function (expr) {\n            if (!parser.state.module) return;\n            return ParserHelpers.evaluateToString(getQuery(parser.state.module.resource))(expr);\n          });\n          parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", function () {\n            if (!parser.state.module) return;\n            parser.state.current.addVariable(\"__resourceQuery\", JSON.stringify(getQuery(parser.state.module.resource)));\n            return true;\n          });\n        };\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n      });\n    }\n  }]);\n  return ConstPlugin;\n}();\nmodule.exports = ConstPlugin;","map":null,"metadata":{},"sourceType":"script"}