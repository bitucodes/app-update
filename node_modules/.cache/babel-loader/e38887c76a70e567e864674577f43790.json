{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Generated by CoffeeScript 2.5.1\nvar AnsiPainter,\n  styles,\n  tags,\n  tools,\n  hasProp = {}.hasOwnProperty;\ntools = require('./tools');\ntags = require('./ansiPainter/tags');\nstyles = require('./ansiPainter/styles');\nmodule.exports = AnsiPainter = function () {\n  var self;\n  var AnsiPainter = /*#__PURE__*/function () {\n    function AnsiPainter() {\n      _classCallCheck(this, AnsiPainter);\n    }\n    _createClass(AnsiPainter, [{\n      key: \"paint\",\n      value: function paint(s) {\n        return this._replaceSpecialStrings(this._renderDom(this._parse(s)));\n      }\n    }, {\n      key: \"_replaceSpecialStrings\",\n      value: function _replaceSpecialStrings(str) {\n        return str.replace(/&sp;/g, ' ').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&amp;/g, '&');\n      }\n    }, {\n      key: \"_parse\",\n      value: function _parse(string) {\n        var injectFakeRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        if (injectFakeRoot) {\n          string = '<none>' + string + '</none>';\n        }\n        return tools.toDom(string);\n      }\n    }, {\n      key: \"_renderDom\",\n      value: function _renderDom(dom) {\n        var parentStyles;\n        parentStyles = {\n          bg: 'none',\n          color: 'none'\n        };\n        return this._renderChildren(dom, parentStyles);\n      }\n    }, {\n      key: \"_renderChildren\",\n      value: function _renderChildren(children, parentStyles) {\n        var child, n, ret;\n        ret = '';\n        for (n in children) {\n          if (!hasProp.call(children, n)) continue;\n          child = children[n];\n          ret += this._renderNode(child, parentStyles);\n        }\n        return ret;\n      }\n    }, {\n      key: \"_renderNode\",\n      value: function _renderNode(node, parentStyles) {\n        if (node.type === 'text') {\n          return this._renderTextNode(node, parentStyles);\n        } else {\n          return this._renderTag(node, parentStyles);\n        }\n      }\n    }, {\n      key: \"_renderTextNode\",\n      value: function _renderTextNode(node, parentStyles) {\n        return this._wrapInStyle(node.data, parentStyles);\n      }\n    }, {\n      key: \"_wrapInStyle\",\n      value: function _wrapInStyle(str, style) {\n        return styles.color(style.color) + styles.bg(style.bg) + str + styles.none();\n      }\n    }, {\n      key: \"_renderTag\",\n      value: function _renderTag(node, parentStyles) {\n        var currentStyles, tagStyles;\n        tagStyles = this._getStylesForTagName(node.name);\n        currentStyles = this._mixStyles(parentStyles, tagStyles);\n        return this._renderChildren(node.children, currentStyles);\n      }\n    }, {\n      key: \"_mixStyles\",\n      value: function _mixStyles() {\n        var final, i, key, len, style, val;\n        final = {};\n        for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n          styles[_key] = arguments[_key];\n        }\n        for (i = 0, len = styles.length; i < len; i++) {\n          style = styles[i];\n          for (key in style) {\n            if (!hasProp.call(style, key)) continue;\n            val = style[key];\n            if (final[key] == null || val !== 'inherit') {\n              final[key] = val;\n            }\n          }\n        }\n        return final;\n      }\n    }, {\n      key: \"_getStylesForTagName\",\n      value: function _getStylesForTagName(name) {\n        if (tags[name] == null) {\n          throw Error(\"Unknown tag name `\".concat(name, \"`\"));\n        }\n        return tags[name];\n      }\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance() {\n        if (self._instance == null) {\n          self._instance = new self();\n        }\n        return self._instance;\n      }\n    }, {\n      key: \"paint\",\n      value: function paint(str) {\n        return self.getInstance().paint(str);\n      }\n    }, {\n      key: \"strip\",\n      value: function strip(s) {\n        return s.replace(/\\x1b\\[[0-9]+m/g, '');\n      }\n    }]);\n    return AnsiPainter;\n  }();\n  ;\n  AnsiPainter.tags = tags;\n  self = AnsiPainter;\n  return AnsiPainter;\n}.call(void 0);","map":null,"metadata":{},"sourceType":"script"}