{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\n/** @typedef {import(\"../Module\")} Module */\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar DependencyReference = /*#__PURE__*/function () {\n  // TODO webpack 5: module must be dynamic, you must pass a function returning a module\n  // This is needed to remove the hack in ConcatenatedModule\n  // The problem is that the `module` in Dependency could be replaced i. e. because of Scope Hoisting\n  /**\n   *\n   * @param {Module} module the referenced module\n   * @param {string[] | boolean} importedNames imported named from the module\n   * @param {boolean=} weak if this is a weak reference\n   * @param {number} order the order information or NaN if don't care\n   */\n  function DependencyReference(module, importedNames) {\n    var weak = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NaN;\n    _classCallCheck(this, DependencyReference);\n    // TODO webpack 5: make it a getter\n    this.module = module;\n    // true: full object\n    // false: only sideeffects/no export\n    // array of strings: the exports with this names\n    this.importedNames = importedNames;\n    this.weak = !!weak;\n    this.order = order;\n  }\n\n  /**\n   * @param {DependencyReference[]} array an array (will be modified)\n   * @returns {DependencyReference[]} the array again\n   */\n  _createClass(DependencyReference, null, [{\n    key: \"sort\",\n    value: function sort(array) {\n      /** @type {WeakMap<DependencyReference, number>} */\n      var originalOrder = new WeakMap();\n      var i = 0;\n      var _iterator = _createForOfIteratorHelper(array),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ref = _step.value;\n          originalOrder.set(ref, i++);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return array.sort(function (a, b) {\n        var aOrder = a.order;\n        var bOrder = b.order;\n        if (isNaN(aOrder)) {\n          if (!isNaN(bOrder)) {\n            return 1;\n          }\n        } else {\n          if (isNaN(bOrder)) {\n            return -1;\n          }\n          if (aOrder !== bOrder) {\n            return aOrder - bOrder;\n          }\n        }\n        var aOrg = originalOrder.get(a);\n        var bOrg = originalOrder.get(b);\n        return aOrg - bOrg;\n      });\n    }\n  }]);\n  return DependencyReference;\n}();\nmodule.exports = DependencyReference;","map":null,"metadata":{},"sourceType":"script"}