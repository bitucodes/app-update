{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar RootPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source hook\n   * @param {Array<string>} root roots\n   * @param {string | ResolveStepHook} target target hook\n   * @param {boolean=} ignoreErrors ignore error during resolving of root paths\n   */\n  function RootPlugin(source, root, target, ignoreErrors) {\n    _classCallCheck(this, RootPlugin);\n    this.root = root;\n    this.source = source;\n    this.target = target;\n    this._ignoreErrors = ignoreErrors;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  _createClass(RootPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"RootPlugin\", function (request, resolveContext, callback) {\n        var req = request.request;\n        if (!req) return callback();\n        if (!req.startsWith(\"/\")) return callback();\n        var path = resolver.join(_this.root, req.slice(1));\n        var obj = Object.assign(request, {\n          path: path,\n          relativePath: request.relativePath && path\n        });\n        resolver.doResolve(target, obj, \"root path \".concat(_this.root), resolveContext, _this._ignoreErrors ? function (err, result) {\n          if (err) {\n            if (resolveContext.log) {\n              resolveContext.log(\"Ignored fatal error while resolving root path:\\n\".concat(err));\n            }\n            return callback();\n          }\n          if (result) return callback(null, result);\n          callback();\n        } : callback);\n      });\n    }\n  }]);\n  return RootPlugin;\n}();\nmodule.exports = RootPlugin;","map":null,"metadata":{},"sourceType":"script"}