{"ast":null,"code":"/*\nMIT License http://www.opensource.org/licenses/mit-license.php\nAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nmodule.exports = /*#__PURE__*/function () {\n  function DescriptionFilePlugin(source, filenames, target) {\n    _classCallCheck(this, DescriptionFilePlugin);\n    this.source = source;\n    this.filenames = [].concat(filenames);\n    this.target = target;\n  }\n  _createClass(DescriptionFilePlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"DescriptionFilePlugin\", function (request, resolveContext, callback) {\n        var directory = request.path;\n        DescriptionFileUtils.loadDescriptionFile(resolver, directory, _this.filenames, resolveContext, function (err, result) {\n          if (err) return callback(err);\n          if (!result) {\n            if (resolveContext.missing) {\n              _this.filenames.forEach(function (filename) {\n                resolveContext.missing.add(resolver.join(directory, filename));\n              });\n            }\n            if (resolveContext.log) resolveContext.log(\"No description file found\");\n            return callback();\n          }\n          var relativePath = \".\" + request.path.substr(result.directory.length).replace(/\\\\/g, \"/\");\n          var obj = Object.assign({}, request, {\n            descriptionFilePath: result.path,\n            descriptionFileData: result.content,\n            descriptionFileRoot: result.directory,\n            relativePath: relativePath\n          });\n          resolver.doResolve(target, obj, \"using description file: \" + result.path + \" (relative path: \" + relativePath + \")\", resolveContext, function (err, result) {\n            if (err) return callback(err);\n\n            // Don't allow other processing\n            if (result === undefined) return callback(null, null);\n            callback(null, result);\n          });\n        });\n      });\n    }\n  }]);\n  return DescriptionFilePlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}