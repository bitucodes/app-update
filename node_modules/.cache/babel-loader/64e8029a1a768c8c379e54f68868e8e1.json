{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction startsWith(string, searchString) {\n  var stringLength = string.length;\n  var searchLength = searchString.length;\n\n  // early out if the search length is greater than the search string\n  if (searchLength > stringLength) {\n    return false;\n  }\n  var index = -1;\n  while (++index < searchLength) {\n    if (string.charCodeAt(index) !== searchString.charCodeAt(index)) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = /*#__PURE__*/function () {\n  function AliasPlugin(source, options, target) {\n    _classCallCheck(this, AliasPlugin);\n    this.source = source;\n    this.options = Array.isArray(options) ? options : [options];\n    this.target = target;\n  }\n  _createClass(AliasPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"AliasPlugin\", function (request, resolveContext, callback) {\n        var innerRequest = request.request || request.path;\n        if (!innerRequest) return callback();\n        var _iterator = _createForOfIteratorHelper(_this.options),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            if (innerRequest === item.name || !item.onlyModule && startsWith(innerRequest, item.name + \"/\")) {\n              if (innerRequest !== item.alias && !startsWith(innerRequest, item.alias + \"/\")) {\n                var newRequestStr = item.alias + innerRequest.substr(item.name.length);\n                var obj = Object.assign({}, request, {\n                  request: newRequestStr\n                });\n                return resolver.doResolve(target, obj, \"aliased with mapping '\" + item.name + \"': '\" + item.alias + \"' to '\" + newRequestStr + \"'\", resolveContext, function (err, result) {\n                  if (err) return callback(err);\n\n                  // Don't allow other aliasing or raw request\n                  if (result === undefined) return callback(null, null);\n                  callback(null, result);\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return callback();\n      });\n    }\n  }]);\n  return AliasPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}