{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar path = require(\"path\");\nvar asyncLib = require(\"neo-async\");\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nvar LibManifestPlugin = /*#__PURE__*/function () {\n  function LibManifestPlugin(options) {\n    _classCallCheck(this, LibManifestPlugin);\n    this.options = options;\n  }\n  _createClass(LibManifestPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.emit.tapAsync(\"LibManifestPlugin\", function (compilation, callback) {\n        asyncLib.forEach(compilation.chunks, function (chunk, callback) {\n          if (!chunk.isOnlyInitial()) {\n            callback();\n            return;\n          }\n          var targetPath = compilation.getPath(_this.options.path, {\n            hash: compilation.hash,\n            chunk: chunk\n          });\n          var name = _this.options.name && compilation.getPath(_this.options.name, {\n            hash: compilation.hash,\n            chunk: chunk\n          });\n          var manifest = {\n            name: name,\n            type: _this.options.type,\n            content: Array.from(chunk.modulesIterable, function (module) {\n              if (_this.options.entryOnly && !module.reasons.some(function (r) {\n                return r.dependency instanceof SingleEntryDependency;\n              })) {\n                return;\n              }\n              if (module.libIdent) {\n                var ident = module.libIdent({\n                  context: _this.options.context || compiler.options.context\n                });\n                if (ident) {\n                  return {\n                    ident: ident,\n                    data: {\n                      id: module.id,\n                      buildMeta: module.buildMeta\n                    }\n                  };\n                }\n              }\n            }).filter(Boolean).reduce(function (obj, item) {\n              obj[item.ident] = item.data;\n              return obj;\n            }, Object.create(null))\n          };\n          var content = Buffer.from(JSON.stringify(manifest), \"utf8\");\n          compiler.outputFileSystem.mkdirp(path.dirname(targetPath), function (err) {\n            if (err) return callback(err);\n            compiler.outputFileSystem.writeFile(targetPath, content, callback);\n          });\n        }, callback);\n      });\n    }\n  }]);\n  return LibManifestPlugin;\n}();\nmodule.exports = LibManifestPlugin;","map":null,"metadata":{},"sourceType":"script"}