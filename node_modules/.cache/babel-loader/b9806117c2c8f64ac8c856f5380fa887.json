{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar TypeUnknown = 0;\nvar TypeNull = 1;\nvar TypeString = 2;\nvar TypeNumber = 3;\nvar TypeBoolean = 4;\nvar TypeRegExp = 5;\nvar TypeConditional = 6;\nvar TypeArray = 7;\nvar TypeConstArray = 8;\nvar TypeIdentifier = 9;\nvar TypeWrapped = 10;\nvar TypeTemplateString = 11;\nvar BasicEvaluatedExpression = /*#__PURE__*/function () {\n  function BasicEvaluatedExpression() {\n    _classCallCheck(this, BasicEvaluatedExpression);\n    this.type = TypeUnknown;\n    this.range = null;\n    this.falsy = false;\n    this.truthy = false;\n    this.bool = null;\n    this.number = null;\n    this.regExp = null;\n    this.string = null;\n    this.quasis = null;\n    this.array = null;\n    this.items = null;\n    this.options = null;\n    this.prefix = null;\n    this.postfix = null;\n  }\n  _createClass(BasicEvaluatedExpression, [{\n    key: \"isNull\",\n    value: function isNull() {\n      return this.type === TypeNull;\n    }\n  }, {\n    key: \"isString\",\n    value: function isString() {\n      return this.type === TypeString;\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber() {\n      return this.type === TypeNumber;\n    }\n  }, {\n    key: \"isBoolean\",\n    value: function isBoolean() {\n      return this.type === TypeBoolean;\n    }\n  }, {\n    key: \"isRegExp\",\n    value: function isRegExp() {\n      return this.type === TypeRegExp;\n    }\n  }, {\n    key: \"isConditional\",\n    value: function isConditional() {\n      return this.type === TypeConditional;\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray() {\n      return this.type === TypeArray;\n    }\n  }, {\n    key: \"isConstArray\",\n    value: function isConstArray() {\n      return this.type === TypeConstArray;\n    }\n  }, {\n    key: \"isIdentifier\",\n    value: function isIdentifier() {\n      return this.type === TypeIdentifier;\n    }\n  }, {\n    key: \"isWrapped\",\n    value: function isWrapped() {\n      return this.type === TypeWrapped;\n    }\n  }, {\n    key: \"isTemplateString\",\n    value: function isTemplateString() {\n      return this.type === TypeTemplateString;\n    }\n  }, {\n    key: \"isTruthy\",\n    value: function isTruthy() {\n      return this.truthy;\n    }\n  }, {\n    key: \"isFalsy\",\n    value: function isFalsy() {\n      return this.falsy;\n    }\n  }, {\n    key: \"asBool\",\n    value: function asBool() {\n      if (this.truthy) return true;\n      if (this.falsy) return false;\n      if (this.isBoolean()) return this.bool;\n      if (this.isNull()) return false;\n      if (this.isString()) return this.string !== \"\";\n      if (this.isNumber()) return this.number !== 0;\n      if (this.isRegExp()) return true;\n      if (this.isArray()) return true;\n      if (this.isConstArray()) return true;\n      if (this.isWrapped()) {\n        return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;\n      }\n      if (this.isTemplateString()) {\n        var _iterator = _createForOfIteratorHelper(this.quasis),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var quasi = _step.value;\n            if (quasi.asBool()) return true;\n          }\n          // can't tell if string will be empty without executing\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return undefined;\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(string) {\n      this.type = TypeString;\n      this.string = string;\n      return this;\n    }\n  }, {\n    key: \"setNull\",\n    value: function setNull() {\n      this.type = TypeNull;\n      return this;\n    }\n  }, {\n    key: \"setNumber\",\n    value: function setNumber(number) {\n      this.type = TypeNumber;\n      this.number = number;\n      return this;\n    }\n  }, {\n    key: \"setBoolean\",\n    value: function setBoolean(bool) {\n      this.type = TypeBoolean;\n      this.bool = bool;\n      return this;\n    }\n  }, {\n    key: \"setRegExp\",\n    value: function setRegExp(regExp) {\n      this.type = TypeRegExp;\n      this.regExp = regExp;\n      return this;\n    }\n  }, {\n    key: \"setIdentifier\",\n    value: function setIdentifier(identifier) {\n      this.type = TypeIdentifier;\n      this.identifier = identifier;\n      return this;\n    }\n  }, {\n    key: \"setWrapped\",\n    value: function setWrapped(prefix, postfix) {\n      this.type = TypeWrapped;\n      this.prefix = prefix;\n      this.postfix = postfix;\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.type = TypeConditional;\n      this.options = options;\n      return this;\n    }\n  }, {\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      if (!this.options) {\n        this.type = TypeConditional;\n        this.options = [];\n      }\n      var _iterator2 = _createForOfIteratorHelper(options),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.options.push(item);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return this;\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this.type = TypeArray;\n      this.items = items;\n      return this;\n    }\n  }, {\n    key: \"setArray\",\n    value: function setArray(array) {\n      this.type = TypeConstArray;\n      this.array = array;\n      return this;\n    }\n  }, {\n    key: \"setTemplateString\",\n    value: function setTemplateString(quasis) {\n      this.type = TypeTemplateString;\n      this.quasis = quasis;\n      return this;\n    }\n  }, {\n    key: \"setTruthy\",\n    value: function setTruthy() {\n      this.falsy = false;\n      this.truthy = true;\n      return this;\n    }\n  }, {\n    key: \"setFalsy\",\n    value: function setFalsy() {\n      this.falsy = true;\n      this.truthy = false;\n      return this;\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange(range) {\n      this.range = range;\n      return this;\n    }\n  }]);\n  return BasicEvaluatedExpression;\n}();\nmodule.exports = BasicEvaluatedExpression;","map":null,"metadata":{},"sourceType":"script"}