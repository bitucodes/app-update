{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar Source = require(\"./Source\");\nvar LineToLineMappedSource = /*#__PURE__*/function (_Source) {\n  _inherits(LineToLineMappedSource, _Source);\n  function LineToLineMappedSource(value, name, originalSource) {\n    var _this;\n    _classCallCheck(this, LineToLineMappedSource);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LineToLineMappedSource).call(this));\n    _this._value = value;\n    _this._name = name;\n    _this._originalSource = originalSource;\n    return _this;\n  }\n  _createClass(LineToLineMappedSource, [{\n    key: \"source\",\n    value: function source() {\n      return this._value;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var value = this._value;\n      var name = this._name;\n      var lines = value.split(\"\\n\");\n      var node = new SourceNode(null, null, null, lines.map(function (line, idx) {\n        return new SourceNode(idx + 1, 0, name, line + (idx != lines.length - 1 ? \"\\n\" : \"\"));\n      }));\n      node.setSourceContent(name, this._originalSource);\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      return new SourceListMap(this._value, this._name, this._originalSource);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this._value);\n      hash.update(this._originalSource);\n    }\n  }]);\n  return LineToLineMappedSource;\n}(Source);\nrequire(\"./SourceAndMapMixin\")(LineToLineMappedSource.prototype);\nmodule.exports = LineToLineMappedSource;","map":null,"metadata":{},"sourceType":"script"}