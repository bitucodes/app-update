{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseFeed = exports.FeedHandler = void 0;\nvar domhandler_1 = __importDefault(require(\"domhandler\"));\nvar DomUtils = __importStar(require(\"domutils\"));\nvar Parser_1 = require(\"./Parser\");\nvar FeedItemMediaMedium;\n(function (FeedItemMediaMedium) {\n  FeedItemMediaMedium[FeedItemMediaMedium[\"image\"] = 0] = \"image\";\n  FeedItemMediaMedium[FeedItemMediaMedium[\"audio\"] = 1] = \"audio\";\n  FeedItemMediaMedium[FeedItemMediaMedium[\"video\"] = 2] = \"video\";\n  FeedItemMediaMedium[FeedItemMediaMedium[\"document\"] = 3] = \"document\";\n  FeedItemMediaMedium[FeedItemMediaMedium[\"executable\"] = 4] = \"executable\";\n})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));\nvar FeedItemMediaExpression;\n(function (FeedItemMediaExpression) {\n  FeedItemMediaExpression[FeedItemMediaExpression[\"sample\"] = 0] = \"sample\";\n  FeedItemMediaExpression[FeedItemMediaExpression[\"full\"] = 1] = \"full\";\n  FeedItemMediaExpression[FeedItemMediaExpression[\"nonstop\"] = 2] = \"nonstop\";\n})(FeedItemMediaExpression || (FeedItemMediaExpression = {}));\n// TODO: Consume data as it is coming in\nvar FeedHandler = /** @class */function (_super) {\n  __extends(FeedHandler, _super);\n  /**\n   *\n   * @param callback\n   * @param options\n   */\n  function FeedHandler(callback, options) {\n    var _this = this;\n    if (typeof callback === \"object\") {\n      callback = undefined;\n      options = callback;\n    }\n    _this = _super.call(this, callback, options) || this;\n    return _this;\n  }\n  FeedHandler.prototype.onend = function () {\n    var _a, _b;\n    var feedRoot = getOneElement(isValidFeed, this.dom);\n    if (!feedRoot) {\n      this.handleCallback(new Error(\"couldn't find root of feed\"));\n      return;\n    }\n    var feed = {};\n    if (feedRoot.name === \"feed\") {\n      var childs = feedRoot.children;\n      feed.type = \"atom\";\n      addConditionally(feed, \"id\", \"id\", childs);\n      addConditionally(feed, \"title\", \"title\", childs);\n      var href = getAttribute(\"href\", getOneElement(\"link\", childs));\n      if (href) {\n        feed.link = href;\n      }\n      addConditionally(feed, \"description\", \"subtitle\", childs);\n      var updated = fetch(\"updated\", childs);\n      if (updated) {\n        feed.updated = new Date(updated);\n      }\n      addConditionally(feed, \"author\", \"email\", childs, true);\n      feed.items = getElements(\"entry\", childs).map(function (item) {\n        var entry = {};\n        var children = item.children;\n        addConditionally(entry, \"id\", \"id\", children);\n        addConditionally(entry, \"title\", \"title\", children);\n        var href = getAttribute(\"href\", getOneElement(\"link\", children));\n        if (href) {\n          entry.link = href;\n        }\n        var description = fetch(\"summary\", children) || fetch(\"content\", children);\n        if (description) {\n          entry.description = description;\n        }\n        var pubDate = fetch(\"updated\", children);\n        if (pubDate) {\n          entry.pubDate = new Date(pubDate);\n        }\n        entry.media = getMediaElements(children);\n        return entry;\n      });\n    } else {\n      var childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n      feed.type = feedRoot.name.substr(0, 3);\n      feed.id = \"\";\n      addConditionally(feed, \"title\", \"title\", childs);\n      addConditionally(feed, \"link\", \"link\", childs);\n      addConditionally(feed, \"description\", \"description\", childs);\n      var updated = fetch(\"lastBuildDate\", childs);\n      if (updated) {\n        feed.updated = new Date(updated);\n      }\n      addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n      feed.items = getElements(\"item\", feedRoot.children).map(function (item) {\n        var entry = {};\n        var children = item.children;\n        addConditionally(entry, \"id\", \"guid\", children);\n        addConditionally(entry, \"title\", \"title\", children);\n        addConditionally(entry, \"link\", \"link\", children);\n        addConditionally(entry, \"description\", \"description\", children);\n        var pubDate = fetch(\"pubDate\", children);\n        if (pubDate) entry.pubDate = new Date(pubDate);\n        entry.media = getMediaElements(children);\n        return entry;\n      });\n    }\n    this.feed = feed;\n    this.handleCallback(null);\n  };\n  return FeedHandler;\n}(domhandler_1.default);\nexports.FeedHandler = FeedHandler;\nfunction getMediaElements(where) {\n  return getElements(\"media:content\", where).map(function (elem) {\n    var media = {\n      medium: elem.attribs.medium,\n      isDefault: !!elem.attribs.isDefault\n    };\n    if (elem.attribs.url) {\n      media.url = elem.attribs.url;\n    }\n    if (elem.attribs.fileSize) {\n      media.fileSize = parseInt(elem.attribs.fileSize, 10);\n    }\n    if (elem.attribs.type) {\n      media.type = elem.attribs.type;\n    }\n    if (elem.attribs.expression) {\n      media.expression = elem.attribs.expression;\n    }\n    if (elem.attribs.bitrate) {\n      media.bitrate = parseInt(elem.attribs.bitrate, 10);\n    }\n    if (elem.attribs.framerate) {\n      media.framerate = parseInt(elem.attribs.framerate, 10);\n    }\n    if (elem.attribs.samplingrate) {\n      media.samplingrate = parseInt(elem.attribs.samplingrate, 10);\n    }\n    if (elem.attribs.channels) {\n      media.channels = parseInt(elem.attribs.channels, 10);\n    }\n    if (elem.attribs.duration) {\n      media.duration = parseInt(elem.attribs.duration, 10);\n    }\n    if (elem.attribs.height) {\n      media.height = parseInt(elem.attribs.height, 10);\n    }\n    if (elem.attribs.width) {\n      media.width = parseInt(elem.attribs.width, 10);\n    }\n    if (elem.attribs.lang) {\n      media.lang = elem.attribs.lang;\n    }\n    return media;\n  });\n}\nfunction getElements(tagName, where) {\n  return DomUtils.getElementsByTagName(tagName, where, true);\n}\nfunction getOneElement(tagName, node) {\n  return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];\n}\nfunction fetch(tagName, where, recurse) {\n  if (recurse === void 0) {\n    recurse = false;\n  }\n  return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();\n}\nfunction getAttribute(name, elem) {\n  if (!elem) {\n    return null;\n  }\n  var attribs = elem.attribs;\n  return attribs[name];\n}\nfunction addConditionally(obj, prop, what, where, recurse) {\n  if (recurse === void 0) {\n    recurse = false;\n  }\n  var tmp = fetch(what, where, recurse);\n  if (tmp) obj[prop] = tmp;\n}\nfunction isValidFeed(value) {\n  return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this option, you should set `xmlMode` to `true`.\n */\nfunction parseFeed(feed, options) {\n  if (options === void 0) {\n    options = {\n      xmlMode: true\n    };\n  }\n  var handler = new FeedHandler(options);\n  new Parser_1.Parser(handler, options).end(feed);\n  return handler.feed;\n}\nexports.parseFeed = parseFeed;","map":null,"metadata":{},"sourceType":"script"}