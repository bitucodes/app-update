{"ast":null,"code":"'use strict';\n\nvar _taggedTemplateLiteral = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nvar _templateObject, _templateObject2;\nvar BB = require('bluebird');\nvar contentPath = require('./path');\nvar fs = require('graceful-fs');\nvar PassThrough = require('stream').PassThrough;\nvar pipe = BB.promisify(require('mississippi').pipe);\nvar ssri = require('ssri');\nvar Y = require('../util/y.js');\nBB.promisifyAll(fs);\nmodule.exports = read;\nfunction read(cache, integrity, opts) {\n  opts = opts || {};\n  return pickContentSri(cache, integrity).then(function (content) {\n    var sri = content.sri;\n    var cpath = contentPath(cache, sri);\n    return fs.readFileAsync(cpath, null).then(function (data) {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length);\n      } else if (ssri.checkData(data, sri)) {\n        return data;\n      } else {\n        throw integrityError(sri, cpath);\n      }\n    });\n  });\n}\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity, opts) {\n  opts = opts || {};\n  var stream = new PassThrough();\n  pickContentSri(cache, integrity).then(function (content) {\n    var sri = content.sri;\n    return pipe(fs.createReadStream(contentPath(cache, sri)), ssri.integrityStream({\n      integrity: sri,\n      size: opts.size\n    }), stream);\n  }).catch(function (err) {\n    stream.emit('error', err);\n  });\n  return stream;\n}\nif (fs.copyFile) {\n  module.exports.copy = copy;\n}\nfunction copy(cache, integrity, dest, opts) {\n  opts = opts || {};\n  return pickContentSri(cache, integrity).then(function (content) {\n    var sri = content.sri;\n    var cpath = contentPath(cache, sri);\n    return fs.copyFileAsync(cpath, dest).then(function () {\n      return content.size;\n    });\n  });\n}\nmodule.exports.hasContent = hasContent;\nfunction hasContent(cache, integrity) {\n  if (!integrity) {\n    return BB.resolve(false);\n  }\n  return pickContentSri(cache, integrity).catch({\n    code: 'ENOENT'\n  }, function () {\n    return false;\n  }).catch({\n    code: 'EPERM'\n  }, function (err) {\n    if (process.platform !== 'win32') {\n      throw err;\n    } else {\n      return false;\n    }\n  }).then(function (content) {\n    if (!content.sri) return false;\n    return {\n      sri: content.sri,\n      size: content.stat.size\n    };\n  });\n}\nmodule.exports._pickContentSri = pickContentSri;\nfunction pickContentSri(cache, integrity) {\n  var sri = ssri.parse(integrity);\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  var algo = sri.pickAlgorithm();\n  var digests = sri[algo];\n  if (digests.length <= 1) {\n    var cpath = contentPath(cache, digests[0]);\n    return fs.lstatAsync(cpath).then(function (stat) {\n      return {\n        sri: digests[0],\n        stat: stat\n      };\n    });\n  } else {\n    return BB.any(sri[sri.pickAlgorithm()].map(function (meta) {\n      return pickContentSri(cache, meta);\n    })).catch(function (err) {\n      if ([].some.call(err, function (e) {\n        return e.code === 'ENOENT';\n      })) {\n        throw Object.assign(new Error('No matching content found for ' + sri.toString()), {\n          code: 'ENOENT'\n        });\n      } else {\n        throw err[0];\n      }\n    });\n  }\n}\nfunction sizeError(expected, found) {\n  var err = new Error(Y(_templateObject || (_templateObject = _taggedTemplateLiteral([\"Bad data size: expected inserted data to be \", \" bytes, but got \", \" instead\"])), expected, found));\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  var err = new Error(Y(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Integrity verification failed for \", \" (\", \")\"])), sri, path));\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":null,"metadata":{},"sourceType":"script"}