{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/IgnorePlugin.json\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\nvar IgnorePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {object} options IgnorePlugin options\n   * @param {RegExp} options.resourceRegExp - A RegExp to test the request against\n   * @param {RegExp} options.contextRegExp - A RegExp to test the context (directory) against\n   * @param {function(string): boolean=} options.checkResource - A filter function for resource\n   * @param {function(string): boolean=} options.checkContext - A filter function for context\n   */\n  function IgnorePlugin(options) {\n    _classCallCheck(this, IgnorePlugin);\n    // TODO webpack 5 remove this compat-layer\n    if (arguments.length > 1 || options instanceof RegExp) {\n      options = {\n        resourceRegExp: arguments[0],\n        contextRegExp: arguments[1]\n      };\n    }\n    validateOptions(schema, options, \"IgnorePlugin\");\n    this.options = options;\n\n    /** @private @type {Function} */\n    this.checkIgnore = this.checkIgnore.bind(this);\n  }\n\n  /**\n   * @param {string} resource resource\n   * @returns {boolean} returns true if a \"resourceRegExp\" exists\n   * and the resource given matches the regexp.\n   */\n  _createClass(IgnorePlugin, [{\n    key: \"checkResource\",\n    value: function checkResource(resource) {\n      if (this.options.checkResource) {\n        return this.options.checkResource(resource);\n      }\n      if (!this.options.resourceRegExp) {\n        return false;\n      }\n      return this.options.resourceRegExp.test(resource);\n    }\n    /**\n     * @param {string} context context\n     * @returns {boolean} returns true if \"contextRegExp\" does not exist\n     * or if context matches the given regexp.\n     */\n  }, {\n    key: \"checkContext\",\n    value: function checkContext(context) {\n      if (this.options.checkContext) {\n        return this.options.checkContext(context);\n      }\n      if (!this.options.contextRegExp) {\n        return true;\n      }\n      return this.options.contextRegExp.test(context);\n    }\n    /**\n     * Note that if \"contextRegExp\" is given, both the \"resourceRegExp\"\n     * and \"contextRegExp\" have to match.\n     *\n     * @param {TODO} result result\n     * @returns {boolean} returns true if result should be ignored\n     */\n  }, {\n    key: \"checkResult\",\n    value: function checkResult(result) {\n      if (!result) {\n        return true;\n      }\n      return this.checkResource(result.request) && this.checkContext(result.context);\n    }\n    /**\n     * @param {TODO} result result\n     * @returns {TODO|null} returns result or null if result should be ignored\n     */\n  }, {\n    key: \"checkIgnore\",\n    value: function checkIgnore(result) {\n      // check if result is ignored\n      if (this.checkResult(result)) {\n        return null;\n      }\n      return result;\n    }\n    /**\n     * @param {Compiler} compiler Webpack Compiler\n     * @returns {void}\n     */\n  }, {\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.normalModuleFactory.tap(\"IgnorePlugin\", function (nmf) {\n        nmf.hooks.beforeResolve.tap(\"IgnorePlugin\", _this.checkIgnore);\n      });\n      compiler.hooks.contextModuleFactory.tap(\"IgnorePlugin\", function (cmf) {\n        cmf.hooks.beforeResolve.tap(\"IgnorePlugin\", _this.checkIgnore);\n      });\n    }\n  }]);\n  return IgnorePlugin;\n}();\nmodule.exports = IgnorePlugin;","map":null,"metadata":{},"sourceType":"script"}