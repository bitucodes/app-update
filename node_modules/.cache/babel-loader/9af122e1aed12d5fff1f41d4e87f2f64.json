{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar Source = require(\"./Source\");\nvar ConcatSource = /*#__PURE__*/function (_Source) {\n  _inherits(ConcatSource, _Source);\n  function ConcatSource() {\n    var _this;\n    _classCallCheck(this, ConcatSource);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConcatSource).call(this));\n    _this.children = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var item = arguments[i];\n      if (item instanceof ConcatSource) {\n        var children = item.children;\n        for (var j = 0; j < children.length; j++) {\n          _this.children.push(children[j]);\n        }\n      } else {\n        _this.children.push(item);\n      }\n    }\n    return _this;\n  }\n  _createClass(ConcatSource, [{\n    key: \"add\",\n    value: function add(item) {\n      if (item instanceof ConcatSource) {\n        var children = item.children;\n        for (var j = 0; j < children.length; j++) {\n          this.children.push(children[j]);\n        }\n      } else {\n        this.children.push(item);\n      }\n    }\n  }, {\n    key: \"source\",\n    value: function source() {\n      var source = \"\";\n      var children = this.children;\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        source += typeof child === \"string\" ? child : child.source();\n      }\n      return source;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      var size = 0;\n      var children = this.children;\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        size += typeof child === \"string\" ? child.length : child.size();\n      }\n      return size;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var node = new SourceNode(null, null, null, this.children.map(function (item) {\n        return typeof item === \"string\" ? item : item.node(options);\n      }));\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      var map = new SourceListMap();\n      var children = this.children;\n      for (var i = 0; i < children.length; i++) {\n        var item = children[i];\n        if (typeof item === \"string\") map.add(item);else map.add(item.listMap(options));\n      }\n      return map;\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var children = this.children;\n      for (var i = 0; i < children.length; i++) {\n        var item = children[i];\n        if (typeof item === \"string\") hash.update(item);else item.updateHash(hash);\n      }\n    }\n  }]);\n  return ConcatSource;\n}(Source);\nrequire(\"./SourceAndMapMixin\")(ConcatSource.prototype);\nmodule.exports = ConcatSource;","map":null,"metadata":{},"sourceType":"script"}