{"ast":null,"code":"var extractImportUrlAndMedia = require('./extract-import-url-and-media');\nvar restoreImport = require('./restore-import');\nvar rewriteUrl = require('./rewrite-url');\nvar Token = require('../tokenizer/token');\nvar isImport = require('../utils/is-import');\nvar SOURCE_MAP_COMMENT_PATTERN = /^\\/\\*# sourceMappingURL=(\\S+) \\*\\/$/;\nfunction rebase(tokens, rebaseAll, validator, rebaseConfig) {\n  return rebaseAll ? rebaseEverything(tokens, validator, rebaseConfig) : rebaseAtRules(tokens, validator, rebaseConfig);\n}\nfunction rebaseEverything(tokens, validator, rebaseConfig) {\n  var token;\n  var i, l;\n  for (i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    switch (token[0]) {\n      case Token.AT_RULE:\n        rebaseAtRule(token, validator, rebaseConfig);\n        break;\n      case Token.AT_RULE_BLOCK:\n        rebaseProperties(token[2], validator, rebaseConfig);\n        break;\n      case Token.COMMENT:\n        rebaseSourceMapComment(token, rebaseConfig);\n        break;\n      case Token.NESTED_BLOCK:\n        rebaseEverything(token[2], validator, rebaseConfig);\n        break;\n      case Token.RULE:\n        rebaseProperties(token[2], validator, rebaseConfig);\n        break;\n    }\n  }\n  return tokens;\n}\nfunction rebaseAtRules(tokens, validator, rebaseConfig) {\n  var token;\n  var i, l;\n  for (i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    switch (token[0]) {\n      case Token.AT_RULE:\n        rebaseAtRule(token, validator, rebaseConfig);\n        break;\n    }\n  }\n  return tokens;\n}\nfunction rebaseAtRule(token, validator, rebaseConfig) {\n  if (!isImport(token[1])) {\n    return;\n  }\n  var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);\n  var newUrl = rewriteUrl(uriAndMediaQuery[0], rebaseConfig);\n  var mediaQuery = uriAndMediaQuery[1];\n  token[1] = restoreImport(newUrl, mediaQuery);\n}\nfunction rebaseSourceMapComment(token, rebaseConfig) {\n  var matches = SOURCE_MAP_COMMENT_PATTERN.exec(token[1]);\n  if (matches && matches[1].indexOf('data:') === -1) {\n    token[1] = token[1].replace(matches[1], rewriteUrl(matches[1], rebaseConfig, true));\n  }\n}\nfunction rebaseProperties(properties, validator, rebaseConfig) {\n  var property;\n  var value;\n  var i, l;\n  var j, m;\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    for (j = 2 /* 0 is Token.PROPERTY, 1 is name */, m = property.length; j < m; j++) {\n      value = property[j][1];\n      if (validator.isUrl(value)) {\n        property[j][1] = rewriteUrl(value, rebaseConfig);\n      }\n    }\n  }\n}\nmodule.exports = rebase;","map":null,"metadata":{},"sourceType":"script"}