{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\nvar LoaderOptionsPlugin = /*#__PURE__*/function () {\n  function LoaderOptionsPlugin(options) {\n    _classCallCheck(this, LoaderOptionsPlugin);\n    validateOptions(schema, options || {}, \"Loader Options Plugin\");\n    if (typeof options !== \"object\") options = {};\n    if (!options.test) {\n      options.test = {\n        test: function test() {\n          return true;\n        }\n      };\n    }\n    this.options = options;\n  }\n  _createClass(LoaderOptionsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", function (compilation) {\n        compilation.hooks.normalModuleLoader.tap(\"LoaderOptionsPlugin\", function (context, module) {\n          var resource = module.resource;\n          if (!resource) return;\n          var i = resource.indexOf(\"?\");\n          if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {\n            for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n              var key = _Object$keys[_i];\n              if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n                continue;\n              }\n              context[key] = options[key];\n            }\n          }\n        });\n      });\n    }\n  }]);\n  return LoaderOptionsPlugin;\n}();\nmodule.exports = LoaderOptionsPlugin;","map":null,"metadata":{},"sourceType":"script"}