{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nmodule.exports = /*#__PURE__*/function () {\n  function RuntimeChunkPlugin(options) {\n    _classCallCheck(this, RuntimeChunkPlugin);\n    this.options = Object.assign({\n      name: function name(entrypoint) {\n        return \"runtime~\".concat(entrypoint.name);\n      }\n    }, options);\n  }\n  _createClass(RuntimeChunkPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", function () {\n          var _iterator = _createForOfIteratorHelper(compilation.entrypoints.values()),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var entrypoint = _step.value;\n              var chunk = entrypoint.getRuntimeChunk();\n              var name = _this.options.name;\n              if (typeof name === \"function\") {\n                name = name(entrypoint);\n              }\n              if (chunk.getNumberOfModules() > 0 || !chunk.preventIntegration || chunk.name !== name) {\n                var newChunk = compilation.addChunk(name);\n                newChunk.preventIntegration = true;\n                entrypoint.unshiftChunk(newChunk);\n                newChunk.addGroup(entrypoint);\n                entrypoint.setRuntimeChunk(newChunk);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n  return RuntimeChunkPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}