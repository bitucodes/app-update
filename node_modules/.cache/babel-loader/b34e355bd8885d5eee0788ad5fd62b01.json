{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nvar Template = require(\"./Template\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/BannerPlugin.json\");\nvar wrapComment = function wrapComment(str) {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \"), \"\\n */\");\n};\nvar BannerPlugin = /*#__PURE__*/function () {\n  function BannerPlugin(options) {\n    _classCallCheck(this, BannerPlugin);\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n    validateOptions(schema, options, \"Banner Plugin\");\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n    this.options = options || {};\n    if (typeof options.banner === \"function\") {\n      var getBanner = this.options.banner;\n      this.banner = this.options.raw ? getBanner : function (data) {\n        return wrapComment(getBanner(data));\n      };\n    } else {\n      var banner = this.options.raw ? this.options.banner : wrapComment(this.options.banner);\n      this.banner = function () {\n        return banner;\n      };\n    }\n  }\n  _createClass(BannerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var banner = this.banner;\n      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n      compiler.hooks.compilation.tap(\"BannerPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", function (chunks) {\n          var _iterator = _createForOfIteratorHelper(chunks),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n              if (options.entryOnly && !chunk.canBeInitial()) {\n                continue;\n              }\n              var _iterator2 = _createForOfIteratorHelper(chunk.files),\n                _step2;\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var file = _step2.value;\n                  if (!matchObject(file)) {\n                    continue;\n                  }\n                  var basename = void 0;\n                  var query = \"\";\n                  var filename = file;\n                  var hash = compilation.hash;\n                  var querySplit = filename.indexOf(\"?\");\n                  if (querySplit >= 0) {\n                    query = filename.substr(querySplit);\n                    filename = filename.substr(0, querySplit);\n                  }\n                  var lastSlashIndex = filename.lastIndexOf(\"/\");\n                  if (lastSlashIndex === -1) {\n                    basename = filename;\n                  } else {\n                    basename = filename.substr(lastSlashIndex + 1);\n                  }\n                  var data = {\n                    hash: hash,\n                    chunk: chunk,\n                    filename: filename,\n                    basename: basename,\n                    query: query\n                  };\n                  var comment = compilation.getPath(banner(data), data);\n                  compilation.assets[file] = new ConcatSource(comment, \"\\n\", compilation.assets[file]);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n  return BannerPlugin;\n}();\nmodule.exports = BannerPlugin;","map":null,"metadata":{},"sourceType":"script"}