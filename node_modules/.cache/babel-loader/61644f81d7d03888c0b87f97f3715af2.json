{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar parseJson = require(\"json-parse-better-errors\");\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nvar ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nvar DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nvar NullFactory = require(\"./NullFactory\");\nvar makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nvar WebpackError = require(\"./WebpackError\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\nvar DllReferencePlugin = /*#__PURE__*/function () {\n  function DllReferencePlugin(options) {\n    _classCallCheck(this, DllReferencePlugin);\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n  _createClass(DllReferencePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n        compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n      });\n      compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", function (params, callback) {\n        var manifest = _this.options.manifest;\n        if (typeof manifest === \"string\") {\n          params.compilationDependencies.add(manifest);\n          compiler.inputFileSystem.readFile(manifest, function (err, result) {\n            if (err) return callback(err);\n            // Catch errors parsing the manifest so that blank\n            // or malformed manifest files don't kill the process.\n            try {\n              params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n            } catch (e) {\n              // Store the error in the params so that it can\n              // be added as a compilation error later on.\n              var manifestPath = makePathsRelative(compiler.options.context, manifest);\n              params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n            }\n            return callback();\n          });\n        } else {\n          return callback();\n        }\n      });\n      compiler.hooks.compile.tap(\"DllReferencePlugin\", function (params) {\n        var manifest = _this.options.manifest;\n        if (typeof manifest === \"string\") {\n          // If there was an error parsing the manifest\n          // file, exit now because the error will be added\n          // as a compilation error in the \"compilation\" hook.\n          if (params[\"dll reference parse error \" + manifest]) {\n            return;\n          }\n          manifest = params[\"dll reference \" + manifest];\n        }\n        var name = _this.options.name || manifest.name;\n        var sourceType = _this.options.sourceType || manifest && manifest.type || \"var\";\n        var externals = {};\n        var source = \"dll-reference \" + name;\n        externals[source] = name;\n        var normalModuleFactory = params.normalModuleFactory;\n        new ExternalModuleFactoryPlugin(sourceType, externals).apply(normalModuleFactory);\n        new DelegatedModuleFactoryPlugin({\n          source: source,\n          type: _this.options.type,\n          scope: _this.options.scope,\n          context: _this.options.context || compiler.options.context,\n          content: _this.options.content || manifest.content,\n          extensions: _this.options.extensions\n        }).apply(normalModuleFactory);\n      });\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, params) {\n        var manifest = _this.options.manifest;\n        if (typeof manifest === \"string\") {\n          // If there was an error parsing the manifest file, add the\n          // error as a compilation error to make the compilation fail.\n          var e = params[\"dll reference parse error \" + manifest];\n          if (e) {\n            compilation.errors.push(e);\n          }\n        }\n      });\n    }\n  }]);\n  return DllReferencePlugin;\n}();\nvar DllManifestError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(DllManifestError, _WebpackError);\n  function DllManifestError(filename, message) {\n    var _this2;\n    _classCallCheck(this, DllManifestError);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DllManifestError).call(this));\n    _this2.name = \"DllManifestError\";\n    _this2.message = \"Dll manifest \".concat(filename, \"\\n\").concat(message);\n    Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this2)), _this2.constructor);\n    return _this2;\n  }\n  return DllManifestError;\n}(WebpackError);\nmodule.exports = DllReferencePlugin;","map":null,"metadata":{},"sourceType":"script"}