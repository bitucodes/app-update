{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar t = require(\"@webassemblyjs/ast\");\nvar _require = require(\"@webassemblyjs/wasm-parser\"),\n  decode = _require.decode;\nvar _require2 = require(\"@webassemblyjs/helper-module-context\"),\n  moduleContextFromModuleAST = _require2.moduleContextFromModuleAST;\nvar _require3 = require(\"tapable\"),\n  Tapable = _require3.Tapable;\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n\nvar JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nvar getJsIncompatibleType = function getJsIncompatibleType(signature) {\n  var _iterator = _createForOfIteratorHelper(signature.params),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var param = _step.value;\n      if (!JS_COMPAT_TYPES.has(param.valtype)) {\n        return \"\".concat(param.valtype, \" as parameter\");\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(signature.results),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var type = _step2.value;\n      if (!JS_COMPAT_TYPES.has(type)) return \"\".concat(type, \" as result\");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return null;\n};\n\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nvar getJsIncompatibleTypeOfFuncSignature = function getJsIncompatibleTypeOfFuncSignature(signature) {\n  var _iterator3 = _createForOfIteratorHelper(signature.args),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var param = _step3.value;\n      if (!JS_COMPAT_TYPES.has(param)) {\n        return \"\".concat(param, \" as parameter\");\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var _iterator4 = _createForOfIteratorHelper(signature.result),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var type = _step4.value;\n      if (!JS_COMPAT_TYPES.has(type)) return \"\".concat(type, \" as result\");\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return null;\n};\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\nvar WebAssemblyParser = /*#__PURE__*/function (_Tapable) {\n  _inherits(WebAssemblyParser, _Tapable);\n  function WebAssemblyParser(options) {\n    var _this;\n    _classCallCheck(this, WebAssemblyParser);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAssemblyParser).call(this));\n    _this.hooks = {};\n    _this.options = options;\n    return _this;\n  }\n  _createClass(WebAssemblyParser, [{\n    key: \"parse\",\n    value: function parse(binary, state) {\n      // flag it as ESM\n      state.module.buildMeta.exportsType = \"namespace\";\n\n      // parse it\n      var program = decode(binary, decoderOpts);\n      var module = program.body[0];\n      var moduleContext = moduleContextFromModuleAST(module);\n\n      // extract imports and exports\n      var exports = state.module.buildMeta.providedExports = [];\n      var jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = [];\n      var importedGlobals = [];\n      t.traverse(module, {\n        ModuleExport: function ModuleExport(_ref) {\n          var node = _ref.node;\n          var descriptor = node.descr;\n          if (descriptor.exportType === \"Func\") {\n            var funcidx = descriptor.id.value;\n\n            /** @type {t.FuncSignature} */\n            var funcSignature = moduleContext.getFunction(funcidx);\n            var incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n            if (incompatibleType) {\n              jsIncompatibleExports[node.name] = incompatibleType;\n            }\n          }\n          exports.push(node.name);\n          if (node.descr && node.descr.exportType === \"Global\") {\n            var refNode = importedGlobals[node.descr.id.value];\n            if (refNode) {\n              var dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name);\n              state.module.addDependency(dep);\n            }\n          }\n        },\n        Global: function Global(_ref2) {\n          var node = _ref2.node;\n          var init = node.init[0];\n          var importNode = null;\n          if (init.id === \"get_global\") {\n            var globalIdx = init.args[0].value;\n            if (globalIdx < importedGlobals.length) {\n              importNode = importedGlobals[globalIdx];\n            }\n          }\n          importedGlobals.push(importNode);\n        },\n        ModuleImport: function ModuleImport(_ref3) {\n          var node = _ref3.node;\n          /** @type {false | string} */\n          var onlyDirectImport = false;\n          if (t.isMemory(node.descr) === true) {\n            onlyDirectImport = \"Memory\";\n          } else if (t.isTable(node.descr) === true) {\n            onlyDirectImport = \"Table\";\n          } else if (t.isFuncImportDescr(node.descr) === true) {\n            var incompatibleType = getJsIncompatibleType(node.descr.signature);\n            if (incompatibleType) {\n              onlyDirectImport = \"Non-JS-compatible Func Sigurature (\".concat(incompatibleType, \")\");\n            }\n          } else if (t.isGlobalType(node.descr) === true) {\n            var type = node.descr.valtype;\n            if (!JS_COMPAT_TYPES.has(type)) {\n              onlyDirectImport = \"Non-JS-compatible Global Type (\".concat(type, \")\");\n            }\n          }\n          var dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n          state.module.addDependency(dep);\n          if (t.isGlobalType(node.descr)) {\n            importedGlobals.push(node);\n          }\n        }\n      });\n      return state;\n    }\n  }]);\n  return WebAssemblyParser;\n}(Tapable);\nmodule.exports = WebAssemblyParser;","map":null,"metadata":{},"sourceType":"script"}