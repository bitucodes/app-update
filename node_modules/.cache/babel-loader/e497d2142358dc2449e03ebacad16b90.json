{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\nvar AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\nvar NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\nmodule.exports = /*#__PURE__*/function () {\n  function SizeLimitsPlugin(options) {\n    _classCallCheck(this, SizeLimitsPlugin);\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n  _createClass(SizeLimitsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var entrypointSizeLimit = this.maxEntrypointSize;\n      var assetSizeLimit = this.maxAssetSize;\n      var hints = this.hints;\n      var assetFilter = this.assetFilter || function (asset) {\n        return !asset.endsWith(\".map\");\n      };\n      compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", function (compilation) {\n        var warnings = [];\n        var getEntrypointSize = function getEntrypointSize(entrypoint) {\n          return entrypoint.getFiles().reduce(function (currentSize, file) {\n            if (assetFilter(file) && compilation.assets[file]) {\n              return currentSize + compilation.assets[file].size();\n            }\n            return currentSize;\n          }, 0);\n        };\n        var assetsOverSizeLimit = [];\n        for (var _i = 0, _Object$keys = Object.keys(compilation.assets); _i < _Object$keys.length; _i++) {\n          var assetName = _Object$keys[_i];\n          if (!assetFilter(assetName)) {\n            continue;\n          }\n          var asset = compilation.assets[assetName];\n          var size = asset.size();\n          if (size > assetSizeLimit) {\n            assetsOverSizeLimit.push({\n              name: assetName,\n              size: size\n            });\n            asset.isOverSizeLimit = true;\n          }\n        }\n        var entrypointsOverLimit = [];\n        var _iterator = _createForOfIteratorHelper(compilation.entrypoints),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var pair = _step.value;\n            var name = pair[0];\n            var entry = pair[1];\n            var _size = getEntrypointSize(entry);\n            if (_size > entrypointSizeLimit) {\n              entrypointsOverLimit.push({\n                name: name,\n                size: _size,\n                files: entry.getFiles().filter(assetFilter)\n              });\n              entry.isOverSizeLimit = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        if (hints) {\n          // 1. Individual Chunk: Size < 250kb\n          // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n          // 3. No Async Chunks\n          // if !1, then 2, if !2 return\n          if (assetsOverSizeLimit.length > 0) {\n            warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n          }\n          if (entrypointsOverLimit.length > 0) {\n            warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n          }\n          if (warnings.length > 0) {\n            var hasAsyncChunks = compilation.chunks.filter(function (chunk) {\n              return !chunk.canBeInitial();\n            }).length > 0;\n            if (!hasAsyncChunks) {\n              warnings.push(new NoAsyncChunksWarning());\n            }\n            if (hints === \"error\") {\n              var _compilation$errors;\n              (_compilation$errors = compilation.errors).push.apply(_compilation$errors, warnings);\n            } else {\n              var _compilation$warnings;\n              (_compilation$warnings = compilation.warnings).push.apply(_compilation$warnings, warnings);\n            }\n          }\n        }\n      });\n    }\n  }]);\n  return SizeLimitsPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}