{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Generated by CoffeeScript 2.5.1\nvar MixedDeclarationSet, StyleSheet, Styles, terminalWidth;\nStyleSheet = require('./styles/StyleSheet');\nMixedDeclarationSet = require('./styles/rule/MixedDeclarationSet');\nterminalWidth = require('../tools').getCols();\nmodule.exports = Styles = function () {\n  var self;\n  var Styles = /*#__PURE__*/function () {\n    function Styles() {\n      _classCallCheck(this, Styles);\n      this._defaultStyles = new StyleSheet();\n      this._userStyles = new StyleSheet();\n      this._setDefaultStyles();\n    }\n    _createClass(Styles, [{\n      key: \"_setDefaultStyles\",\n      value: function _setDefaultStyles() {\n        this._defaultStyles.setRule(self.defaultRules);\n      }\n    }, {\n      key: \"setRule\",\n      value: function setRule(selector, rules) {\n        this._userStyles.setRule.apply(this._userStyles, arguments);\n        return this;\n      }\n    }, {\n      key: \"getStyleFor\",\n      value: function getStyleFor(el) {\n        var styles;\n        styles = el.styles;\n        if (styles == null) {\n          el.styles = styles = this._getComputedStyleFor(el);\n        }\n        return styles;\n      }\n    }, {\n      key: \"_getRawStyleFor\",\n      value: function _getRawStyleFor(el) {\n        var def, user;\n        def = this._defaultStyles.getRulesFor(el);\n        user = this._userStyles.getRulesFor(el);\n        return MixedDeclarationSet.mix(def, user).toObject();\n      }\n    }, {\n      key: \"_getComputedStyleFor\",\n      value: function _getComputedStyleFor(el) {\n        var decs, parent, prop, ref, val;\n        decs = {};\n        parent = el.parent;\n        ref = this._getRawStyleFor(el);\n        for (prop in ref) {\n          val = ref[prop];\n          if (val !== 'inherit') {\n            decs[prop] = val;\n          } else {\n            throw Error(\"Inherited styles are not supported yet.\");\n          }\n        }\n        return decs;\n      }\n    }]);\n    return Styles;\n  }();\n  ;\n  self = Styles;\n  Styles.defaultRules = {\n    '*': {\n      display: 'inline'\n    },\n    'body': {\n      background: 'none',\n      color: 'white',\n      display: 'block',\n      width: terminalWidth + ' !important'\n    }\n  };\n  return Styles;\n}.call(void 0);","map":null,"metadata":{},"sourceType":"script"}