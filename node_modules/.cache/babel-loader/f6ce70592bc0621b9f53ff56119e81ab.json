{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); /* eslint-disable\n       no-param-reassign\n     */\n\nvar _crypto = require('crypto');\nvar _crypto2 = _interopRequireDefault(_crypto);\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _sourceMap = require('source-map');\nvar _webpackSources = require('webpack-sources');\nvar _RequestShortener = require('webpack/lib/RequestShortener');\nvar _RequestShortener2 = _interopRequireDefault(_RequestShortener);\nvar _ModuleFilenameHelpers = require('webpack/lib/ModuleFilenameHelpers');\nvar _ModuleFilenameHelpers2 = _interopRequireDefault(_ModuleFilenameHelpers);\nvar _schemaUtils = require('schema-utils');\nvar _schemaUtils2 = _interopRequireDefault(_schemaUtils);\nvar _options = require('./options.json');\nvar _options2 = _interopRequireDefault(_options);\nvar _Runner = require('./uglify/Runner');\nvar _Runner2 = _interopRequireDefault(_Runner);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar warningRegex = /\\[.+:([0-9]+),([0-9]+)\\]/;\nvar UglifyJsPlugin = function () {\n  function UglifyJsPlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, UglifyJsPlugin);\n    (0, _schemaUtils2.default)(_options2.default, options, 'UglifyJs Plugin');\n    var minify = options.minify,\n      _options$uglifyOption = options.uglifyOptions,\n      uglifyOptions = _options$uglifyOption === undefined ? {} : _options$uglifyOption,\n      _options$test = options.test,\n      test = _options$test === undefined ? /\\.js(\\?.*)?$/i : _options$test,\n      _options$warningsFilt = options.warningsFilter,\n      warningsFilter = _options$warningsFilt === undefined ? function () {\n        return true;\n      } : _options$warningsFilt,\n      _options$extractComme = options.extractComments,\n      extractComments = _options$extractComme === undefined ? false : _options$extractComme,\n      _options$sourceMap = options.sourceMap,\n      sourceMap = _options$sourceMap === undefined ? false : _options$sourceMap,\n      _options$cache = options.cache,\n      cache = _options$cache === undefined ? false : _options$cache,\n      _options$cacheKeys = options.cacheKeys,\n      cacheKeys = _options$cacheKeys === undefined ? function (defaultCacheKeys) {\n        return defaultCacheKeys;\n      } : _options$cacheKeys,\n      _options$parallel = options.parallel,\n      parallel = _options$parallel === undefined ? false : _options$parallel,\n      include = options.include,\n      exclude = options.exclude;\n    this.options = {\n      test: test,\n      warningsFilter: warningsFilter,\n      extractComments: extractComments,\n      sourceMap: sourceMap,\n      cache: cache,\n      cacheKeys: cacheKeys,\n      parallel: parallel,\n      include: include,\n      exclude: exclude,\n      minify: minify,\n      uglifyOptions: Object.assign({\n        compress: {\n          inline: 1\n        },\n        output: {\n          comments: extractComments ? false : /^\\**!|@preserve|@license|@cc_on/\n        }\n      }, uglifyOptions)\n    };\n  }\n  _createClass(UglifyJsPlugin, [{\n    key: 'apply',\n    value: function apply(compiler) {\n      var _this = this;\n      var buildModuleFn = function buildModuleFn(moduleArg) {\n        // to get detailed location info about errors\n        moduleArg.useSourceMap = true;\n      };\n      var optimizeFn = function optimizeFn(compilation, chunks, callback) {\n        var runner = new _Runner2.default({\n          cache: _this.options.cache,\n          parallel: _this.options.parallel\n        });\n        var uglifiedAssets = new WeakSet();\n        var tasks = [];\n        chunks.reduce(function (acc, chunk) {\n          return acc.concat(chunk.files || []);\n        }, []).concat(compilation.additionalChunkAssets || []).filter(_ModuleFilenameHelpers2.default.matchObject.bind(null, _this.options)).forEach(function (file) {\n          var inputSourceMap = void 0;\n          var asset = compilation.assets[file];\n          if (uglifiedAssets.has(asset)) {\n            return;\n          }\n          try {\n            var input = void 0;\n            if (_this.options.sourceMap && asset.sourceAndMap) {\n              var _asset$sourceAndMap = asset.sourceAndMap(),\n                source = _asset$sourceAndMap.source,\n                map = _asset$sourceAndMap.map;\n              input = source;\n              if (UglifyJsPlugin.isSourceMap(map)) {\n                inputSourceMap = map;\n              } else {\n                inputSourceMap = map;\n                compilation.warnings.push(new Error(\"\".concat(file, \" contains invalid source map\")));\n              }\n            } else {\n              input = asset.source();\n              inputSourceMap = null;\n            }\n\n            // Handling comment extraction\n            var commentsFile = false;\n            if (_this.options.extractComments) {\n              commentsFile = _this.options.extractComments.filename || \"\".concat(file, \".LICENSE\");\n              if (typeof commentsFile === 'function') {\n                commentsFile = commentsFile(file);\n              }\n            }\n            var task = {\n              file: file,\n              input: input,\n              inputSourceMap: inputSourceMap,\n              commentsFile: commentsFile,\n              extractComments: _this.options.extractComments,\n              uglifyOptions: _this.options.uglifyOptions,\n              minify: _this.options.minify\n            };\n            if (_this.options.cache) {\n              var defaultCacheKeys = {\n                // eslint-disable-next-line global-require\n                'uglify-es': require('uglify-es/package.json').version,\n                // eslint-disable-next-line global-require\n                'uglifyjs-webpack-plugin': require('../package.json').version,\n                'uglifyjs-webpack-plugin-options': _this.options,\n                path: compiler.outputPath ? \"\".concat(compiler.outputPath, \"/\").concat(file) : file,\n                hash: _crypto2.default.createHash('md4').update(input).digest('hex')\n              };\n              task.cacheKeys = _this.options.cacheKeys(defaultCacheKeys, file);\n            }\n            tasks.push(task);\n          } catch (error) {\n            compilation.errors.push(UglifyJsPlugin.buildError(error, file, UglifyJsPlugin.buildSourceMap(inputSourceMap), new _RequestShortener2.default(compiler.context)));\n          }\n        });\n        runner.runTasks(tasks, function (tasksError, results) {\n          if (tasksError) {\n            compilation.errors.push(tasksError);\n            return;\n          }\n          results.forEach(function (data, index) {\n            var _tasks$index = tasks[index],\n              file = _tasks$index.file,\n              input = _tasks$index.input,\n              inputSourceMap = _tasks$index.inputSourceMap,\n              commentsFile = _tasks$index.commentsFile;\n            var error = data.error,\n              map = data.map,\n              code = data.code,\n              warnings = data.warnings,\n              extractedComments = data.extractedComments;\n            var sourceMap = null;\n            if (error || warnings && warnings.length > 0) {\n              sourceMap = UglifyJsPlugin.buildSourceMap(inputSourceMap);\n            }\n\n            // Handling results\n            // Error case: add errors, and go to next file\n            if (error) {\n              compilation.errors.push(UglifyJsPlugin.buildError(error, file, sourceMap, new _RequestShortener2.default(compiler.context)));\n              return;\n            }\n            var outputSource = void 0;\n            if (map) {\n              outputSource = new _webpackSources.SourceMapSource(code, file, JSON.parse(map), input, inputSourceMap);\n            } else {\n              outputSource = new _webpackSources.RawSource(code);\n            }\n\n            // Write extracted comments to commentsFile\n            if (commentsFile && extractedComments.length > 0) {\n              // Add a banner to the original file\n              if (_this.options.extractComments.banner !== false) {\n                var banner = _this.options.extractComments.banner || \"For license information please see \".concat(_path2.default.posix.basename(commentsFile));\n                if (typeof banner === 'function') {\n                  banner = banner(commentsFile);\n                }\n                if (banner) {\n                  outputSource = new _webpackSources.ConcatSource(\"/*! \".concat(banner, \" */\\n\"), outputSource);\n                }\n              }\n              var commentsSource = new _webpackSources.RawSource(\"\".concat(extractedComments.join('\\n\\n'), \"\\n\"));\n              if (commentsFile in compilation.assets) {\n                // commentsFile already exists, append new comments...\n                if (compilation.assets[commentsFile] instanceof _webpackSources.ConcatSource) {\n                  compilation.assets[commentsFile].add('\\n');\n                  compilation.assets[commentsFile].add(commentsSource);\n                } else {\n                  compilation.assets[commentsFile] = new _webpackSources.ConcatSource(compilation.assets[commentsFile], '\\n', commentsSource);\n                }\n              } else {\n                compilation.assets[commentsFile] = commentsSource;\n              }\n            }\n\n            // Updating assets\n            uglifiedAssets.add(compilation.assets[file] = outputSource);\n\n            // Handling warnings\n            if (warnings && warnings.length > 0) {\n              warnings.forEach(function (warning) {\n                var builtWarning = UglifyJsPlugin.buildWarning(warning, file, sourceMap, _this.options.warningsFilter, new _RequestShortener2.default(compiler.context));\n                if (builtWarning) {\n                  compilation.warnings.push(builtWarning);\n                }\n              });\n            }\n          });\n          runner.exit();\n          callback();\n        });\n      };\n\n      /* istanbul ignore if */\n      if (compiler.hooks) {\n        var plugin = {\n          name: 'UglifyJSPlugin'\n        };\n        compiler.hooks.compilation.tap(plugin, function (compilation) {\n          if (_this.options.sourceMap) {\n            compilation.hooks.buildModule.tap(plugin, buildModuleFn);\n          }\n          compilation.hooks.optimizeChunkAssets.tapAsync(plugin, optimizeFn.bind(_this, compilation));\n        });\n      } else {\n        compiler.plugin('compilation', function (compilation) {\n          if (_this.options.sourceMap) {\n            compilation.plugin('build-module', buildModuleFn);\n          }\n          compilation.plugin('optimize-chunk-assets', optimizeFn.bind(_this, compilation));\n        });\n      }\n    }\n  }], [{\n    key: 'isSourceMap',\n    value: function isSourceMap(input) {\n      // All required options for `new SourceMapConsumer(...options)`\n      // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap\n      return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === 'string');\n    }\n  }, {\n    key: 'buildSourceMap',\n    value: function buildSourceMap(inputSourceMap) {\n      if (!inputSourceMap || !UglifyJsPlugin.isSourceMap(inputSourceMap)) {\n        return null;\n      }\n      return new _sourceMap.SourceMapConsumer(inputSourceMap);\n    }\n  }, {\n    key: 'buildError',\n    value: function buildError(err, file, sourceMap, requestShortener) {\n      // Handling error which should have line, col, filename and message\n      if (err.line) {\n        var original = sourceMap && sourceMap.originalPositionFor({\n          line: err.line,\n          column: err.col\n        });\n        if (original && original.source && requestShortener) {\n          return new Error(\"\".concat(file, \" from UglifyJs\\n\").concat(err.message, \" [\").concat(requestShortener.shorten(original.source), \":\").concat(original.line, \",\").concat(original.column, \"][\").concat(file, \":\").concat(err.line, \",\").concat(err.col, \"]\"));\n        }\n        return new Error(\"\".concat(file, \" from UglifyJs\\n\").concat(err.message, \" [\").concat(file, \":\").concat(err.line, \",\").concat(err.col, \"]\"));\n      } else if (err.stack) {\n        return new Error(\"\".concat(file, \" from UglifyJs\\n\").concat(err.stack));\n      }\n      return new Error(\"\".concat(file, \" from UglifyJs\\n\").concat(err.message));\n    }\n  }, {\n    key: 'buildWarning',\n    value: function buildWarning(warning, file, sourceMap, warningsFilter, requestShortener) {\n      if (!file || !sourceMap) {\n        return \"UglifyJs Plugin: \".concat(warning);\n      }\n      var warningMessage = warning;\n      var match = warningRegex.exec(warning);\n      if (match) {\n        var line = +match[1];\n        var column = +match[2];\n        var original = sourceMap.originalPositionFor({\n          line: line,\n          column: column\n        });\n        if (warningsFilter && !warningsFilter(original.source)) {\n          return null;\n        }\n        if (original && original.source && original.source !== file && requestShortener) {\n          warningMessage = \"\".concat(warningMessage.replace(warningRegex, ''), \"[\").concat(requestShortener.shorten(original.source), \":\").concat(original.line, \",\").concat(original.column, \"]\");\n        }\n      }\n      return \"UglifyJs Plugin: \".concat(warningMessage, \" in \").concat(file);\n    }\n  }]);\n  return UglifyJsPlugin;\n}();\nexports.default = UglifyJsPlugin;","map":null,"metadata":{},"sourceType":"script"}