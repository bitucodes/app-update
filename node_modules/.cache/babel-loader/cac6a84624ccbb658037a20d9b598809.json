{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar WebpackError = require(\"../WebpackError\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n\n/**\n * @param {Module} module module to get chains from\n * @param {RequestShortener} requestShortener to make readable identifiers\n * @returns {string[]} all chains to the module\n */\nvar getInitialModuleChains = function getInitialModuleChains(module, requestShortener) {\n  var queue = [{\n    head: module,\n    message: module.readableIdentifier(requestShortener)\n  }];\n  /** @type {Set<string>} */\n  var results = new Set();\n  /** @type {Set<string>} */\n  var incompleteResults = new Set();\n  /** @type {Set<Module>} */\n  var visitedModules = new Set();\n  for (var _i = 0, _queue = queue; _i < _queue.length; _i++) {\n    var chain = _queue[_i];\n    var head = chain.head,\n      message = chain.message;\n    var final = true;\n    /** @type {Set<Module>} */\n    var alreadyReferencedModules = new Set();\n    var _iterator = _createForOfIteratorHelper(head.reasons),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var reason = _step.value;\n        var newHead = reason.module;\n        if (newHead) {\n          if (!newHead.getChunks().some(function (c) {\n            return c.canBeInitial();\n          })) continue;\n          final = false;\n          if (alreadyReferencedModules.has(newHead)) continue;\n          alreadyReferencedModules.add(newHead);\n          var moduleName = newHead.readableIdentifier(requestShortener);\n          var detail = reason.explanation ? \" (\".concat(reason.explanation, \")\") : \"\";\n          var newMessage = \"\".concat(moduleName).concat(detail, \" --> \").concat(message);\n          if (visitedModules.has(newHead)) {\n            incompleteResults.add(\"... --> \".concat(newMessage));\n            continue;\n          }\n          visitedModules.add(newHead);\n          queue.push({\n            head: newHead,\n            message: newMessage\n          });\n        } else {\n          final = false;\n          var _newMessage = reason.explanation ? \"(\".concat(reason.explanation, \") --> \").concat(message) : message;\n          results.add(_newMessage);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (final) {\n      results.add(message);\n    }\n  }\n  var _iterator2 = _createForOfIteratorHelper(incompleteResults),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var result = _step2.value;\n      results.add(result);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return Array.from(results);\n};\nmodule.exports = /*#__PURE__*/function (_WebpackError) {\n  _inherits(WebAssemblyInInitialChunkError, _WebpackError);\n  /**\n   * @param {Module} module WASM module\n   * @param {RequestShortener} requestShortener request shortener\n   */\n  function WebAssemblyInInitialChunkError(module, requestShortener) {\n    var _this;\n    _classCallCheck(this, WebAssemblyInInitialChunkError);\n    var moduleChains = getInitialModuleChains(module, requestShortener);\n    var message = \"WebAssembly module is included in initial chunk.\\nThis is not allowed, because WebAssembly download and compilation must happen asynchronous.\\nAdd an async splitpoint (i. e. import()) somewhere between your entrypoint and the WebAssembly module:\\n\".concat(moduleChains.map(function (s) {\n      return \"* \".concat(s);\n    }).join(\"\\n\"));\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAssemblyInInitialChunkError).call(this, message));\n    _this.name = \"WebAssemblyInInitialChunkError\";\n    _this.hideStack = true;\n    _this.module = module;\n    Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor);\n    return _this;\n  }\n  return WebAssemblyInInitialChunkError;\n}(WebpackError);","map":null,"metadata":{},"sourceType":"script"}