{"ast":null,"code":"'use strict';\n\nvar _taggedTemplateLiteral = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nvar BB = require('bluebird');\nvar contentPath = require('./path');\nvar fixOwner = require('../util/fix-owner');\nvar fs = require('graceful-fs');\nvar moveFile = require('../util/move-file');\nvar PassThrough = require('stream').PassThrough;\nvar path = require('path');\nvar pipe = BB.promisify(require('mississippi').pipe);\nvar rimraf = BB.promisify(require('rimraf'));\nvar ssri = require('ssri');\nvar to = require('mississippi').to;\nvar uniqueFilename = require('unique-filename');\nvar Y = require('../util/y.js');\nvar writeFileAsync = BB.promisify(fs.writeFile);\nmodule.exports = write;\nfunction write(cache, data, opts) {\n  opts = opts || {};\n  if (opts.algorithms && opts.algorithms.length > 1) {\n    throw new Error(Y(_templateObject || (_templateObject = _taggedTemplateLiteral([\"opts.algorithms only supports a single algorithm for now\"]))));\n  }\n  if (typeof opts.size === 'number' && data.length !== opts.size) {\n    return BB.reject(sizeError(opts.size, data.length));\n  }\n  var sri = ssri.fromData(data, opts);\n  if (opts.integrity && !ssri.checkData(data, opts.integrity, opts)) {\n    return BB.reject(checksumError(opts.integrity, sri));\n  }\n  return BB.using(makeTmp(cache, opts), function (tmp) {\n    return writeFileAsync(tmp.target, data, {\n      flag: 'wx'\n    }).then(function () {\n      return moveToDestination(tmp, cache, sri, opts);\n    });\n  }).then(function () {\n    return {\n      integrity: sri,\n      size: data.length\n    };\n  });\n}\nmodule.exports.stream = writeStream;\nfunction writeStream(cache, opts) {\n  opts = opts || {};\n  var inputStream = new PassThrough();\n  var inputErr = false;\n  function errCheck() {\n    if (inputErr) {\n      throw inputErr;\n    }\n  }\n  var allDone;\n  var ret = to(function (c, n, cb) {\n    if (!allDone) {\n      allDone = handleContent(inputStream, cache, opts, errCheck);\n    }\n    inputStream.write(c, n, cb);\n  }, function (cb) {\n    inputStream.end(function () {\n      if (!allDone) {\n        var e = new Error(Y(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Cache input stream was empty\"]))));\n        e.code = 'ENODATA';\n        return ret.emit('error', e);\n      }\n      allDone.then(function (res) {\n        res.integrity && ret.emit('integrity', res.integrity);\n        res.size !== null && ret.emit('size', res.size);\n        cb();\n      }, function (e) {\n        ret.emit('error', e);\n      });\n    });\n  });\n  ret.once('error', function (e) {\n    inputErr = e;\n  });\n  return ret;\n}\nfunction handleContent(inputStream, cache, opts, errCheck) {\n  return BB.using(makeTmp(cache, opts), function (tmp) {\n    errCheck();\n    return pipeToTmp(inputStream, cache, tmp.target, opts, errCheck).then(function (res) {\n      return moveToDestination(tmp, cache, res.integrity, opts, errCheck).then(function () {\n        return res;\n      });\n    });\n  });\n}\nfunction pipeToTmp(inputStream, cache, tmpTarget, opts, errCheck) {\n  return BB.resolve().then(function () {\n    var integrity;\n    var size;\n    var hashStream = ssri.integrityStream({\n      integrity: opts.integrity,\n      algorithms: opts.algorithms,\n      size: opts.size\n    }).on('integrity', function (s) {\n      integrity = s;\n    }).on('size', function (s) {\n      size = s;\n    });\n    var outStream = fs.createWriteStream(tmpTarget, {\n      flags: 'wx'\n    });\n    errCheck();\n    return pipe(inputStream, hashStream, outStream).then(function () {\n      return {\n        integrity: integrity,\n        size: size\n      };\n    }, function (err) {\n      return rimraf(tmpTarget).then(function () {\n        throw err;\n      });\n    });\n  });\n}\nfunction makeTmp(cache, opts) {\n  var tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix);\n  return fixOwner.mkdirfix(path.dirname(tmpTarget), opts.uid, opts.gid).then(function () {\n    return {\n      target: tmpTarget,\n      moved: false\n    };\n  }).disposer(function (tmp) {\n    return !tmp.moved && rimraf(tmp.target);\n  });\n}\nfunction moveToDestination(tmp, cache, sri, opts, errCheck) {\n  errCheck && errCheck();\n  var destination = contentPath(cache, sri);\n  var destDir = path.dirname(destination);\n  return fixOwner.mkdirfix(destDir, opts.uid, opts.gid).then(function () {\n    errCheck && errCheck();\n    return moveFile(tmp.target, destination);\n  }).then(function () {\n    errCheck && errCheck();\n    tmp.moved = true;\n    return fixOwner.chownr(destination, opts.uid, opts.gid);\n  });\n}\nfunction sizeError(expected, found) {\n  var err = new Error(Y(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Bad data size: expected inserted data to be \", \" bytes, but got \", \" instead\"])), expected, found));\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction checksumError(expected, found) {\n  var err = new Error(Y(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"Integrity check failed:\\n  Wanted: \", \"\\n   Found: \", \"\"])), expected, found));\n  err.code = 'EINTEGRITY';\n  err.expected = expected;\n  err.found = found;\n  return err;\n}","map":null,"metadata":{},"sourceType":"script"}