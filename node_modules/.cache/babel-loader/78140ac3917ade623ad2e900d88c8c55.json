{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenClass = exports.screenClasses = void 0;\nvar _react = require(\"react\");\nvar _config = require(\"./config\");\nvar _primitives = require(\"./primitives\");\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nvar getViewPort = function getViewPort(source) {\n  if (source && source.current && source.current.clientWidth) {\n    return source.current.clientWidth;\n  }\n  if (typeof _primitives.Window !== 'undefined' && _primitives.Window.innerWidth) {\n    return _primitives.Window.innerWidth;\n  }\n  return null;\n};\nvar screenClasses = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\nexports.screenClasses = screenClasses;\nvar useScreenClass = function useScreenClass(source, fallbackScreenClass) {\n  var getScreenClass = function getScreenClass() {\n    var _getConfiguration = (0, _config.getConfiguration)(),\n      breakpoints = _getConfiguration.breakpoints,\n      defaultScreenClass = _getConfiguration.defaultScreenClass,\n      maxScreenClass = _getConfiguration.maxScreenClass;\n    var newScreenClass = defaultScreenClass;\n    var viewport = getViewPort(source);\n    if (viewport) {\n      newScreenClass = 'xs';\n      if (breakpoints[0] && viewport >= breakpoints[0]) newScreenClass = 'sm';\n      if (breakpoints[1] && viewport >= breakpoints[1]) newScreenClass = 'md';\n      if (breakpoints[2] && viewport >= breakpoints[2]) newScreenClass = 'lg';\n      if (breakpoints[3] && viewport >= breakpoints[3]) newScreenClass = 'xl';\n      if (breakpoints[4] && viewport >= breakpoints[4]) newScreenClass = 'xxl';\n    } else if (fallbackScreenClass) {\n      newScreenClass = fallbackScreenClass;\n    }\n    var newScreenClassIndex = screenClasses.indexOf(newScreenClass);\n    var maxScreenClassIndex = screenClasses.indexOf(maxScreenClass);\n    if (maxScreenClassIndex >= 0 && newScreenClassIndex > maxScreenClassIndex) {\n      newScreenClass = screenClasses[maxScreenClassIndex];\n    }\n    return newScreenClass;\n  };\n  var _useState = (0, _react.useState)(function () {\n      return getScreenClass();\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    screenClass = _useState2[0],\n    setScreenClass = _useState2[1];\n  (0, _react.useEffect)(function () {\n    var handleWindowResized = function handleWindowResized() {\n      return setScreenClass(getScreenClass());\n    };\n    _primitives.Window.addEventListener('resize', handleWindowResized, false);\n    return function () {\n      _primitives.Window.removeEventListener('resize', handleWindowResized, false);\n    };\n  }, []);\n  return screenClass;\n};\nexports.useScreenClass = useScreenClass;","map":null,"metadata":{},"sourceType":"script"}