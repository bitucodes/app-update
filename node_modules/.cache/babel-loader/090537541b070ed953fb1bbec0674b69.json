{"ast":null,"code":"/* This loader renders the template with underscore if no other loader was found */\n// @ts-nocheck\n'use strict';\n\nvar _ = require('lodash');\nvar loaderUtils = require('loader-utils');\nmodule.exports = function (source) {\n  // Get templating options\n  var options = this.query !== '' ? loaderUtils.getOptions(this) : {};\n  var force = options.force || false;\n  var allLoadersButThisOne = this.loaders.filter(function (loader) {\n    return loader.normal !== module.exports;\n  });\n  // This loader shouldn't kick in if there is any other loader (unless it's explicitly enforced)\n  if (allLoadersButThisOne.length > 0 && !force) {\n    return source;\n  }\n  // Skip .js files (unless it's explicitly enforced)\n  if (/\\.js$/.test(this.resourcePath) && !force) {\n    return source;\n  }\n\n  // The following part renders the template with lodash as aminimalistic loader\n  //\n  var template = _.template(source, _.defaults(options, {\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    variable: 'data'\n  }));\n  // Require !!lodash - using !! will disable all loaders (e.g. babel)\n  return 'var _ = require(' + loaderUtils.stringifyRequest(this, '!!' + require.resolve('lodash')) + ');' + 'module.exports = function (templateParams) { with(templateParams) {' +\n  // Execute the lodash template\n  'return (' + template.source + ')();' + '}}';\n};","map":null,"metadata":{},"sourceType":"script"}