{"ast":null,"code":"var canReorder = require('./reorderable').canReorder;\nvar extractProperties = require('./extract-properties');\nvar optimizeProperties = require('./properties/optimize');\nvar serializeRules = require('../../writer/one-time').rules;\nvar Token = require('../../tokenizer/token');\nfunction mergeNonAdjacentBySelector(tokens, context) {\n  var specificityCache = context.cache.specificity;\n  var allSelectors = {};\n  var repeatedSelectors = [];\n  var i;\n  for (i = tokens.length - 1; i >= 0; i--) {\n    if (tokens[i][0] != Token.RULE) continue;\n    if (tokens[i][2].length === 0) continue;\n    var selector = serializeRules(tokens[i][1]);\n    allSelectors[selector] = [i].concat(allSelectors[selector] || []);\n    if (allSelectors[selector].length == 2) repeatedSelectors.push(selector);\n  }\n  for (i = repeatedSelectors.length - 1; i >= 0; i--) {\n    var positions = allSelectors[repeatedSelectors[i]];\n    selectorIterator: for (var j = positions.length - 1; j > 0; j--) {\n      var positionOne = positions[j - 1];\n      var tokenOne = tokens[positionOne];\n      var positionTwo = positions[j];\n      var tokenTwo = tokens[positionTwo];\n      directionIterator: for (var direction = 1; direction >= -1; direction -= 2) {\n        var topToBottom = direction == 1;\n        var from = topToBottom ? positionOne + 1 : positionTwo - 1;\n        var to = topToBottom ? positionTwo : positionOne;\n        var delta = topToBottom ? 1 : -1;\n        var moved = topToBottom ? tokenOne : tokenTwo;\n        var target = topToBottom ? tokenTwo : tokenOne;\n        var movedProperties = extractProperties(moved);\n        while (from != to) {\n          var traversedProperties = extractProperties(tokens[from]);\n          from += delta;\n\n          // traversed then moved as we move selectors towards the start\n          var reorderable = topToBottom ? canReorder(movedProperties, traversedProperties, specificityCache) : canReorder(traversedProperties, movedProperties, specificityCache);\n          if (!reorderable && !topToBottom) continue selectorIterator;\n          if (!reorderable && topToBottom) continue directionIterator;\n        }\n        if (topToBottom) {\n          Array.prototype.push.apply(moved[2], target[2]);\n          target[2] = moved[2];\n        } else {\n          Array.prototype.push.apply(target[2], moved[2]);\n        }\n        optimizeProperties(target[2], true, true, context);\n        moved[2] = [];\n      }\n    }\n  }\n}\nmodule.exports = mergeNonAdjacentBySelector;","map":null,"metadata":{},"sourceType":"script"}