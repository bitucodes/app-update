{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar SingleEntryPlugin = require(\"./SingleEntryPlugin\");\nvar MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nvar DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string} context context path\n * @param {string | string[]} item entry array or single path\n * @param {string} name entry key name\n * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin\n */\nvar itemToPlugin = function itemToPlugin(context, item, name) {\n  if (Array.isArray(item)) {\n    return new MultiEntryPlugin(context, item, name);\n  }\n  return new SingleEntryPlugin(context, item, name);\n};\nmodule.exports = /*#__PURE__*/function () {\n  function EntryOptionPlugin() {\n    _classCallCheck(this, EntryOptionPlugin);\n  }\n  _createClass(EntryOptionPlugin, [{\n    key: \"apply\",\n    /**\n     * @param {Compiler} compiler the compiler instance one is tapping into\n     * @returns {void}\n     */\n    value: function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"EntryOptionPlugin\", function (context, entry) {\n        if (typeof entry === \"string\" || Array.isArray(entry)) {\n          itemToPlugin(context, entry, \"main\").apply(compiler);\n        } else if (typeof entry === \"object\") {\n          for (var _i = 0, _Object$keys = Object.keys(entry); _i < _Object$keys.length; _i++) {\n            var name = _Object$keys[_i];\n            itemToPlugin(context, entry[name], name).apply(compiler);\n          }\n        } else if (typeof entry === \"function\") {\n          new DynamicEntryPlugin(context, entry).apply(compiler);\n        }\n        return true;\n      });\n    }\n  }]);\n  return EntryOptionPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}