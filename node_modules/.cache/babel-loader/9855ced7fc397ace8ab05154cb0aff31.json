{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _os = require('os');\nvar _os2 = _interopRequireDefault(_os);\nvar _cacache = require('cacache');\nvar _cacache2 = _interopRequireDefault(_cacache);\nvar _findCacheDir = require('find-cache-dir');\nvar _findCacheDir2 = _interopRequireDefault(_findCacheDir);\nvar _workerFarm = require('worker-farm');\nvar _workerFarm2 = _interopRequireDefault(_workerFarm);\nvar _serializeJavascript = require('serialize-javascript');\nvar _serializeJavascript2 = _interopRequireDefault(_serializeJavascript);\nvar _minify = require('./minify');\nvar _minify2 = _interopRequireDefault(_minify);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar workerFile = require.resolve('./worker');\ntry {\n  // run test\n  workerFile = require.resolve('../../dist/uglify/worker');\n} catch (e) {} // eslint-disable-line no-empty\n\nvar Runner = function () {\n  function Runner() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Runner);\n    var cache = options.cache,\n      parallel = options.parallel;\n    this.cacheDir = cache === true ? (0, _findCacheDir2.default)({\n      name: 'uglifyjs-webpack-plugin'\n    }) : cache;\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    var cpus = _os2.default.cpus() || {\n      length: 1\n    };\n    this.maxConcurrentWorkers = parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  _createClass(Runner, [{\n    key: 'runTasks',\n    value: function runTasks(tasks, callback) {\n      var _this = this;\n\n      /* istanbul ignore if */\n      if (!tasks.length) {\n        callback(null, []);\n        return;\n      }\n      if (this.maxConcurrentWorkers > 1) {\n        var workerOptions = process.platform === 'win32' ? {\n          maxConcurrentWorkers: this.maxConcurrentWorkers,\n          maxConcurrentCallsPerWorker: 1\n        } : {\n          maxConcurrentWorkers: this.maxConcurrentWorkers\n        };\n        this.workers = (0, _workerFarm2.default)(workerOptions, workerFile);\n        this.boundWorkers = function (options, cb) {\n          return _this.workers((0, _serializeJavascript2.default)(options), cb);\n        };\n      } else {\n        this.boundWorkers = function (options, cb) {\n          try {\n            cb(null, (0, _minify2.default)(options));\n          } catch (error) {\n            cb(error);\n          }\n        };\n      }\n      var toRun = tasks.length;\n      var results = [];\n      var step = function step(index, data) {\n        toRun -= 1;\n        results[index] = data;\n        if (!toRun) {\n          callback(null, results);\n        }\n      };\n      tasks.forEach(function (task, index) {\n        var enqueue = function enqueue() {\n          _this.boundWorkers(task, function (error, data) {\n            var result = error ? {\n              error: error\n            } : data;\n            var done = function done() {\n              return step(index, result);\n            };\n            if (_this.cacheDir && !result.error) {\n              _cacache2.default.put(_this.cacheDir, (0, _serializeJavascript2.default)(task.cacheKeys), JSON.stringify(data)).then(done, done);\n            } else {\n              done();\n            }\n          });\n        };\n        if (_this.cacheDir) {\n          _cacache2.default.get(_this.cacheDir, (0, _serializeJavascript2.default)(task.cacheKeys)).then(function (_ref) {\n            var data = _ref.data;\n            return step(index, JSON.parse(data));\n          }, enqueue);\n        } else {\n          enqueue();\n        }\n      });\n    }\n  }, {\n    key: 'exit',\n    value: function exit() {\n      if (this.workers) {\n        _workerFarm2.default.end(this.workers);\n      }\n    }\n  }]);\n  return Runner;\n}();\nexports.default = Runner;","map":null,"metadata":{},"sourceType":"script"}