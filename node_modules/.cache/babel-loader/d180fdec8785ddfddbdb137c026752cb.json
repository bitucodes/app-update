{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar asyncLib = require(\"neo-async\");\nvar CachePlugin = /*#__PURE__*/function () {\n  function CachePlugin(cache) {\n    _classCallCheck(this, CachePlugin);\n    this.cache = cache || {};\n    this.FS_ACCURACY = 2000;\n  }\n  _createClass(CachePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      if (Array.isArray(compiler.compilers)) {\n        compiler.compilers.forEach(function (c, idx) {\n          new CachePlugin(_this.cache[idx] = _this.cache[idx] || {}).apply(c);\n        });\n      } else {\n        var registerCacheToCompiler = function registerCacheToCompiler(compiler, cache) {\n          compiler.hooks.thisCompilation.tap(\"CachePlugin\", function (compilation) {\n            compilation.cache = cache;\n            compilation.hooks.childCompiler.tap(\"CachePlugin\", function (childCompiler, compilerName, compilerIndex) {\n              if (cache) {\n                var childCache;\n                if (!cache.children) {\n                  cache.children = {};\n                }\n                if (!cache.children[compilerName]) {\n                  cache.children[compilerName] = [];\n                }\n                if (cache.children[compilerName][compilerIndex]) {\n                  childCache = cache.children[compilerName][compilerIndex];\n                } else {\n                  cache.children[compilerName].push(childCache = {});\n                }\n                registerCacheToCompiler(childCompiler, childCache);\n              }\n            });\n          });\n        };\n        registerCacheToCompiler(compiler, this.cache);\n        compiler.hooks.watchRun.tap(\"CachePlugin\", function () {\n          _this.watching = true;\n        });\n        compiler.hooks.run.tapAsync(\"CachePlugin\", function (compiler, callback) {\n          if (!compiler._lastCompilationFileDependencies) {\n            return callback();\n          }\n          var fs = compiler.inputFileSystem;\n          var fileTs = compiler.fileTimestamps = new Map();\n          asyncLib.forEach(compiler._lastCompilationFileDependencies, function (file, callback) {\n            fs.stat(file, function (err, stat) {\n              if (err) {\n                if (err.code === \"ENOENT\") return callback();\n                return callback(err);\n              }\n              if (stat.mtime) _this.applyMtime(+stat.mtime);\n              fileTs.set(file, +stat.mtime || Infinity);\n              callback();\n            });\n          }, function (err) {\n            if (err) return callback(err);\n            var _iterator = _createForOfIteratorHelper(fileTs),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                  file = _step$value[0],\n                  ts = _step$value[1];\n                fileTs.set(file, ts + _this.FS_ACCURACY);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            callback();\n          });\n        });\n        compiler.hooks.afterCompile.tap(\"CachePlugin\", function (compilation) {\n          compilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;\n          compilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;\n        });\n      }\n    } /* istanbul ignore next */\n  }, {\n    key: \"applyMtime\",\n    value: function applyMtime(mtime) {\n      if (this.FS_ACCURACY > 1 && mtime % 2 !== 0) this.FS_ACCURACY = 1;else if (this.FS_ACCURACY > 10 && mtime % 20 !== 0) this.FS_ACCURACY = 10;else if (this.FS_ACCURACY > 100 && mtime % 200 !== 0) this.FS_ACCURACY = 100;else if (this.FS_ACCURACY > 1000 && mtime % 2000 !== 0) this.FS_ACCURACY = 1000;\n    }\n  }]);\n  return CachePlugin;\n}();\nmodule.exports = CachePlugin;","map":null,"metadata":{},"sourceType":"script"}