{"ast":null,"code":"\"use strict\";\n\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\nvar SortableSet = /*#__PURE__*/function (_Set) {\n  _inherits(SortableSet, _Set);\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  function SortableSet(initialIterable, defaultSort) {\n    var _this;\n    _classCallCheck(this, SortableSet);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SortableSet).call(this, initialIterable));\n    /** @private @type {function(T, T): number}} */\n    _this._sortFn = defaultSort;\n    /** @private @type {function(T, T): number} | null} */\n    _this._lastActiveSortFn = null;\n    /** @private @type {Map<Function, T[]> | undefined} */\n    _this._cache = undefined;\n    /** @private @type {Map<Function, T[]|string|number> | undefined} */\n    _this._cacheOrderIndependent = undefined;\n    return _this;\n  }\n\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n  _createClass(SortableSet, [{\n    key: \"add\",\n    value: function add(value) {\n      this._lastActiveSortFn = null;\n      this._invalidateCache();\n      this._invalidateOrderedCache();\n      _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, value);\n      return this;\n    }\n    /**\n     * @param {T} value value to delete\n     * @returns {boolean} true if value existed in set, false otherwise\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      this._invalidateCache();\n      this._invalidateOrderedCache();\n      return _get(_getPrototypeOf(SortableSet.prototype), \"delete\", this).call(this, value);\n    }\n    /**\n     * @returns {void}\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._invalidateCache();\n      this._invalidateOrderedCache();\n      return _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n    }\n    /**\n     * Sort with a comparer function\n     * @param {SortFunction} sortFn Sorting comparer function\n     * @returns {void}\n     */\n  }, {\n    key: \"sortWith\",\n    value: function sortWith(sortFn) {\n      if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n        // already sorted - nothing to do\n        return;\n      }\n      var sortedArray = Array.from(this).sort(sortFn);\n      _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n      for (var i = 0; i < sortedArray.length; i += 1) {\n        _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, sortedArray[i]);\n      }\n      this._lastActiveSortFn = sortFn;\n      this._invalidateCache();\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this.sortWith(this._sortFn);\n    }\n    /**\n     * Get data from cache\n     * @param {function(SortableSet<T>): T[]} fn function to calculate value\n     * @returns {T[]} returns result of fn(this), cached until set changes\n     */\n  }, {\n    key: \"getFromCache\",\n    value: function getFromCache(fn) {\n      if (this._cache === undefined) {\n        this._cache = new Map();\n      } else {\n        var data = this._cache.get(fn);\n        if (data !== undefined) {\n          return data;\n        }\n      }\n      var newData = fn(this);\n      this._cache.set(fn, newData);\n      return newData;\n    }\n    /**\n     * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n     * @returns {any} returns result of fn(this), cached until set changes\n     */\n  }, {\n    key: \"getFromUnorderedCache\",\n    value: function getFromUnorderedCache(fn) {\n      if (this._cacheOrderIndependent === undefined) {\n        this._cacheOrderIndependent = new Map();\n      } else {\n        var data = this._cacheOrderIndependent.get(fn);\n        if (data !== undefined) {\n          return data;\n        }\n      }\n      var newData = fn(this);\n      this._cacheOrderIndependent.set(fn, newData);\n      return newData;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n  }, {\n    key: \"_invalidateCache\",\n    value: function _invalidateCache() {\n      if (this._cache !== undefined) {\n        this._cache.clear();\n      }\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n  }, {\n    key: \"_invalidateOrderedCache\",\n    value: function _invalidateOrderedCache() {\n      if (this._cacheOrderIndependent !== undefined) {\n        this._cacheOrderIndependent.clear();\n      }\n    }\n  }]);\n  return SortableSet;\n}(_wrapNativeSuper(Set));\nmodule.exports = SortableSet;","map":null,"metadata":{},"sourceType":"script"}