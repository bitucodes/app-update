{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar ContextDependencyHelpers = exports;\n\n/**\n * Escapes regular expression metacharacters\n * @param {string} str String to quote\n * @returns {string} Escaped string\n */\nvar quotemeta = function quotemeta(str) {\n  return str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\nvar splitContextFromPrefix = function splitContextFromPrefix(prefix) {\n  var idx = prefix.lastIndexOf(\"/\");\n  var context = \".\";\n  if (idx >= 0) {\n    context = prefix.substr(0, idx);\n    prefix = \".\".concat(prefix.substr(idx));\n  }\n  return {\n    context: context,\n    prefix: prefix\n  };\n};\nvar splitQueryFromPostfix = function splitQueryFromPostfix(postfix) {\n  var idx = postfix.indexOf(\"?\");\n  var query = \"\";\n  if (idx >= 0) {\n    query = postfix.substr(idx);\n    postfix = postfix.substr(0, idx);\n  }\n  return {\n    postfix: postfix,\n    query: query\n  };\n};\nContextDependencyHelpers.create = function (Dep, range, param, expr, options, contextOptions) {\n  if (param.isTemplateString()) {\n    var prefixRaw = param.quasis[0].string;\n    var postfixRaw = param.quasis.length > 1 ? param.quasis[param.quasis.length - 1].string : \"\";\n    var prefixRange = [param.quasis[0].range[0], param.quasis[0].range[1]];\n    var postfixRange = param.quasis.length > 1 ? param.quasis[param.quasis.length - 1].range : \"\";\n    var valueRange = param.range;\n    var _splitContextFromPref = splitContextFromPrefix(prefixRaw),\n      context = _splitContextFromPref.context,\n      prefix = _splitContextFromPref.prefix;\n    var _splitQueryFromPostfi = splitQueryFromPostfix(postfixRaw),\n      postfix = _splitQueryFromPostfi.postfix,\n      query = _splitQueryFromPostfi.query; // If there are more than two quasis, maybe the generated RegExp can be more precise?\n    var regExp = new RegExp(\"^\".concat(quotemeta(prefix)).concat(options.wrappedContextRegExp.source).concat(quotemeta(postfix), \"$\"));\n    var dep = new Dep(Object.assign({\n      request: context + query,\n      recursive: options.wrappedContextRecursive,\n      regExp: regExp,\n      mode: \"sync\"\n    }, contextOptions), range, valueRange);\n    dep.loc = expr.loc;\n    var replaces = [];\n    if (prefixRange && prefix !== prefixRaw) {\n      replaces.push({\n        range: prefixRange,\n        value: prefix\n      });\n    }\n    if (postfixRange && postfix !== postfixRaw) {\n      replaces.push({\n        range: postfixRange,\n        value: postfix\n      });\n    }\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n    return dep;\n  } else if (param.isWrapped() && (param.prefix && param.prefix.isString() || param.postfix && param.postfix.isString())) {\n    var _prefixRaw = param.prefix && param.prefix.isString() ? param.prefix.string : \"\";\n    var _postfixRaw = param.postfix && param.postfix.isString() ? param.postfix.string : \"\";\n    var _prefixRange = param.prefix && param.prefix.isString() ? param.prefix.range : null;\n    var _postfixRange = param.postfix && param.postfix.isString() ? param.postfix.range : null;\n    var _valueRange = param.range;\n    var _splitContextFromPref2 = splitContextFromPrefix(_prefixRaw),\n      _context = _splitContextFromPref2.context,\n      _prefix = _splitContextFromPref2.prefix;\n    var _splitQueryFromPostfi2 = splitQueryFromPostfix(_postfixRaw),\n      _postfix = _splitQueryFromPostfi2.postfix,\n      _query = _splitQueryFromPostfi2.query;\n    var _regExp = new RegExp(\"^\".concat(quotemeta(_prefix)).concat(options.wrappedContextRegExp.source).concat(quotemeta(_postfix), \"$\"));\n    var _dep = new Dep(Object.assign({\n      request: _context + _query,\n      recursive: options.wrappedContextRecursive,\n      regExp: _regExp,\n      mode: \"sync\"\n    }, contextOptions), range, _valueRange);\n    _dep.loc = expr.loc;\n    var _replaces = [];\n    if (_prefixRange && _prefix !== _prefixRaw) {\n      _replaces.push({\n        range: _prefixRange,\n        value: JSON.stringify(_prefix)\n      });\n    }\n    if (_postfixRange && _postfix !== _postfixRaw) {\n      _replaces.push({\n        range: _postfixRange,\n        value: JSON.stringify(_postfix)\n      });\n    }\n    _dep.replaces = _replaces;\n    _dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n    return _dep;\n  } else {\n    var _dep2 = new Dep(Object.assign({\n      request: options.exprContextRequest,\n      recursive: options.exprContextRecursive,\n      regExp: options.exprContextRegExp,\n      mode: \"sync\"\n    }, contextOptions), range, param.range);\n    _dep2.loc = expr.loc;\n    _dep2.critical = options.exprContextCritical && \"the request of a dependency is an expression\";\n    return _dep2;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}