{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar SetVarMainTemplatePlugin = require(\"./SetVarMainTemplatePlugin\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string[]} accessor the accessor to convert to path\n * @returns {string} the path\n */\nvar accessorToObjectAccess = function accessorToObjectAccess(accessor) {\n  return accessor.map(function (a) {\n    return \"[\".concat(JSON.stringify(a), \"]\");\n  }).join(\"\");\n};\n\n/**\n * @param {string=} base the path prefix\n * @param {string|string[]} accessor the accessor\n * @param {string=} joinWith the element separator\n * @returns {string} the path\n */\nvar accessorAccess = function accessorAccess(base, accessor) {\n  var joinWith = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"; \";\n  var accessors = Array.isArray(accessor) ? accessor : [accessor];\n  return accessors.map(function (_, idx) {\n    var a = base ? base + accessorToObjectAccess(accessors.slice(0, idx + 1)) : accessors[0] + accessorToObjectAccess(accessors.slice(1, idx + 1));\n    if (idx === accessors.length - 1) return a;\n    if (idx === 0 && base === undefined) {\n      return \"\".concat(a, \" = typeof \").concat(a, \" === \\\"object\\\" ? \").concat(a, \" : {}\");\n    }\n    return \"\".concat(a, \" = \").concat(a, \" || {}\");\n  }).join(joinWith);\n};\nvar LibraryTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string} name name of library\n   * @param {string} target type of library\n   * @param {boolean} umdNamedDefine setting this to true will name the UMD module\n   * @param {string|TODO} auxiliaryComment comment in the UMD wrapper\n   * @param {string|string[]} exportProperty which export should be exposed as library\n   */\n  function LibraryTemplatePlugin(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n    _classCallCheck(this, LibraryTemplatePlugin);\n    this.name = name;\n    this.target = target;\n    this.umdNamedDefine = umdNamedDefine;\n    this.auxiliaryComment = auxiliaryComment;\n    this.exportProperty = exportProperty;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(LibraryTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.thisCompilation.tap(\"LibraryTemplatePlugin\", function (compilation) {\n        if (_this.exportProperty) {\n          var ExportPropertyMainTemplatePlugin = require(\"./ExportPropertyMainTemplatePlugin\");\n          new ExportPropertyMainTemplatePlugin(_this.exportProperty).apply(compilation);\n        }\n        switch (_this.target) {\n          case \"var\":\n            new SetVarMainTemplatePlugin(\"var \".concat(accessorAccess(undefined, _this.name)), false).apply(compilation);\n            break;\n          case \"assign\":\n            new SetVarMainTemplatePlugin(accessorAccess(undefined, _this.name), false).apply(compilation);\n            break;\n          case \"this\":\n          case \"self\":\n          case \"window\":\n            if (_this.name) {\n              new SetVarMainTemplatePlugin(accessorAccess(_this.target, _this.name), false).apply(compilation);\n            } else {\n              new SetVarMainTemplatePlugin(_this.target, true).apply(compilation);\n            }\n            break;\n          case \"global\":\n            if (_this.name) {\n              new SetVarMainTemplatePlugin(accessorAccess(compilation.runtimeTemplate.outputOptions.globalObject, _this.name), false).apply(compilation);\n            } else {\n              new SetVarMainTemplatePlugin(compilation.runtimeTemplate.outputOptions.globalObject, true).apply(compilation);\n            }\n            break;\n          case \"commonjs\":\n            if (_this.name) {\n              new SetVarMainTemplatePlugin(accessorAccess(\"exports\", _this.name), false).apply(compilation);\n            } else {\n              new SetVarMainTemplatePlugin(\"exports\", true).apply(compilation);\n            }\n            break;\n          case \"commonjs2\":\n          case \"commonjs-module\":\n            new SetVarMainTemplatePlugin(\"module.exports\", false).apply(compilation);\n            break;\n          case \"amd\":\n            {\n              var AmdMainTemplatePlugin = require(\"./AmdMainTemplatePlugin\");\n              new AmdMainTemplatePlugin(_this.name).apply(compilation);\n              break;\n            }\n          case \"umd\":\n          case \"umd2\":\n            {\n              var UmdMainTemplatePlugin = require(\"./UmdMainTemplatePlugin\");\n              new UmdMainTemplatePlugin(_this.name, {\n                optionalAmdExternalAsGlobal: _this.target === \"umd2\",\n                namedDefine: _this.umdNamedDefine,\n                auxiliaryComment: _this.auxiliaryComment\n              }).apply(compilation);\n              break;\n            }\n          case \"jsonp\":\n            {\n              var JsonpExportMainTemplatePlugin = require(\"./web/JsonpExportMainTemplatePlugin\");\n              new JsonpExportMainTemplatePlugin(_this.name).apply(compilation);\n              break;\n            }\n          default:\n            throw new Error(\"\".concat(_this.target, \" is not a valid Library target\"));\n        }\n      });\n    }\n  }]);\n  return LibraryTemplatePlugin;\n}();\nmodule.exports = LibraryTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}