{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Generated by CoffeeScript 2.5.1\n// Abstract Style Declaration\nvar _Declaration;\nmodule.exports = _Declaration = function () {\n  var self;\n  var _Declaration = /*#__PURE__*/function () {\n    function _Declaration(prop1, val) {\n      _classCallCheck(this, _Declaration);\n      this.prop = prop1;\n      this.important = false;\n      this.set(val);\n    }\n    _createClass(_Declaration, [{\n      key: \"get\",\n      value: function get() {\n        return this._get();\n      }\n    }, {\n      key: \"_get\",\n      value: function _get() {\n        return this.val;\n      }\n    }, {\n      key: \"_pickImportantClause\",\n      value: function _pickImportantClause(val) {\n        if (self.importantClauseRx.test(String(val))) {\n          this.important = true;\n          return val.replace(self.importantClauseRx, '');\n        } else {\n          this.important = false;\n          return val;\n        }\n      }\n    }, {\n      key: \"set\",\n      value: function set(val) {\n        val = self.sanitizeValue(val);\n        val = this._pickImportantClause(val);\n        val = val.trim();\n        if (this._handleNullOrInherit(val)) {\n          return this;\n        }\n        this._set(val);\n        return this;\n      }\n    }, {\n      key: \"_set\",\n      value: function _set(val) {\n        return this.val = val;\n      }\n    }, {\n      key: \"_handleNullOrInherit\",\n      value: function _handleNullOrInherit(val) {\n        if (val === '') {\n          this.val = '';\n          return true;\n        }\n        if (val === 'inherit') {\n          if (this.constructor.inheritAllowed) {\n            this.val = 'inherit';\n          } else {\n            throw Error(\"Inherit is not allowed for `\".concat(this.prop, \"`\"));\n          }\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }], [{\n      key: \"setOnto\",\n      value: function setOnto(declarations, prop, val) {\n        var dec;\n        if (!(dec = declarations[prop])) {\n          return declarations[prop] = new this(prop, val);\n        } else {\n          return dec.set(val);\n        }\n      }\n    }, {\n      key: \"sanitizeValue\",\n      value: function sanitizeValue(val) {\n        return String(val).trim().replace(/[\\s]+/g, ' ');\n      }\n    }]);\n    return _Declaration;\n  }();\n  ;\n  self = _Declaration;\n  _Declaration.importantClauseRx = /(\\s\\!important)$/;\n  _Declaration.inheritAllowed = false;\n  return _Declaration;\n}.call(void 0);","map":null,"metadata":{},"sourceType":"script"}