{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar _require = require(\"webpack-sources\"),\n  RawSource = _require.RawSource,\n  ReplaceSource = _require.ReplaceSource; // TODO: clean up this file\n// replace with newer constructs\n// TODO: remove DependencyVariables and replace them with something better\nvar JavascriptGenerator = /*#__PURE__*/function () {\n  function JavascriptGenerator() {\n    _classCallCheck(this, JavascriptGenerator);\n  }\n  _createClass(JavascriptGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate) {\n      var originalSource = module.originalSource();\n      if (!originalSource) {\n        return new RawSource(\"throw new Error('No source available');\");\n      }\n      var source = new ReplaceSource(originalSource);\n      this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n      return source;\n    }\n  }, {\n    key: \"sourceBlock\",\n    value: function sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n      var _this = this;\n      var _iterator = _createForOfIteratorHelper(block.dependencies),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dependency = _step.value;\n          this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n        }\n\n        /**\n         * Get the variables of all blocks that we need to inject.\n         * These will contain the variable name and its expression.\n         * The name will be added as a parameter in a IIFE the expression as its value.\n         */\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var vars = block.variables.reduce(function (result, value) {\n        var variable = _this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n        if (variable) {\n          result.push(variable);\n        }\n        return result;\n      }, []);\n\n      /**\n       * if we actually have variables\n       * this is important as how #splitVariablesInUniqueNamedChunks works\n       * it will always return an array in an array which would lead to a IIFE wrapper around\n       * a module if we do this with an empty vars array.\n       */\n      if (vars.length > 0) {\n        /**\n         * Split all variables up into chunks of unique names.\n         * e.g. imagine you have the following variable names that need to be injected:\n         * [foo, bar, baz, foo, some, more]\n         * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n         * (function(foo, bar, baz){\n         *   (function(foo, some, more){\n         *     …\n         *   }(…));\n         * }(…));\n         *\n         * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n         * [[foo, bar, baz], [foo, some, more]]\n         */\n        var injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars);\n\n        // create all the beginnings of IIFEs\n        var functionWrapperStarts = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperStartCode(variableChunk.map(function (variable) {\n            return variable.name;\n          }));\n        });\n\n        // and all the ends\n        var functionWrapperEnds = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(function (variable) {\n            return variable.expression;\n          }), block);\n        });\n\n        // join them to one big string\n        var varStartCode = functionWrapperStarts.join(\"\");\n\n        // reverse the ends first before joining them, as the last added must be the inner most\n        var varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n        // if we have anything, add it to the source\n        if (varStartCode && varEndCode) {\n          var start = block.range ? block.range[0] : -10;\n          var end = block.range ? block.range[1] : module.originalSource().size() + 1;\n          source.insert(start + 0.5, varStartCode);\n          source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n        }\n      }\n      var _iterator2 = _createForOfIteratorHelper(block.blocks),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var childBlock = _step2.value;\n          this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"sourceDependency\",\n    value: function sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n      var template = dependencyTemplates.get(dependency.constructor);\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n      template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n    }\n  }, {\n    key: \"sourceVariables\",\n    value: function sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n      var name = variable.name;\n      var expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n      if (availableVars.some(function (v) {\n        return v.name === name && v.expression.source() === expr.source();\n      })) {\n        return;\n      }\n      return {\n        name: name,\n        expression: expr\n      };\n    }\n    /*\n     * creates the start part of a IIFE around the module to inject a variable name\n     * (function(…){   <- this part\n     * }.call(…))\n     */\n  }, {\n    key: \"variableInjectionFunctionWrapperStartCode\",\n    value: function variableInjectionFunctionWrapperStartCode(varNames) {\n      var args = varNames.join(\", \");\n      return \"/* WEBPACK VAR INJECTION */(function(\".concat(args, \") {\");\n    }\n  }, {\n    key: \"contextArgument\",\n    value: function contextArgument(module, block) {\n      if (this === block) {\n        return module.exportsArgument;\n      }\n      return \"this\";\n    }\n    /*\n     * creates the end part of a IIFE around the module to inject a variable name\n     * (function(…){\n     * }.call(…))   <- this part\n     */\n  }, {\n    key: \"variableInjectionFunctionWrapperEndCode\",\n    value: function variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n      var firstParam = this.contextArgument(module, block);\n      var furtherParams = varExpressions.map(function (e) {\n        return e.source();\n      }).join(\", \");\n      return \"}.call(\".concat(firstParam, \", \").concat(furtherParams, \"))\");\n    }\n  }, {\n    key: \"splitVariablesInUniqueNamedChunks\",\n    value: function splitVariablesInUniqueNamedChunks(vars) {\n      var startState = [[]];\n      return vars.reduce(function (chunks, variable) {\n        var current = chunks[chunks.length - 1];\n        // check if variable with same name exists already\n        // if so create a new chunk of variables.\n        var variableNameAlreadyExists = current.some(function (v) {\n          return v.name === variable.name;\n        });\n        if (variableNameAlreadyExists) {\n          // start new chunk with current variable\n          chunks.push([variable]);\n        } else {\n          // else add it to current chunk\n          current.push(variable);\n        }\n        return chunks;\n      }, startState);\n    }\n  }]);\n  return JavascriptGenerator;\n}();\nmodule.exports = JavascriptGenerator;","map":null,"metadata":{},"sourceType":"script"}