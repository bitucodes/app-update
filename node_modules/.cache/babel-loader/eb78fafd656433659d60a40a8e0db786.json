{"ast":null,"code":"'use strict';\n\nvar index = require('./lib/entry-index');\nvar memo = require('./lib/memoization');\nvar write = require('./lib/content/write');\nvar to = require('mississippi').to;\nmodule.exports = putData;\nfunction putData(cache, key, data, opts) {\n  opts = opts || {};\n  return write(cache, data, opts).then(function (res) {\n    // TODO - stop modifying opts\n    opts.size = res.size;\n    return index.insert(cache, key, res.integrity, opts).then(function (entry) {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts);\n      }\n      return res.integrity;\n    });\n  });\n}\nmodule.exports.stream = putStream;\nfunction putStream(cache, key, opts) {\n  opts = opts || {};\n  var integrity;\n  var size;\n  var contentStream = write.stream(cache, opts).on('integrity', function (int) {\n    integrity = int;\n  }).on('size', function (s) {\n    size = s;\n  });\n  var memoData;\n  var memoTotal = 0;\n  var stream = to(function (chunk, enc, cb) {\n    contentStream.write(chunk, enc, function () {\n      if (opts.memoize) {\n        if (!memoData) {\n          memoData = [];\n        }\n        memoData.push(chunk);\n        memoTotal += chunk.length;\n      }\n      cb();\n    });\n  }, function (cb) {\n    contentStream.end(function () {\n      // TODO - stop modifying `opts`\n      opts.size = size;\n      index.insert(cache, key, integrity, opts).then(function (entry) {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts);\n        }\n        stream.emit('integrity', integrity);\n        cb();\n      });\n    });\n  });\n  var erred = false;\n  stream.once('error', function (err) {\n    if (erred) {\n      return;\n    }\n    erred = true;\n    contentStream.emit('error', err);\n  });\n  contentStream.once('error', function (err) {\n    if (erred) {\n      return;\n    }\n    erred = true;\n    stream.emit('error', err);\n  });\n  return stream;\n}","map":null,"metadata":{},"sourceType":"script"}