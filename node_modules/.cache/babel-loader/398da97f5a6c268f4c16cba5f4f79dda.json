{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\nvar _getPrototypeOf = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _require = require(\"webpack-sources\"),\n  OriginalSource = _require.OriginalSource,\n  RawSource = _require.RawSource;\nvar Module = require(\"./Module\");\nvar WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\nvar Template = require(\"./Template\");\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\nvar ExternalModule = /*#__PURE__*/function (_Module) {\n  _inherits(ExternalModule, _Module);\n  function ExternalModule(request, type, userRequest) {\n    var _this;\n    _classCallCheck(this, ExternalModule);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExternalModule).call(this, \"javascript/dynamic\", null));\n\n    // Info from Factory\n    _this.request = request;\n    _this.externalType = type;\n    _this.userRequest = userRequest;\n    _this.external = true;\n    return _this;\n  }\n  _createClass(ExternalModule, [{\n    key: \"libIdent\",\n    value: function libIdent() {\n      return this.userRequest;\n    }\n  }, {\n    key: \"chunkCondition\",\n    value: function chunkCondition(chunk) {\n      return chunk.hasEntryModule();\n    }\n  }, {\n    key: \"identifier\",\n    value: function identifier() {\n      return \"external \" + JSON.stringify(this.request);\n    }\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier() {\n      return \"external \" + JSON.stringify(this.request);\n    }\n  }, {\n    key: \"needRebuild\",\n    value: function needRebuild() {\n      return false;\n    }\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      this.built = true;\n      this.buildMeta = {};\n      this.buildInfo = {};\n      callback();\n    }\n  }, {\n    key: \"getSourceForGlobalVariableExternal\",\n    value: function getSourceForGlobalVariableExternal(variableName, type) {\n      if (!Array.isArray(variableName)) {\n        // make it an array as the look up works the same basically\n        variableName = [variableName];\n      }\n\n      // needed for e.g. window[\"some\"][\"thing\"]\n      var objectLookup = variableName.map(function (r) {\n        return \"[\".concat(JSON.stringify(r), \"]\");\n      }).join(\"\");\n      return \"(function() { module.exports = \".concat(type).concat(objectLookup, \"; }());\");\n    }\n  }, {\n    key: \"getSourceForCommonJsExternal\",\n    value: function getSourceForCommonJsExternal(moduleAndSpecifiers) {\n      if (!Array.isArray(moduleAndSpecifiers)) {\n        return \"module.exports = require(\".concat(JSON.stringify(moduleAndSpecifiers), \");\");\n      }\n      var moduleName = moduleAndSpecifiers[0];\n      var objectLookup = moduleAndSpecifiers.slice(1).map(function (r) {\n        return \"[\".concat(JSON.stringify(r), \"]\");\n      }).join(\"\");\n      return \"module.exports = require(\".concat(JSON.stringify(moduleName), \")\").concat(objectLookup, \";\");\n    }\n  }, {\n    key: \"checkExternalVariable\",\n    value: function checkExternalVariable(variableToCheck, request) {\n      return \"if(typeof \".concat(variableToCheck, \" === 'undefined') {\").concat(WebpackMissingModule.moduleCode(request), \"}\\n\");\n    }\n  }, {\n    key: \"getSourceForAmdOrUmdExternal\",\n    value: function getSourceForAmdOrUmdExternal(id, optional, request) {\n      var externalVariable = \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(id)), \"__\");\n      var missingModuleError = optional ? this.checkExternalVariable(externalVariable, request) : \"\";\n      return \"\".concat(missingModuleError, \"module.exports = \").concat(externalVariable, \";\");\n    }\n  }, {\n    key: \"getSourceForDefaultCase\",\n    value: function getSourceForDefaultCase(optional, request) {\n      if (!Array.isArray(request)) {\n        // make it an array as the look up works the same basically\n        request = [request];\n      }\n      var variableName = request[0];\n      var missingModuleError = optional ? this.checkExternalVariable(variableName, request.join(\".\")) : \"\";\n      var objectLookup = request.slice(1).map(function (r) {\n        return \"[\".concat(JSON.stringify(r), \"]\");\n      }).join(\"\");\n      return \"\".concat(missingModuleError, \"module.exports = \").concat(variableName).concat(objectLookup, \";\");\n    }\n  }, {\n    key: \"getSourceString\",\n    value: function getSourceString(runtime) {\n      var request = typeof this.request === \"object\" && !Array.isArray(this.request) ? this.request[this.externalType] : this.request;\n      switch (this.externalType) {\n        case \"this\":\n        case \"window\":\n        case \"self\":\n          return this.getSourceForGlobalVariableExternal(request, this.externalType);\n        case \"global\":\n          return this.getSourceForGlobalVariableExternal(runtime.outputOptions.globalObject, this.externalType);\n        case \"commonjs\":\n        case \"commonjs2\":\n          return this.getSourceForCommonJsExternal(request);\n        case \"amd\":\n        case \"umd\":\n        case \"umd2\":\n          return this.getSourceForAmdOrUmdExternal(this.id, this.optional, request);\n        default:\n          return this.getSourceForDefaultCase(this.optional, request);\n      }\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceString) {\n      if (this.useSourceMap) {\n        return new OriginalSource(sourceString, this.identifier());\n      }\n      return new RawSource(sourceString);\n    }\n  }, {\n    key: \"source\",\n    value: function source(dependencyTemplates, runtime) {\n      return this.getSource(this.getSourceString(runtime));\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return 42;\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.externalType);\n      hash.update(JSON.stringify(this.request));\n      hash.update(JSON.stringify(Boolean(this.optional)));\n      _get(_getPrototypeOf(ExternalModule.prototype), \"updateHash\", this).call(this, hash);\n    }\n  }]);\n  return ExternalModule;\n}(Module);\nmodule.exports = ExternalModule;","map":null,"metadata":{},"sourceType":"script"}