{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lenovo/Desktop/chatapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\nvar RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\nvar getFunctionExpression = require(\"./getFunctionExpression\");\nmodule.exports = /*#__PURE__*/function () {\n  function RequireEnsureDependenciesBlockParserPlugin() {\n    _classCallCheck(this, RequireEnsureDependenciesBlockParserPlugin);\n  }\n  _createClass(RequireEnsureDependenciesBlockParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.ensure\").tap(\"RequireEnsureDependenciesBlockParserPlugin\", function (expr) {\n        var chunkName = null;\n        var chunkNameRange = null;\n        var errorExpressionArg = null;\n        var errorExpression = null;\n        switch (expr.arguments.length) {\n          case 4:\n            {\n              var chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n              if (!chunkNameExpr.isString()) return;\n              chunkNameRange = chunkNameExpr.range;\n              chunkName = chunkNameExpr.string;\n            }\n          // falls through\n          case 3:\n            {\n              errorExpressionArg = expr.arguments[2];\n              errorExpression = getFunctionExpression(errorExpressionArg);\n              if (!errorExpression && !chunkName) {\n                var _chunkNameExpr = parser.evaluateExpression(expr.arguments[2]);\n                if (!_chunkNameExpr.isString()) return;\n                chunkNameRange = _chunkNameExpr.range;\n                chunkName = _chunkNameExpr.string;\n              }\n            }\n          // falls through\n          case 2:\n            {\n              var dependenciesExpr = parser.evaluateExpression(expr.arguments[0]);\n              var dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];\n              var successExpressionArg = expr.arguments[1];\n              var successExpression = getFunctionExpression(successExpressionArg);\n              if (successExpression) {\n                parser.walkExpressions(successExpression.expressions);\n              }\n              if (errorExpression) {\n                parser.walkExpressions(errorExpression.expressions);\n              }\n              var dep = new RequireEnsureDependenciesBlock(expr, successExpression ? successExpression.fn : successExpressionArg, errorExpression ? errorExpression.fn : errorExpressionArg, chunkName, chunkNameRange, parser.state.module, expr.loc);\n              var old = parser.state.current;\n              parser.state.current = dep;\n              try {\n                var failed = false;\n                parser.inScope([], function () {\n                  var _iterator = _createForOfIteratorHelper(dependenciesItems),\n                    _step;\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var ee = _step.value;\n                      if (ee.isString()) {\n                        var edep = new RequireEnsureItemDependency(ee.string);\n                        edep.loc = dep.loc;\n                        dep.addDependency(edep);\n                      } else {\n                        failed = true;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                });\n                if (failed) {\n                  return;\n                }\n                if (successExpression) {\n                  if (successExpression.fn.body.type === \"BlockStatement\") {\n                    parser.walkStatement(successExpression.fn.body);\n                  } else {\n                    parser.walkExpression(successExpression.fn.body);\n                  }\n                }\n                old.addBlock(dep);\n              } finally {\n                parser.state.current = old;\n              }\n              if (!successExpression) {\n                parser.walkExpression(successExpressionArg);\n              }\n              if (errorExpression) {\n                if (errorExpression.fn.body.type === \"BlockStatement\") {\n                  parser.walkStatement(errorExpression.fn.body);\n                } else {\n                  parser.walkExpression(errorExpression.fn.body);\n                }\n              } else if (errorExpressionArg) {\n                parser.walkExpression(errorExpressionArg);\n              }\n              return true;\n            }\n        }\n      });\n    }\n  }]);\n  return RequireEnsureDependenciesBlockParserPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}