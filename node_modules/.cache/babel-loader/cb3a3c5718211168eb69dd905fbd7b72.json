{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $gOPD = require('gopd');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar callBound = require('call-bind/callBound');\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar has = require('has');\nvar IsArray = require('./IsArray');\nvar IsPropertyKey = require('./IsPropertyKey');\nvar IsRegExp = require('./IsRegExp');\nvar ToPropertyDescriptor = require('./ToPropertyDescriptor');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-ordinarygetownproperty\n\nmodule.exports = function OrdinaryGetOwnProperty(O, P) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: O must be an Object');\n  }\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: P must be a Property Key');\n  }\n  if (!has(O, P)) {\n    return void 0;\n  }\n  if (!$gOPD) {\n    // ES3 / IE 8 fallback\n    var arrayLength = IsArray(O) && P === 'length';\n    var regexLastIndex = IsRegExp(O) && P === 'lastIndex';\n    return {\n      '[[Configurable]]': !(arrayLength || regexLastIndex),\n      '[[Enumerable]]': $isEnumerable(O, P),\n      '[[Value]]': O[P],\n      '[[Writable]]': true\n    };\n  }\n  return ToPropertyDescriptor($gOPD(O, P));\n};","map":null,"metadata":{},"sourceType":"script"}